{"version":3,"sources":["containers/CoBrand/Content/EditContent/EditContent.js"],"names":["connect","state","console","log","auth","isLoading","dispatch","onEditContent","_id","cobrandEmail","programId","contentName","contentDescription","contentType","contentSource","contentThumbnail","contents","startDate","history","editContent","editorState","EditorState","createEmpty","useState","description","setDescription","onEditorStateChange","artikel","setArtikel","onEditorStateChangeArtikel","isPageLoading","setPageLoading","setProgramList","content","setContent","contentStartDate","setContentStartDate","conFromImgVid","setConFromImgVid","RichTextEditor","createEmptyValue","setTextDeskripsi","textValue","setTextValue","useHistory","JSON","parse","localStorage","getItem","email","params1","whereKeyValues","useEffect","params","axios","method","url","data","headers","then","response","con","DOMParser","parseFromString","con1","getElementById","outerHTML","innerHTML","con2","htmlToDraft","createValueFromString","createWithContent","ContentState","createFromBlockArray","contentBlocks","entityMap","getElementsByTagName","toString","src","includes","replace","des","des2","date","split","programs","catch","error","headingName","routes","path","name","initialValues","validationSchema","validationContentEdit","validateOnChange","onSubmit","values","handleChange","handleSubmit","handleBlur","setFieldValue","errors","touched","className","value","onChange","e","currentTarget","disabled","type","placeholder","onBlur","toolbarClassName","wrapperClassName","editorClassName","draftToHtml","convertToRaw","getCurrentContent","file","files"],"mappings":"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","file":"static/js/60.a5e5c611.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Heading from '../../../../components/UI/Heading/Heading';\nimport './EditContent.scss';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport { editContent } from '../../../../store/actions/dashboard';\nimport RKLoader from '../../../../components/UI/RKLoaderInner/RKLoader';\nimport { connect } from 'react-redux';\nimport { validationContentEdit } from '../../../../helpers/validation/validation';\nimport InputComponent from '../../../../components/UI/Input/Input';\nimport axios from 'axios';\nimport RichTextEditor from 'react-rte';\n\n//texteditor\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState, convertToRaw, convertFromRaw, current,ContentState, convertFromHTML} from \"draft-js\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport draftToHtml from \"draftjs-to-html\";\nimport {stateToHTML} from 'draft-js-export-html'\nimport htmlToDraft from 'html-to-draftjs'\n\n\nfunction EditContent({\n    onEditContent,\n    isLoading\n}) {\n\n\n    let editorState = EditorState.createEmpty()\n    \n\n    const [description, setDescription] = useState(editorState)\n    const onEditorStateChange = (editorState) => {\n        setDescription(editorState)\n    }\n\n    const [artikel, setArtikel] = useState(editorState)\n    const onEditorStateChangeArtikel = (editorState) => {\n        setArtikel(editorState)\n    }\n\n    const [isPageLoading, setPageLoading] = useState(true);\n    const [programList, setProgramList] = useState();\n    const [content, setContent] = useState();\n    const [contentStartDate, setContentStartDate] = useState();\n    const [conFromImgVid, setConFromImgVid] = useState('');\n\n    const [textDeskripsi, setTextDeskripsi] = useState(RichTextEditor.createEmptyValue());\n    const [textValue, setTextValue] = useState(RichTextEditor.createEmptyValue());\n    const toolbarConfig = {\n        // Optionally specify the groups to display (displayed in the order listed).\n        display: ['INLINE_STYLE_BUTTONS', 'BLOCK_TYPE_BUTTONS', 'BLOCK_TYPE_DROPDOWN', 'HISTORY_BUTTONS'],\n        INLINE_STYLE_BUTTONS: [\n            { label: 'Bold', style: 'BOLD' },\n            { label: 'Italic', style: 'ITALIC' },\n            { label: 'Underline', style: 'UNDERLINE' },\n            { label: 'Strikethrough', style: 'STRIKETHROUGH' }\n        ],\n        BLOCK_TYPE_DROPDOWN: [\n            { label: 'Normal', style: 'unstyled' },\n            { label: 'Heading Large', style: 'header-one' },\n            { label: 'Heading Medium', style: 'header-two' },\n            { label: 'Heading Small', style: 'header-three' }\n        ],\n        BLOCK_TYPE_BUTTONS: [\n            { label: 'Unordered List', style: 'unordered-list-item' },\n            { label: 'Ordered List', style: 'ordered-list-item' },\n            { label: 'Blockquote', style: 'blockquote' }\n        ]\n    };\n\n    const history = useHistory();\n    const cobrandEmail = JSON.parse(localStorage.getItem('userData')).email;\n    const _id = localStorage.getItem('contentSelected');\n\n    const params1 = {\n        whereKeyValues: {\n            cobrandEmail: cobrandEmail\n        }\n    };\n\n    useEffect(() => {\n        setPageLoading(true);\n        console.log(_id);\n        if (_id) {\n            const params = {\n                whereKeyValues: {\n                    cobrandEmail: cobrandEmail,\n                    _id: _id\n                }\n            };\n\n            axios({\n                method: 'post',\n                url: 'https://as01.prod.ruangortu.id:8080/api/cobrand/contentFilter',\n                data: params,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            })\n                .then(response => {\n                    console.log(\"Response data: \", response.data);\n                    setContent(response.data.contents[0]);\n                    let con = new DOMParser().parseFromString(response.data.contents[0].contents, 'text/html');\n                    console.log(con);\n                    if (response.data.contents[0].contentType === 'Artikel') {\n                        let con1 = con.getElementById('contents');\n                        console.log('Ini adalah con1 outer' + con1.outerHTML);\n                        console.log('Ini adalah con1 inner' + con1.innerHTML);\n                        let con2 = htmlToDraft(con1.innerHTML);\n                        setTextValue(RichTextEditor.createValueFromString(con1.outerHTML, 'html'));\n                        setConFromImgVid(con1.outerHTML);\n                        // setArtikel(textValue)\n                        setArtikel(EditorState.createWithContent(\n                            ContentState.createFromBlockArray(\n                              con2.contentBlocks, con2.entityMap)))\n\n                        //   deskripsi\n                        // let condes = new DOMParser().parseFromString(response.data.contents[0].contentDescription, 'text/html');\n                        // console.log(condes);\n                    }\n                    else if (response.data.contents[0].contentType === 'Image') {\n                        let con1 = con.getElementsByTagName('img')[0].toString();\n                        setConFromImgVid(con1.src);\n                    }\n                    else if (response.data.contents[0].contentType === 'Video') {\n                        let con1 = con.getElementsByTagName('iframe')[0];\n                        setConFromImgVid(con1.src);\n                    }\n                    else if (response.data.contents[0].contentType === 'Pdf') {\n                        let con1 = con.getElementsByTagName('iframe')[0];\n                        let src = con1.src;\n                        if (src.includes('&embedded=true')) src = src.replace('&embedded=true', '');\n                        if (src.includes('http://docs.google.com/gview?url=')) src = src.replace('http://docs.google.com/gview?url=', '');\n                        setConFromImgVid(src);\n                    }\n\n\n                    let des = response.data.contents[0].contentDescription;\n                    console.log(\"des\", des) //null\n                    let des2 = htmlToDraft(des);\n                    setDescription(EditorState.createWithContent(\n                        ContentState.createFromBlockArray(\n                            des2.contentBlocks, des2.entityMap)))\n\n                    let date = response.data.contents[0].startDate.split('T')[0];\n                    console.log(date);\n                    setContentStartDate(date);\n                    axios({\n                        method: 'post',\n                        url: 'https://as01.prod.ruangortu.id:8080/api/cobrand/programFilter',\n                        data: params1,\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                    })\n                        .then(response => {\n                            console.log(\"Program list: \", response.data);\n                            setProgramList(response.data.programs);\n                            setPageLoading(false);\n                        })\n                        .catch(error => {\n                            console.log(error);\n                            setPageLoading(false);\n                        });\n                })\n                .catch(error => {\n                    console.log(error);\n                    setPageLoading(false);\n                });\n        }\n    }, []);\n\n\n    if (isPageLoading) {\n        return <RKLoader />\n    }\n\n    return (\n        <>\n            <Heading headingName=\"Artikel\" routes={[\n                { path: '/cms/content', name: 'Artikel' },\n                { path: '/cms/content/edit', name: 'Ubah Artikel Terpilih' }\n            ]} />\n            <Formik\n                initialValues={{ \n                    programId: content.programId ,\n                    contentName: content.contentName,\n                    contentDescription: description,\n                    contentType: content.contentType,\n                    contentSource: content.contentSource,\n                    contents: conFromImgVid,\n                    startDate: contentStartDate\n                }}\n                validationSchema={validationContentEdit}\n                validateOnChange={true}\n                onSubmit={values => {\n                    onEditContent(_id, cobrandEmail, values.programId, values.contentName, values.contentDescription, values.contentType, values.contentSource, values.contentThumbnail, values.contents, values.startDate, history)\n                }}\n            >\n\n                {({ handleChange, handleSubmit, handleBlur, setFieldValue, values, errors, touched }) => (\n                    <form onSubmit={handleSubmit}>\n                        <div className=\"EditContent\">\n                            <h1>Ubah Artikel: {content.contentName}</h1>\n                            <div className=\"form-group\">\n                                <label>Tipe Artikel</label>\n                                <select\n                                    name=\"contentType\"\n                                    value={values.contentType}\n                                    onChange={(e) => {\n                                        setFieldValue(\"contentType\", e.currentTarget.value);\n                                        setFieldValue(\"contents\", '');\n                                    }}\n                                >\n                                    <option value=\"\" disabled>Select Content Type</option>\n                                    <option value=\"Artikel\">Artikel</option>\n                                    <option value=\"Image\">Image</option>\n                                    <option value=\"Video\">Video</option>\n                                    <option value=\"Pdf\">File Pdf</option>\n                                </select>\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Judul</label>\n                                <InputComponent\n                                    type=\"text\"\n                                    name=\"contentName\"\n                                    className=\"form-group__input form-group__input--fullwidth\"\n                                    placeholder=\"Example\"\n                                    value={values.contentName}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n\n                                />\n                                {touched.contentName && <span className=\"message__error\">{errors.contentName}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Deskripsi</label>\n                                <Editor\n                                        editorState={description}\n                                        toolbarClassName=\"toolbarClassName\"\n                                        wrapperClassName=\"wrapperClassName\"\n                                        editorClassName=\"editorClassName\"\n                                        onEditorStateChange={onEditorStateChange}\n                                        // value={draftToHtml(convertToRaw(artikel.getCurrentContent()))}\n                                        values={values.contentDescription}\n       \n                                        name=\"contentDescription\"\n                                        \n                                        onChange={(editorState) => {\n                                            setTextDeskripsi(values.contentDescription);\n                                            // setFieldValue(\"contentDescription\", description);\n                                            setFieldValue(\"contentDescription\", draftToHtml(convertToRaw(description.getCurrentContent())));\n                                            console.log(description); ///value yang lama\n                                            console.log(values.contentDescription) //get nilai yg terbaru\n                                            \n                                        }}\n                                        \n                                    />\n                                {/* <RichTextEditor\n                                        name=\"contentDescription\"\n                                        placeholder=\"Type your contents here...\"\n                                        className=\"form-group_rte\"\n                                        value={values.contentDescription}\n                                        // value={values.contentDescription}\n                                        toolbarConfig={toolbarConfig}\n                                        onBlur={handleBlur}\n                                        // onChange={handleChange}\n                                        onChange={(e) => {\n                                            setTextDeskripsi(e);\n                                            setFieldValue(\"contentDescription\", e.toString(\"html\"));\n                                            console.log(values.contentDescription);\n                                        }}\n                                /> */}\n                                {/* <RichTextEditor\n                                        name=\"contentDescription\"\n                                        placeholder=\"Type your contents here...\"\n                                        className=\"form-group_rte\"\n                                        // value={textValue}\n                                        value={values.contentDescription}\n                                        toolbarConfig={toolbarConfig}\n                                        onBlur={handleBlur}\n                                        onChange={(e) => {\n                                            setTextDeskripsi(e);\n                                            setFieldValue(\"contentDescription\", e.toString(\"html\"));\n                                            console.log(values.contentDescription);\n                                        }}\n                                    /> */}\n                                {/* <InputComponent\n                                    type=\"textarea\"\n                                    name=\"contentDescription\"\n                                    placeholder=\"Type Something...\"\n                                    value={values.contentDescription}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                /> */}\n                                {/* {touched.contentDescription && <span className=\"message__error\">{errors.contentDescription}</span>} */}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Sumber</label>\n                                <InputComponent\n                                    type=\"text\"\n                                    name=\"contentSource\"\n                                    className=\"form-group__input form-group__input--fullwidth\"\n                                    placeholder=\"Example\"\n                                    value={values.contentSource}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                                {touched.contentSource && <span className=\"message__error\">{errors.contentSource}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Thumbnail</label>\n                                <img className='photo' src={content.contentThumbnail}></img>\n                                <br></br>\n                                <InputComponent\n                                    type=\"file\"\n                                    className=\"form-group__input\"\n                                    name=\"contentThumbnail\"\n                                    onBlur={handleBlur}\n                                    onChange={(e) => {\n                                        let file = e.currentTarget.files[0];\n                                        if (file) {\n                                            console.log(\"File to upload: \", file);\n                                            setFieldValue(\"contentThumbnail\", file);\n                                        }\n                                    }}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Isi Artikel</label>\n                                {values.contentType === \"Artikel\" ? (\n                                    /*<InputComponent\n                                        type=\"textarea\"\n                                        name=\"contents\"\n                                        placeholder=\"Type Something...\"\n                                        value={values.contents}\n                                        onChange={handleChange}\n                                    />*/\n\n                                    <Editor\n                                        editorState={artikel}\n                                        toolbarClassName=\"toolbarClassName\"\n                                        wrapperClassName=\"wrapperClassName\"\n                                        editorClassName=\"editorClassName\"\n                                        onEditorStateChange={onEditorStateChangeArtikel}\n                                        // value={draftToHtml(convertToRaw(artikel.getCurrentContent()))}\n                                        values={values.contents}\n       \n                                        name=\"contents\"\n                                        \n                                        onChange={(editorState) => {\n                                            setTextValue(values.contents);\n                                            // setFieldValue(\"contentDescription\", description);\n                                            setFieldValue(\"contents\", draftToHtml(convertToRaw(artikel.getCurrentContent())));\n                                            console.log(textValue); ///value yang lama\n                                            console.log(values.contents) //get nilai yg terbaru\n                                            console.log(artikel) //get nilai yg terbaru\n                                            \n                                        }}\n                                        \n                                    />\n\n\n                                    // <RichTextEditor\n                                    //     name=\"contents\"\n                                    //     placeholder=\"Type your contents here...\"\n                                    //     className=\"form-group_rte\"\n                                    //     value={textValue}\n                                    //     toolbarConfig={toolbarConfig}\n                                    //     onBlur={handleBlur}\n                                    //     onChange={(e) => {\n                                    //         setTextValue(e);\n                                    //         setFieldValue(\"contents\", e.toString(\"html\"));\n                                    //         console.log(values.contents);\n                                    //     }}\n                                    // />\n                                ) : null}\n                                {values.contentType === \"Image\" ? (\n                                    // <img src={conFromImgVid}></img>\n\n                                    <InputComponent\n                                        type=\"file\"\n                                        className=\"form-group__input\"\n                                        name=\"contents\"\n                                        onBlur={handleBlur}\n                                        // value={values.contents}\n                                        // onChange={handleChange}\n                                        onChange={(e) => {\n                                        let file = e.currentTarget.files[0];\n                                        if (file) {\n                                            console.log(\"File to upload: \", file);\n                                            setFieldValue(\"contents\", file);\n                                        }\n                                    }}\n                                    />\n\n                                    // <InputComponent\n                                    //     type=\"text\"\n                                    //     name=\"contents\"\n                                    //     className=\"form-group__input form-group__input--fullwidth\" \n                                    //     placeholder=\"Type Image URL... (https://example.com/something/something.jpg)\"\n                                    //     value={values.contents}\n                                    //     onChange={handleChange}\n                                    //     onBlur={handleBlur}\n                                    // />\n                                ) : null}\n                                {values.contentType === \"Video\" ? (\n                                    <InputComponent\n                                        type=\"text\"\n                                        name=\"contents\"\n                                        className=\"form-group__input form-group__input--fullwidth\"\n                                        placeholder=\"Type Video URL... (Youtube/Vimeo/Dailymotion/etc)\"\n                                        value={values.contents}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                    />\n                                ) : null}\n                                {values.contentType === \"Pdf\" ? (\n                                    <InputComponent\n                                        type=\"text\"\n                                        name=\"contents\"\n                                        className=\"form-group__input form-group__input--fullwidth\"\n                                        placeholder=\"Type Pdf URL... (just for pdf file)\"\n                                        // placeholder={values.contents}\n                                        value={values.contents}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                    />\n                                    // untuk internal masih diupdate\n                                    //url ok\n                                ) : null}\n                                {touched.contents && <span className=\"message__error\">{errors.contents}</span>}\n                            </div>\n                            {/* <div className=\"form-group\">\n                                <label>Set Schedule</label>\n                                <InputComponent\n                                    type=\"date\"\n                                    className=\"form-group__input\"\n                                    name=\"startDate\"\n                                    value={values.startDate}\n                                    min={new Date().toISOString().split('T')[0]}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                                {touched.startDate && <span className=\"message__error\">{errors.startDate}</span>}\n                            </div> */}\n                            <div>\n                                <button className=\"btn btn-submit\" type=\"submit\">\n                                    Update Artikel\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                )}\n            </Formik>\n            {isLoading ? <RKLoader /> : null}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    console.log(state.auth.isLoading);\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onEditContent: (_id, cobrandEmail, programId, contentName, contentDescription, contentType, contentSource, contentThumbnail, contents, startDate, history) =>\n            dispatch(editContent(_id, cobrandEmail, programId, contentName, contentDescription, contentType, contentSource, contentThumbnail, contents, startDate, history))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditContent)\n"],"sourceRoot":""}