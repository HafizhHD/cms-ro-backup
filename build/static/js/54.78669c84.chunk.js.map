{"version":3,"sources":["components/Texteditor/TextEditor.js","containers/CoBrand/Content/AddContent/AddContent.js"],"names":["Component","connect","state","console","log","auth","isLoading","dispatch","onAddContent","cobrandEmail","programId","contentName","contentDescription","contentType","contentSource","contentThumbnail","contents","startDate","isActive","history","addContent","editorState","EditorState","createEmpty","useState","description","setDescription","onEditorStateChange","artikel","setArtikel","onEditorStateChangeArtikel","isPageLoading","setPageLoading","programList","setProgramList","valueRadio","setRadio","RichTextEditor","createEmptyValue","textDeskripsi","setTextDeskripsi","setTextValue","useHistory","JSON","parse","localStorage","getItem","email","params","whereKeyValues","useEffect","axios","method","url","data","headers","then","response","programs","catch","error","RKLoader","Heading","headingName","routes","path","name","initialValues","Date","toISOString","split","validationSchema","validationContent","validateOnChange","onSubmit","values","window","scrollTo","handleChange","handleSubmit","handleBlur","setFieldValue","errors","touched","className","value","onChange","e","currentTarget","disabled","map","program","_id","programName","Input","type","placeholder","onBlur","toolbarClassName","wrapperClassName","editorClassName","draftToHtml","convertToRaw","getCurrentContent","file","files","id","onClick","for","min","defaultChecked"],"mappings":"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","file":"static/js/54.78669c84.chunk.js","sourcesContent":["// import React, { Component } from \"react\";\n\n// import { Editor } from \"react-draft-wysiwyg\";\n// import { EditorState, convertToRaw } from \"draft-js\";\n\n// import \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n// import draftToHtml from \"draftjs-to-html\";\n\n\n// export default class TextEditor extends Component {\n//     state = {\n//         editorState: EditorState.createEmpty(),\n//     };\n\n//     onEditorStateChange = (editorState) => {\n//         this.setState({\n//             editorState,\n//         });\n//     };\n\n//     render() {\n//         const { editorState } = this.state;\n//         // console.log(draftToHtml(convertToRaw(editorState.getCurrentContent())));\n\n//         return (\n//             <div>\n//                 <h1>Text Editor component</h1>\n//                 <Editor\n//                     editorState={editorState}\n//                     toolbarClassName=\"toolbarClassName\"\n//                     wrapperClassName=\"wrapperClassName\"\n//                     editorClassName=\"editorClassName\"\n//                     onEditorStateChange={this.onEditorStateChange}\n//                 />\n//                 {/* <textarea\n//                     disabled\n//                     value={draftToHtml(convertToRaw(editorState.getCurrentContent()))}\n//                 ></textarea> */}\n//             </div>\n//         )\n//     }\n// }\n\nimport React, { Component } from 'react';\nimport { convertToRaw, EditorState } from 'draft-js';\nimport { Editor } from 'react-draft-wysiwyg';\n// import '../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport draftToHtml from 'draftjs-to-html';\n\n\n\nexport default class TextEditor extends Component{\n    constructor(props) {\n      super(props);\n      this.state = {\n        editorState: EditorState.createEmpty(),\n        message:'Try the editor below!',\n        rawMessage:''\n      };\n      \n      this.onEditorStateChange = this.onEditorStateChange.bind(this);\n      this.handleEditorStateToMessage = this.handleEditorStateToMessage.bind(this);\n    }\n    \n    onEditorStateChange(editorState) {\n      this.setState({\n          editorState,\n          rawMessage: draftToHtml(convertToRaw(editorState.getCurrentContent()))\n      });\n    };\n\n    handleEditorStateToMessage() {\n        this.setState({\n            message: this.state.rawMessage\n        })\n    }\n\n    render() {\n      const { editorState } = this.state;\n      const wrapperStyle = {\n          border: '1px solid #969696',\n      }\n      const editorStyle = {\n          height:'10rem',\n          padding:'1rem'\n      }\n        return (\n          <React.Fragment>\n            {/* <Grid container>\n                <Grid item xs={3}></Grid>\n                <Grid item xs={12} style={{border:'1px solid #969696', borderRadius:'3px', height:'10rem', padding:'1rem'}}>\n                    <div dangerouslySetInnerHTML={{__html: this.state.message}}></div>\n                </Grid>\n                <Grid item xs={3}></Grid>\n            </Grid> */}\n            <div style={{marginTop:'5%'}}>\n                <Editor\n                    initialEditorState={editorState}\n                    wrapperClassName=\"wrapper-class\"\n                    wrapperStyle={wrapperStyle}\n                    editorStyle={editorStyle}\n                    // toolbarStyle={toolbarStyle}\n                    editorClassName=\"demo-editor\"                                                                               \n                    onEditorStateChange={this.onEditorStateChange}\n                    toolbar={{\n                        options: ['inline', 'blockType', 'fontSize', 'textAlign', \n                                  'history', 'colorPicker'],                                \n                        inline: {\n                          options: ['italic', 'bold'],\n                          bold: { className: 'demo-option-custom' },\n                          italic: { className: 'demo-option-custom' },\n                          underline: { className: 'demo-option-custom' },\n                          strikethrough: {className: 'demo-option-custom' },\n                          monospace: { className: 'demo-option-custom' },\n                          superscript: {className: 'demo-option-custom'},\n                          subscript: { className: 'demo-option-custom' }\n                        },\n                        blockType: {className: 'demo-option-custom-wide',\n                        dropdownClassName: 'demo-dropdown-custom'},\n                        fontSize: { className: 'demo-option-custom-medium' }\n                    }}\n                />\n            </div>\n            <div style={{marginTop:'2%'}}>\n                <button\n                    variant=\"outlined\"\n                    onClick={this.handleEditorStateToMessage}\n                >\n                    submit\n                </button>\n            </div>\n          </React.Fragment>\n        )\n     }\n  }\n\n","import React, { useState, useEffect } from 'react';\nimport Heading from '../../../../components/UI/Heading/Heading';\nimport './AddContent.scss';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport { addContent, loadingStart } from '../../../../store/actions/dashboard';\nimport RKLoader from '../../../../components/UI/RKLoaderInner/RKLoader';\nimport { connect } from 'react-redux';\nimport { validationContent } from '../../../../helpers/validation/validation';\nimport InputComponent from '../../../../components/UI/Input/Input';\nimport axios from 'axios';\nimport RichTextEditor from 'react-rte';\nimport { toBase64 } from '../../../../helpers/fileHelper/fileHelper'\nimport TextEditor from '../../../../components/Texteditor/TextEditor';\n\n//texteditor\nimport { ContentState, Editor } from \"react-draft-wysiwyg\";\nimport { EditorState, convertToRaw, convertFromRaw, current} from \"draft-js\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport draftToHtml from \"draftjs-to-html\";\nimport {stateToHTML} from 'draft-js-export-html'\n\nfunction AddContent({\n    onAddContent,\n    isLoading\n}) {\n    let editorState = EditorState.createEmpty()\n    \n\n    const [description, setDescription] = useState(editorState)\n    const onEditorStateChange = (editorState) => {\n        setDescription(editorState)\n    }\n\n    const [artikel, setArtikel] = useState(editorState)\n    const onEditorStateChangeArtikel = (editorState) => {\n        setArtikel(editorState)\n    }\n    \n    \n\n\n    const [isPageLoading, setPageLoading] = useState(true);\n    const [programList, setProgramList] = useState();\n    const [valueRadio, setRadio] = useState('');\n\n    const [textDeskripsi, setTextDeskripsi] = useState(RichTextEditor.createEmptyValue());\n    const [textValue, setTextValue] = useState(RichTextEditor.createEmptyValue());\n    const toolbarConfig = {\n        // Optionally specify the groups to display (displayed in the order listed).\n        display: ['INLINE_STYLE_BUTTONS', 'BLOCK_TYPE_BUTTONS', 'BLOCK_TYPE_DROPDOWN', 'HISTORY_BUTTONS'],\n        INLINE_STYLE_BUTTONS: [\n            { label: 'Bold', style: 'BOLD' },\n            { label: 'Italic', style: 'ITALIC' },\n            { label: 'Underline', style: 'UNDERLINE' },\n            { label: 'Strikethrough', style: 'STRIKETHROUGH' }\n        ],\n        BLOCK_TYPE_DROPDOWN: [\n            { label: 'Normal', style: 'unstyled' },\n            { label: 'Heading Large', style: 'header-one' },\n            { label: 'Heading Medium', style: 'header-two' },\n            { label: 'Heading Small', style: 'header-three' }\n        ],\n        BLOCK_TYPE_BUTTONS: [\n            { label: 'Unordered List', style: 'unordered-list-item' },\n            { label: 'Ordered List', style: 'ordered-list-item' },\n            { label: 'Blockquote', style: 'blockquote' }\n        ]\n    };\n\n    const history = useHistory();\n    const cobrandEmail = JSON.parse(localStorage.getItem('userData')).email;\n\n    const params = {\n        whereKeyValues: {\n            cobrandEmail: cobrandEmail\n        }\n    };\n\n    useEffect(() => {\n        axios({\n            method: 'post',\n            url: 'https://as01.prod.ruangortu.id:8080/api/cobrand/programFilter',\n            data: params,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n            .then(response => {\n                console.log(\"Program list: \", response.data);\n                setProgramList(response.data.programs);\n                setPageLoading(false);\n            })\n            .catch(error => {\n                console.log(error);\n                setPageLoading(false);\n            });\n    }, []);\n\n    if (isPageLoading) {\n        return <RKLoader />\n    }\n\n    return (\n        <>\n            <Heading headingName=\"Content\" routes={[\n                { path: '/content', name: 'Content' },\n                { path: '/content/add', name: 'Create new content' }\n            ]} />\n            <Formik\n                initialValues={{\n                    programId: '-1',\n                    contentName: '',\n                    contentDescription: '',\n                    contentType: '',\n                    contentSource: '',\n                    contentThumbnail: '',\n                    contents: '',\n                    startDate: new Date().toISOString().split('T')[0],\n                    isActive: true\n                }}\n                validationSchema={validationContent}\n                validateOnChange={true}\n                onSubmit={values => {\n                    window.scrollTo(0, 0);\n                    onAddContent(cobrandEmail, values.programId, values.contentName, values.contentDescription,\n                        values.contentType, values.contentSource, values.contentThumbnail, values.contents,\n                        values.startDate, values.isActive, history)\n                }}\n            >\n                {({ handleChange, handleSubmit, handleBlur, setFieldValue, values, errors, touched }) => (\n                    <form onSubmit={handleSubmit}>\n                        <div className=\"AddContent\">\n                            <h1 className=\"AddContent_title\">Create New Content</h1>\n                            <div className=\"form-group\">\n                                <label>Content Type</label>\n                                <select\n                                    name=\"contentType\"\n                                    value={values.contentType}\n                                    onChange={(e) => {\n                                        setFieldValue(\"contentType\", e.currentTarget.value);\n                                        setFieldValue(\"contents\", '');\n                                    }}\n                                >\n                                    <option value=\"\" disabled>Select Content Type</option>\n                                    <option value=\"Artikel\">Artikel</option>\n                                    <option value=\"Image\">Image</option>\n                                    <option value=\"Video\">Video</option>\n                                    <option value=\"Pdf\">File Pdf</option>\n                                </select>\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Program Name</label>\n                                <select\n                                    name=\"programId\"\n                                    value={values.programId}\n                                    onChange={handleChange}\n                                >\n                                    <option value=\"-1\" disabled>Select Program</option>\n                                    {/* <option value=\"\">(Tanpa Program)</option> */}\n                                    {\n                                        programList.map((program) => {\n                                            return (\n                                                <option value={program._id}>{program.programName}</option>\n                                            )\n                                        })\n                                    }\n                                </select>\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Title</label>\n                                <InputComponent\n                                    type=\"text\"\n                                    name=\"contentName\"\n                                    className=\"form-group__input form-group__input--fullwidth\"\n                                    placeholder=\"Example\"\n                                    value={values.contentName}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                                {touched.contentName && <span className=\"message__error\">{errors.contentName}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Description</label>\n                                <Editor\n                                    editorState={description}\n                                    toolbarClassName=\"toolbarClassName\"\n                                    wrapperClassName=\"wrapperClassName\"\n                                    editorClassName=\"editorClassName\"\n                                    onEditorStateChange={onEditorStateChange}\n                                    // onEditorStateChange={updateTextDescription}\n                                    // value={description.values}\n                                    value={draftToHtml(convertToRaw(description.getCurrentContent()))}\n                                    // value={draftToHtml(convertToRaw(editorState.getCurrentContent()))}\n                                    name=\"contentDescription\"\n                                    onChange={(editorState) => {\n                                        setTextDeskripsi(editorState);\n                                        // setFieldValue(\"contentDescription\", description);\n                                        setFieldValue(\"contentDescription\", draftToHtml(convertToRaw(description.getCurrentContent())));\n                                        console.log(textDeskripsi);\n                                        console.log(values.contentDescription)\n                                        // console.log(dangerouslySetInnerHTML={{ __html: item.description}} )\n                                    }}\n                                    \n                                />\n                                {touched.contentDescription && <span className=\"message__error\">{errors.contentDescription}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Source</label>\n                                <InputComponent\n                                    type=\"text\"\n                                    name=\"contentSource\"\n                                    className=\"form-group__input form-group__input--fullwidth\"\n                                    placeholder=\"Example\"\n                                    value={values.contentSource}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                \n                                />\n                                {touched.contentSource && <span className=\"message__error\">{errors.contentSource}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Photo</label>\n                                <InputComponent\n                                    type=\"file\"\n                                    className=\"form-group__input\"\n                                    name=\"contentThumbnail\"\n                                    onBlur={handleBlur}\n                                    onChange={(e) => {\n                                        let file = e.currentTarget.files[0];\n                                        if (file) {\n                                            console.log(\"File to upload: \", file);\n                                            setFieldValue(\"contentThumbnail\", file);\n                                        }\n                                    }}\n                                />\n                                {touched.contentThumbnail && <span className=\"message__error\">{errors.contentThumbnail}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Contents</label>\n                                {values.contentType === \"Artikel\" ? (\n                                    <Editor\n                                    editorState={artikel}\n                                    toolbarClassName=\"toolbarClassName\"\n                                    wrapperClassName=\"wrapperClassName\"\n                                    editorClassName=\"editorClassName\"\n                                    onEditorStateChange={onEditorStateChangeArtikel}\n                                    // onEditorStateChange={updateTextDescription}\n                                    // value={description.values}\n                                    value={draftToHtml(convertToRaw(artikel.getCurrentContent()))}\n                                    // value={draftToHtml(convertToRaw(editorState.getCurrentContent()))}\n                                    name=\"contents\"\n                                    onChange={(editorState) => {\n                                        setTextValue(editorState);\n                                        // setFieldValue(\"contentDescription\", description);\n                                        setFieldValue(\"contents\", draftToHtml(convertToRaw(artikel.getCurrentContent())));\n                                        // console.log(textDeskripsi);\n                                        // console.log(values.contents)\n                                    }}\n                                    \n                                />\n                                ) : null}\n                                {values.contentType === \"Image\" ? (\n                                    <div>\n                                        <p>Pilih media yang ingin di upload :</p>\n                                        <form>\n                                            <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'internal'}\n                                                onClick={() => { setRadio('internal') }}\n                                            />\n                                            <label for=\"internal\" >Media Internal Komputer</label>\n                                            <br></br>\n                                            <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'url'}\n                                                onClick={() => setRadio('url')}\n                                            />\n                                            <label for=\"url\" >Alamat URL</label>\n                                            <br></br>\n                                        </form>\n\n                                        {valueRadio === 'internal' ?\n                                            <InputComponent\n                                                type=\"file\"\n                                                className=\"form-group__input\"\n                                                name=\"contents\"\n                                                onBlur={handleBlur}\n                                                //   value={values.contents}\n                                                //   onChange={handleChange}\n                                                onChange={(e) => {\n                                                    let file = e.currentTarget.files[0];\n                                                    if (file) {\n                                                        console.log(\"File to upload: \", file);\n                                                        setFieldValue(\"contents\", file);\n                                                    }\n                                                }}\n                                            />\n                                            :\n                                            <InputComponent\n                                                type=\"text\"\n                                                name=\"contents\"\n                                                className=\"form-group__input form-group__input--fullwidth\"\n                                                placeholder=\"Type Image URL... (https://example.com/something/something.jpg)\"\n                                                value={values.contents}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                            />\n                                        }\n\n                                    </div>\n\n                                ) : null}\n                                {values.contentType === \"Video\" ?\n                                    // (\n                                    //     <div>\n                                    //         <p>Pilih media yang ingin di upload :</p>\n                                    //         <form>\n                                    //             <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'internal'}\n                                    //             onClick={() => {setRadio('internal')}}\n                                    //             />\n                                    //             <label for=\"internal\" >Media Internal Komputer</label>\n                                    //             <br></br>\n                                    //             <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'url'}\n                                    //             onClick={() =>setRadio('url')}\n                                    //             />\n                                    //             <label for=\"url\" >Alamat URL</label>\n                                    //             <br></br>\n                                    //         </form>\n\n                                    //         {valueRadio === 'internal' ? \n                                    //         <InputComponent\n                                    //         type=\"file\"\n                                    //         className=\"form-group__input\"\n                                    //         name=\"contents\"\n                                    //         onBlur={handleBlur}\n                                    //         //   value={values.contents}\n                                    //         //   onChange={handleChange}\n                                    //         onChange={(e) => {\n                                    //             let file = e.currentTarget.files[0];\n                                    //             if (file) {\n                                    //                 console.log(\"File to upload: \", file);\n                                    //                 setFieldValue(\"contents\", file);\n                                    //             }\n                                    //         }}\n                                    //         />\n                                    //         : \n                                    //         <InputComponent\n                                    //         type=\"text\"\n                                    //         name=\"contents\"\n                                    //         className=\"form-group__input form-group__input--fullwidth\"\n                                    //         placeholder=\"Type Video URL... (Youtube/Vimeo/Dailymotion/etc)\"\n                                    //         value={values.contents}\n                                    //         onChange={handleChange}\n                                    //         onBlur={handleBlur}\n                                    //         />\n                                    //         }\n                                    //     </div>\n\n                                    // ) \n                                    <InputComponent\n                                        type=\"text\"\n                                        name=\"contents\"\n                                        className=\"form-group__input form-group__input--fullwidth\"\n                                        placeholder=\"Type Video URL... (Youtube/Vimeo/Dailymotion/etc)\"\n                                        value={values.contents}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                    />\n                                    : null}\n                                {values.contentType === \"Pdf\" ? (\n                                    <div>\n                                        <p>Pilih media yang ingin di upload :</p>\n                                        <form>\n                                            <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'internal'}\n                                                onClick={() => { setRadio('internal') }}\n                                            />\n                                            <label for=\"internal\" >Media Internal - Maks 300kb</label>\n                                            <br></br>\n                                            <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'url'}\n                                                onClick={() => setRadio('url')}\n                                            />\n                                            <label for=\"url\" >Alamat URL</label>\n                                            <br></br>\n                                        </form>\n\n                                        {valueRadio === 'internal' ?\n                                            <InputComponent\n                                                type=\"file\"\n                                                className=\"form-group__input\"\n                                                name=\"contents\"\n                                                onBlur={handleBlur}\n                                                //   value={values.contents}\n                                                //   onChange={handleChange}\n                                                onChange={(e) => {\n                                                    let file = e.currentTarget.files[0];\n                                                    if (file) {\n                                                        console.log(\"File to upload: \", file);\n                                                        setFieldValue(\"contents\", file);\n                                                    }\n                                                }}\n                                            />\n                                            :\n                                            <InputComponent\n                                                type=\"text\"\n                                                name=\"contents\"\n                                                className=\"form-group__input form-group__input--fullwidth\"\n                                                placeholder=\"Type Pdf URL... (Pdf file)\"\n                                                value={values.contents}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                            />\n                                        }\n                                    </div>\n\n                                ) : null}\n                                {touched.contents && <span className=\"message__error\">{errors.contents}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Set Schedule</label>\n                                <InputComponent\n                                    type=\"date\"\n                                    className=\"form-group__input\"\n                                    name=\"startDate\"\n                                    value={values.startDate}\n                                    min={new Date().toISOString().split('T')[0]}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                                {touched.startDate && <span className=\"message__error\">{errors.startDate}</span>}\n                            </div>\n                            {/* end date */}\n                            {/* <div className=\"form-group\">\n                                <label>End Date</label>\n                                <InputComponent\n                                    type=\"date\"\n                                    className=\"form-group__input\"\n                                    name=\"startDate\"\n                                    value={values.startDate}\n                                    max={new Date().toISOString().split('T')[0]}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                                {touched.startDate && <span className=\"message__error\">{errors.startDate}</span>}\n                            </div> */}\n                            <div className=\"form-group\">\n                                <div className=\"form-group_switch\">\n                                    <p className=\"form-group_switch_status\">Status:</p>\n                                    <p className=\"form-group_switch_inactive\">Inactive</p>\n                                    <label className=\"form-group_switch_switch\">\n                                        <input type=\"checkbox\" className=\"form-group_switch_switch_checkbox\"\n                                            name=\"isActive\"\n                                            defaultChecked={values.isActive}\n                                            onChange={() => {\n                                                values.isActive = !values.isActive;\n                                                console.log(values.isActive);\n                                            }}></input>\n                                        <span className=\"form-group_switch_switch_slider\"></span>\n                                    </label>\n                                    <p className=\"form-group_switch_active\">Active</p>\n                                </div>\n                            </div>\n                            <div>\n                                <button className=\"btn btn-submit\" type=\"submit\">\n                                    Post Content\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                )}\n            </Formik>\n            {console.log(isLoading)}\n            {isLoading ? <RKLoader /> : null}\n        </>\n    )\n\n}\n\n\n\n// 1- install pdfjs library | npm install pdfjs-dist@2.6.347\n// 2- install the core package | npm install @react-pdf-viewer/core@2.4.1   ok\n// 3- install pdf viewer default layout | npm install @react-pdf-viewer/default-layout  ok\n\n// its so loadingStart, i am very tired n feell sleepy, well will be ok rgight, \n\nconst mapStateToProps = state => {\n    console.log(state.auth.isLoading);\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAddContent: (cobrandEmail, programId, contentName, contentDescription, contentType, contentSource, contentThumbnail, contents, startDate, isActive, history) =>\n            dispatch(addContent(cobrandEmail, programId, contentName, contentDescription, contentType, contentSource, contentThumbnail, contents, startDate, isActive, history))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddContent)\n"],"sourceRoot":""}