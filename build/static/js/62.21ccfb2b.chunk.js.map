{"version":3,"sources":["components/UI/Input/Input.js","helpers/validation/validation.js","containers/CoBrand/Setting/Setting.js","components/UI/Heading/Heading.js"],"names":["Input","placeholder","type","onChange","onBlur","value","className","message","name","min","max","disabled","isError","id","memo","PhoneRegex","validationFormLogin","yup","userName","required","password","validationFormRegister","email","accountName","cobrandName","thumbnail","test","img","includes","size","phoneNumber","matches","address","confirmPassword","when","schema","validationFormEdit","validationProgram","programName","programDescription","programThumbnail","startDate","endDate","category","targetAudiance","contentPrograms","of","namaTahapan","contentName","contents","answerKey","is","then","otherwise","validationProgramEdit","validationStepEdit","validationContent","contentDescription","contentSource","contentThumbnail","isActive","topics","targetAudience","validationContentEdit","validationUserEdit","nameUser","emailUser","birdDate","validationNotification","destination","messageSubject","messageContent","scheduleTime","mediaType","validationAudience","audianceName","validationNotifCategory","description","validationProgCategory","validationStaff","phone","validationContentTopic","topicName","validationScreenTime","controlParameterName","controlParameterValue","connect","state","isLoading","auth","dispatch","onEditProfile","oldEmail","oldPassword","photo","editProfile","userData","JSON","parse","localStorage","getItem","useState","photoRaw","setPhotoRaw","add","topic","kateprog","notif","time","photoPreview","setPhotoPreview","useEffect","toBase64","result","catch","error","to","headingName","routes","initialValues","cobrandEmail","validationSchema","validateOnChange","onSubmit","values","handleChange","handleBlur","handleSubmit","setFieldValue","touched","errors","Boolean","e","file","currentTarget","files","style","width","borderRadius","src","Body","Title","textAlign","Text","Heading","length","map","item","i","path","exact"],"mappings":"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","file":"static/js/62.21ccfb2b.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\nimport './Input.scss';\r\n\r\nfunction Input({\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    onBlur,\r\n    value,\r\n    className,\r\n    message,\r\n    name,\r\n    min,\r\n    max,\r\n    disabled,\r\n    isError\r\n}) {\r\n    if(type === \"textarea\") {\r\n        return (\r\n        <>\r\n            <textarea\r\n                name={name}\r\n                id={name}\r\n                className={className}\r\n                placeholder={placeholder}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                value={value}\r\n                disabled={disabled}\r\n            />\r\n            {isError && (\r\n                <div className=\"message\">\r\n                    <span className=\"message__error\">{message}</span>\r\n                </div>\r\n            )}\r\n        </>\r\n        )\r\n    }\r\n    else if(type === 'date' || type === 'datetime-local') {\r\n        return (\r\n            <>\r\n                <input\r\n                    name={name}\r\n                    className={className} \r\n                    type={type}\r\n                    placeholder={placeholder}\r\n                    onChange={onChange}\r\n                    onBlur={onBlur}\r\n                    value={value}\r\n                    min={min}\r\n                    max={\"9999-12-31\"}\r\n                    disabled={disabled}\r\n                />\r\n                {isError && (\r\n                    <div className=\"message\">\r\n                        <span className=\"message__error\">{message}</span>\r\n                    </div>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n    else if(type === 'number') {\r\n        return (\r\n            <>\r\n                <input\r\n                    name={name}\r\n                    className={className} \r\n                    type={type}\r\n                    onChange={onChange}\r\n                    onBlur={onBlur}\r\n                    value={value}\r\n                    min={min}\r\n                    max={max}\r\n                    disabled={disabled}\r\n                />\r\n                {isError && (\r\n                    <div className=\"message\">\r\n                        <span className=\"message__error\">{message}</span>\r\n                    </div>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n    else return (\r\n        <>\r\n            <input\r\n                name={name}\r\n                className={className} \r\n                type={type}\r\n                placeholder={placeholder}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                value={value}\r\n                disabled={disabled}\r\n            />\r\n            {isError && (\r\n                <div className=\"message\">\r\n                    <span className=\"message__error\">{message}</span>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Input) \r\n","import * as yup from 'yup';\r\n\r\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\r\nconst UserRegex = /^\\S*$/;\r\n\r\nexport const validationFormLogin = yup.object({\r\n    userName: yup.string('Enter your email').required('Email is required'),\r\n    password: yup.string('Enter your password').required('Password is required')\r\n})\r\n\r\nexport const validationFormRegister = yup.object({\r\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\r\n    accountName: yup.string('Enter your name').required('Name is required'),\r\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\r\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\r\n        .test(\r\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\r\n            (img) =>\r\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\r\n        )\r\n        .test(\r\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\r\n            (img) => {\r\n                if(img) {\r\n                    return img.size <= 2097152;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n        ),\r\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\r\n    address: yup.string('Enter your address').required('Address is required'),\r\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\r\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\r\n        .when('password', (password, schema) => {\r\n            return schema.test({\r\n                test: confirmPassword => password && confirmPassword === password,\r\n                message: \"Password doesn't match\"\r\n            })\r\n        })\r\n})\r\n\r\nexport const validationFormEdit = yup.object({\r\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\r\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\r\n    thumbnail: yup.mixed('Insert your image, 2 MB max')\r\n        .test(\r\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\r\n            (img) =>\r\n                (img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)) || (!img)\r\n        )\r\n        .test(\r\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\r\n            (img) => {\r\n                if(img) {\r\n                    return img.size <= 2097152;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n        ),\r\n        //buat nambahin misal upload background. apakah akan masuk kesini?\r\n        \r\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\r\n    address: yup.string('Enter your address').required('Address is required'),\r\n    password: yup.string('Enter your password').min(8, 'Password should be 8 characters or more'),\r\n    confirmPassword: yup.string('Confirm your password')\r\n        .when('password', (password, schema) => {\r\n            return schema.test({\r\n                test: confirmPassword => (password && confirmPassword === password) || !password,\r\n                message: \"Password doesn't match\"\r\n            })\r\n        })\r\n})\r\n\r\nexport const validationProgram = yup.object({\r\n    programName: yup.string('Enter your program title').required('Program title is required'),\r\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\r\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\r\n        .test(\r\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\r\n            (img) =>\r\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\r\n        )\r\n        .test(\r\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\r\n            (img) => {\r\n                if(img) {\r\n                    return img.size <= 2097152;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n        ),\r\n    startDate: yup.date('Insert start date').required('Date is required'),\r\n    endDate: yup.date('Insert end date').required('Date is required'),\r\n    category: yup.string(),\r\n    targetAudiance: yup.array().min(1, 'Pilih minimal 1'),\r\n    contentPrograms: yup.array().min(1).of(\r\n        yup.object({\r\n            namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\r\n            contentName: yup.string().required('Judul Tahapan harus diisi'),\r\n            contents: yup.string().required('Isi Tahapan harus diisi'),\r\n            startDate: yup.date('Insert start date').required('Date is required'),\r\n            endDate: yup.date('Insert end date').required('Date is required'),\r\n            answerKey: yup.string().when('category', {\r\n                is: 'Ujian',\r\n                then: yup.string().required('Kunci Jawaban harus diisi'),\r\n                otherwise: yup.string()\r\n            })\r\n        })\r\n    )\r\n})\r\n\r\nexport const validationProgramEdit = yup.object({\r\n    programName: yup.string('Enter your program title').required('Program title is required'),\r\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\r\n    startDate: yup.date('Insert start date').required('Date is required')\r\n});\r\n\r\nexport const validationStepEdit = yup.object({\r\n    namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\r\n    contentName: yup.string().required('Judul Tahapan harus diisi'),\r\n    contents: yup.string().required('Isi Tahapan harus diisi'),\r\n});\r\n\r\nexport const validationContent = yup.object({\r\n    contentName: yup.string('Enter your content title').required('Content title is required'),\r\n    contentDescription: yup.string('Enter the content description'),\r\n    contents: yup.string('Enter the content description').required('Content is required'),\r\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\r\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\r\n        .test(\r\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\r\n            (img) =>\r\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\r\n        )\r\n        .test(\r\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\r\n            (img) => {\r\n                if(img) {\r\n                    return img.size <= 2097152;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n        ),\r\n    startDate: yup.date('Insert start date').required('Date is required'),\r\n    endDate: yup.date('Insert end date').required('Date is required'),\r\n    isActive: yup.boolean(),\r\n    topics: yup.array().min(1),\r\n    targetAudience: yup.array().min(1)\r\n})\r\n\r\nexport const validationContentEdit = yup.object({\r\n    contentName: yup.string('Enter your content title').required('Content title is required'),\r\n    contentDescription: yup.string('Enter the content description'),\r\n    contents: yup.string('Enter the content description').required('Content is required'),\r\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\r\n    startDate: yup.date('Insert start date').required('Date is required')\r\n});\r\n\r\nexport const validationUserEdit = yup.object({\r\n    nameUser: yup.string('Enter your content title').required('User name is required'),\r\n    emailUser: yup.string('Enter the content description').required('Email is required').email('Email not valid'),\r\n    birdDate: yup.date('Insert start date').required('Date is required')\r\n})\r\n\r\nexport const validationNotification = yup.object({\r\n    destination: yup.array().min(1),\r\n    messageSubject: yup.string('Enter the message subject').required('Message Subject is required'),\r\n    messageContent: yup.string('Enter the message content').required('Message Content is required'),\r\n    scheduleTime: yup.date('Insert start date').required('Date is required'),\r\n    mediaType: yup.string('Enter the media type').required('Media type is required'),\r\n    category: yup.string('Enter the category').required('Category is required')\r\n})\r\n\r\nexport const validationAudience = yup.object({\r\n    audianceName: yup.string('Enter your audience name').required('Audience Name is required')\r\n})\r\n\r\nexport const validationNotifCategory = yup.object({\r\n    category: yup.string('Enter category name').required('Category is required'),\r\n    description: yup.string('Enter description').required('Description is required')\r\n})\r\n\r\nexport const validationProgCategory = yup.object({\r\n    category: yup.string('Enter category name').required('Category is required'),\r\n    description: yup.string('Enter description').required('Description is required')\r\n})\r\n\r\nexport const validationStaff = yup.object({\r\n    emailUser: yup.string('Enter your email').required('Email is required').email('Email not valid'),\r\n    userName: yup.string('Enter your name').required('Name is required').matches(UserRegex, 'Invalid username format'),\r\n    phone: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\r\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more')\r\n})\r\n\r\nexport const validationContentTopic = yup.object({\r\n    topicName: yup.string('Enter topic name').required('Topic Name is required')\r\n})\r\n\r\nexport const validationScreenTime = yup.object({\r\n    controlParameterName: yup.string('Enter category name').required('Category is required'),\r\n    controlParameterValue: yup.number().required('Number is required')\r\n})","import React, { useState, useEffect } from 'react';\r\nimport Heading from '../../../components/UI/Heading/Heading';\r\nimport InputComponent from '../../../components/UI/Input/Input';\r\nimport RKLoader from '../../../components/UI/RKLoader/RKLoader';\r\nimport { connect } from 'react-redux';\r\nimport { Formik } from 'formik';\r\nimport { validationFormEdit } from './../../../helpers/validation/validation';\r\nimport { toBase64 } from '../../../helpers/fileHelper/fileHelper';\r\nimport { editProfile } from '../../../store/actions/dashboard';\r\nimport { Card, CardImg, Button, Modal } from 'react-bootstrap';\r\nimport './Setting.scss';\r\nimport { Redirect } from 'react-router-dom';\r\n// import { toBase64} from './helper'\r\n\r\nfunction Setting({\r\n    onEditProfile,\r\n    isLoading\r\n}) {\r\n    const userData = JSON.parse(localStorage.getItem('userData'));\r\n    const [photoRaw, setPhotoRaw] = useState();\r\n    // const [coverRaw, setCoverRaw] = useState();\r\n    const [cover, setCover] = useState();\r\n    const [add, setAdd] = useState(false);\r\n    const [topic, setTopic] = useState(false);\r\n    const [kateprog, setKate] = useState(false);\r\n    const [notif, setNotif] = useState(false);\r\n    const [time, setTime] = useState(false);\r\n    const [photoPreview, setPhotoPreview] = useState(userData.thumbnail);\r\n\r\n    useEffect(() => {\r\n        if(photoRaw) {\r\n            let convertedPhoto = toBase64(photoRaw);\r\n            convertedPhoto.then((result) => {\r\n                setPhotoPreview(result);\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n            })\r\n        // } else if(coverRaw) {\r\n        //     let convertedPhoto = toBase64(coverRaw);\r\n        //     convertedPhoto.then((result) => {\r\n        //         setPhotoPreview(result);\r\n        //     })\r\n        //     .catch(error => {\r\n        //         // console.log(error);\r\n        //     })\r\n        }\r\n    }, [photoRaw])\r\n\r\n    if(isLoading) {\r\n        return <RKLoader/>;\r\n    }\r\n    else if (add == true) {\r\n        return <Redirect to=\"/tools/setting-add\" />\r\n    }\r\n    else if (topic == true) {\r\n        return <Redirect to=\"/tools/setting-topik\" />\r\n    }\r\n    else if (kateprog == true) {\r\n        return <Redirect to=\"/tools/setting-list-kateProgram\" />\r\n    }\r\n    else if (notif == true) {\r\n        return <Redirect to=\"/tools/setting-list-kateNotif\" />\r\n    }\r\n    else if (time == true) {\r\n        return <Redirect to=\"/tools/setting-list-screentime\" />\r\n    }\r\n    return (\r\n        <div className=\"Setting\">\r\n            <Heading \r\n                headingName=\"Setting\"\r\n                routes={[\r\n                    { name: 'Setting' }\r\n                ]}\r\n            />\r\n            {/* <div className='div'>\r\n                <h3>Setting Cobrand</h3>\r\n                <Button className='add' onClick={() => setAdd(true)}>Target Audience</Button>\r\n                <Button className='add' onClick={() => setTopic(true)}>Topic Content</Button>\r\n                <Button className='add' onClick={() => setKate(true)}>Kategory Program</Button>\r\n                <Button className='add' onClick={() => setNotif(true)}>Kategory Notification</Button>\r\n                <Button className='add' onClick={() => setTime(true)}>Standart ScreenTime</Button>\r\n            </div> */}\r\n            \r\n            \r\n            <div className=\"Setting_card mt-medium\">\r\n                <div className=\"Setting_card_inputs\">\r\n                    <h2>Edit Account</h2>\r\n                    <Formik\r\n                        initialValues= {{\r\n                            email: userData.cobrandEmail,\r\n                            password: '',\r\n                            confirmPassword: '',\r\n                            cobrandName: userData.cobrandName,\r\n                            phoneNumber: userData.phoneNumber,\r\n                            address: userData.address,\r\n                            thumbnail: ''\r\n                        }}\r\n                        validationSchema = {validationFormEdit}\r\n                        validateOnChange = {true}\r\n                        onSubmit = {values => {\r\n                            onEditProfile(userData.cobrandEmail, userData.password, values.cobrandName, values.thumbnail, values.phoneNumber, values.address, values.password)\r\n                        }}\r\n                    >\r\n                    {({handleChange, handleBlur, handleSubmit, setFieldValue, touched, values, errors}) => (\r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"Setting_card_inputs-item\">\r\n                                <div>\r\n                                    <label>Email</label>\r\n                                    <InputComponent\r\n                                        name=\"email\"\r\n                                        className=\"Input-control\"\r\n                                        type=\"text\"\r\n                                        onChange={handleChange}\r\n                                        value={values.email}\r\n                                        onBlur={handleBlur}\r\n                                        isError={touched.email && Boolean(errors.email) }\r\n                                        message={touched.email && errors.email}\r\n                                        disabled={true}\r\n                                    />\r\n                                </div>\r\n                                <div>\r\n                                    <label>New Password</label>\r\n                                    <InputComponent\r\n                                        name=\"password\"\r\n                                        className=\"Input-control\"\r\n                                        type=\"password\"\r\n                                        onChange={handleChange}\r\n                                        value={values.password}\r\n                                        onBlur={handleBlur}\r\n                                        isError={touched.password && Boolean(errors.password) }\r\n                                        message={touched.password && errors.password}\r\n                                    />\r\n                                </div>\r\n                                <div>\r\n                                    <label>Confirm New Password</label>\r\n                                    <InputComponent\r\n                                        name=\"confirmPassword\"\r\n                                        className=\"Input-control\"\r\n                                        type=\"password\"\r\n                                        onChange={handleChange}\r\n                                        value={values.confirmPassword}\r\n                                        onBlur={handleBlur}\r\n                                        disabled={!touched.password}\r\n                                        isError={touched.confirmPassword && Boolean(errors.confirmPassword) }\r\n                                        message={touched.confirmPassword && errors.confirmPassword}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"Setting_card_inputs-upload mt-large\">\r\n                                \r\n                                <div className=\"Setting_card_inputs-avatar\">\r\n                                    <h2>New Photo</h2>\r\n                                    <InputComponent \r\n                                        placeholder=\"Photo\"\r\n                                        type=\"file\"\r\n                                        name=\"thumbnail\"\r\n                                        onChange={(e) => {\r\n                                            let file = e.currentTarget.files[0];\r\n                                            if(file) {\r\n                                                // console.log(\"File to upload: \", file);\r\n                                                setFieldValue(\"thumbnail\", file);\r\n                                                setPhotoRaw(file);\r\n                                            }\r\n                                        }}\r\n                                        className=\"Input-control\"\r\n                                        onBlur={handleBlur}\r\n                                        isError={touched.thumbnail && Boolean(errors.thumbnail) }\r\n                                        message={touched.thumbnail && errors.thumbnail}\r\n                                    />\r\n                                </div>\r\n                                {/* <div className=\"Setting_card_inputs-avatar\">\r\n                                        <h2>Cover</h2>\r\n                                        <input type=\"file\"\r\n                                            onChange={(e) => {\r\n                                                // console.log(e.currentTarget.files[0]);\r\n                                                const promise = toBase64(e.currentTarget.files[0]);\r\n                                                promise.then(result => {\r\n                                                    // console.log(result)\r\n                                                    setCover(result);\r\n                                                })\r\n                                            }}\r\n                                            className=\"Input-control\"\r\n                                            onBlur={handleBlur}\r\n                                            isError={touched.thumbnail && Boolean(errors.thumbnail) }\r\n                                            message={touched.thumbnail && errors.thumbnail}\r\n                                        />\r\n                                </div> */}\r\n                                {/* <div className=\"Setting_card_inputs-avatar\">\r\n                                    <h2>New Cover</h2>\r\n                                    <InputComponent \r\n                                        placeholder=\"Cover\"\r\n                                        type=\"file\"\r\n                                        name=\"thumbnail\"\r\n                                        onChange={(e) => {\r\n                                            let file = e.currentTarget.files[0];\r\n                                            if(file) {\r\n                                                // console.log(\"File to upload: \", file);\r\n                                                setFieldValue(\"thumbnail\", file);\r\n                                                setPhotoRaw(file);\r\n                                            }\r\n                                        }}\r\n                                        className=\"Input-control\"\r\n                                        onBlur={handleBlur}\r\n                                        isError={touched.thumbnail && Boolean(errors.thumbnail) }\r\n                                        message={touched.thumbnail && errors.thumbnail}\r\n                                    />\r\n                                </div> */}\r\n                            </div>\r\n\r\n                            <div className=\"Setting_card_inputs-item mt-large\">\r\n                                <div>\r\n                                    <label>Co-Brand Name</label>\r\n                                    <InputComponent\r\n                                        name=\"cobrandName\"\r\n                                        className=\"Input-control\"\r\n                                        type=\"text\"\r\n                                        onChange={handleChange}\r\n                                        value={values.cobrandName}\r\n                                        onBlur={handleBlur}\r\n                                        isError={touched.cobrandName && Boolean(errors.cobrandName) }\r\n                                        message={touched.cobrandName && errors.cobrandName}\r\n                                    />\r\n                                </div>\r\n                                <div>\r\n                                    <label>Phone Number</label>\r\n                                    <InputComponent\r\n                                        name=\"phoneNumber\"\r\n                                        className=\"Input-control\"\r\n                                        type=\"text\"\r\n                                        onChange={handleChange}\r\n                                        value={values.phoneNumber}\r\n                                        onBlur={handleBlur}\r\n                                        isError={touched.phoneNumber && Boolean(errors.phoneNumber) }\r\n                                        message={touched.phoneNumber && errors.phoneNumber}\r\n                                    />\r\n                                </div>\r\n                                <div>\r\n                                    <label>Address</label>\r\n                                    <InputComponent\r\n                                        name=\"address\"\r\n                                        className=\"Input-control\"\r\n                                        type=\"textarea\"\r\n                                        onChange={handleChange}\r\n                                        value={values.address}\r\n                                        onBlur={handleBlur}\r\n                                        isError={touched.address && Boolean(errors.address) }\r\n                                        message={touched.address && errors.address}\r\n                                    />\r\n                                </div>\r\n                                <button\r\n                                    className=\"btn btn-submit\"\r\n                                    type=\"submit\"\r\n                                >\r\n                                    Update Profile\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    )}\r\n\r\n                    </Formik>\r\n\r\n                </div>\r\n                <div className=\"Setting_card_preview\">\r\n                    <h5>Preview</h5>\r\n                    <Card style={{ width: '25rem', borderRadius: '1rem'}}>\r\n                        {/* <div style={{ backgroundImage: `url(${cover ? cover : \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRxJUwAEmCj5NP7JfKft5Qz8a3UUoE0RcKiAeNDAulvE-jDh5HzB3-FBb5pBSfmWpJw0J4&usqp=CAU\"})` }} class=\"circletag\" id=\"nay\"> */}\r\n                            {/* <img className=\"img2\" src=\"https://cdn1.vectorstock.com/i/1000x1000/06/70/beautiful-cute-bee-vector-15910670.jpg\" /> */}\r\n                        <div className=\"backgr\" >\r\n                        {/* backgroundImage: `url(${cover ? cover : \"https://defghi.co.id/wp-content/uploads/2021/07/Logo-IDE.png\" */}\r\n                            <img className=\"img2\" src={photoPreview ? photoPreview : \"https://thumbs.dreamstime.com/b/default-avatar-profile-icon-vector-social-media-user-portrait-176256935.jpg\"} />\r\n                        </div>\r\n                        <Card.Body className=\"body-card\">\r\n                            <Card.Title style={{ textAlign: 'center' }}>Bimbel Defghi</Card.Title>\r\n                            <Card.Text>\r\n                                Some quick example text to build on the card title and make up the bulk of\r\n                                the card's content.\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    {/* <img src={photoPreview} className=\"Setting_card_preview_image\"/> */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoading: state.auth.isLoading\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onEditProfile: ( oldEmail, oldPassword, cobrandName, photo, phoneNumber, address, password ) => \r\n            dispatch(editProfile( oldEmail, oldPassword, cobrandName, photo, phoneNumber, address, password ))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Setting)\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './Heading.scss';\r\n\r\nfunction Heading({ headingName, routes = [] }) {\r\n    \r\n    return (\r\n        <div className=\"Heading\">\r\n            <h1>{headingName}</h1>\r\n            <ul className=\"Heading__breadcumb\">\r\n                {routes.length > 0 && routes.map((item, i) => {\r\n                    if(item.path){\r\n                        return <li className=\"Heading__breadcumb-item\" key={i}><NavLink exact to={item.path}>{item.name}</NavLink> </li>\r\n                    }else{\r\n                        return <li className=\"Heading__breadcumb-item\" key={i}> <span>{item.name}</span> </li>\r\n                    }\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Heading\r\n"],"sourceRoot":""}