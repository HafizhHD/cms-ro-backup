{"version":3,"sources":["containers/CoBrand/Program/EditProgram/EditStep/EditStep.js"],"names":["connect","state","console","log","auth","isLoading","dispatch","onEditStep","_id","cobrandEmail","namaTahapan","contentName","contents","response","answerKey","history","editStep","editorState","EditorState","createEmpty","useState","setDescription","artikel","setArtikel","onEditorStateChangeArtikel","embedVideoCallBack","link","asd","getEmbedUrl","uploadCallback","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onloadend","result","data","onerror","error","isPageLoading","setPageLoading","setProgramList","content","setContent","setContentStartDate","setConFromImgVid","RichTextEditor","createEmptyValue","textValue","setTextValue","useHistory","JSON","parse","localStorage","getItem","email","params1","whereKeyValues","useEffect","params","axios","method","url","headers","then","con","DOMParser","parseFromString","contentType","con1","getElementById","outerHTML","innerHTML","con2","htmlToDraft","createValueFromString","createWithContent","ContentState","createFromBlockArray","contentBlocks","entityMap","getElementsByTagName","toString","src","includes","replace","des","contentDescription","des2","date","startDate","split","programs","catch","headingName","routes","path","name","initialValues","Object","keys","respons","validationSchema","validationStepEdit","validateOnChange","onSubmit","values","handleChange","handleSubmit","handleBlur","setFieldValue","errors","touched","className","type","placeholder","value","onChange","onBlur","toolbarClassName","wrapperClassName","editorClassName","onEditorStateChange","toolbar","image","uploadEnabled","alignmentEnabled","previewImage","inputAccept","embedded","embedCallback","draftToHtml","convertToRaw","getCurrentContent","e","currentTarget","files","map","res","index","category"],"mappings":"mWA+beA,uBAdS,SAAAC,GAEpB,OADAC,QAAQC,IAAIF,EAAMG,KAAKC,WAChB,CACHA,UAAWJ,EAAMG,KAAKC,cAIH,SAACC,GACxB,MAAO,CACHC,WAAY,SAACC,EAAKC,EAAcC,EAAaC,EAAaC,EAAUC,EAAUC,EAAWC,GAA7E,OACRT,EAASU,YAASR,EAAKC,EAAcC,EAAaC,EAAaC,EAAUC,EAAUC,EAAWC,QAI3Ff,EAxaf,YAGI,IAAD,IAFCO,EAED,EAFCA,WACAF,EACD,EADCA,UAIIY,EAAcC,cAAYC,cAG9B,EAAsCC,mBAASH,GAA/C,mBAAoBI,GAApB,WAKA,EAA8BD,mBAASH,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACMC,EAA6B,SAACP,GAChCM,EAAWN,IAGTQ,EAAqB,SAACC,GAExB,IAAMC,EAAMC,YAAYF,GAExB,OADAxB,QAAQC,IAAI,eAAgBwB,GACrBA,GAGLE,EAAiB,SAACC,GAAD,OAAU,IAAIC,SACjC,SAACC,EAASC,GACV,IAAMC,EAAQ,IAAIC,WAClBD,EAAOE,cAAcN,GACrBI,EAAOG,UAAY,WACfnC,QAAQC,IAAI+B,EAAOI,QACnBN,EAAQ,CAACO,KAAM,CAACb,KAAMQ,EAAOI,WAEjCJ,EAAOM,QAAU,SAAAC,GAAK,OAAIR,EAAOQ,QAIrC,EAAwCrB,oBAAS,GAAjD,mBAAOsB,EAAP,KAAsBC,EAAtB,KACA,EAAsCvB,qBAAtC,mBAAoBwB,GAApB,WACA,EAA8BxB,qBAA9B,mBAAOyB,EAAP,KAAgBC,EAAhB,KACA,EAAgD1B,qBAAhD,mBAAyB2B,GAAzB,WACA,EAA0C3B,mBAAS,IAAnD,mBAAsB4B,GAAtB,WAEA,EAA0C5B,mBAAS6B,IAAeC,oBAAlE,mBACA,GADA,UACkC9B,mBAAS6B,IAAeC,qBAA1D,mBAAOC,EAAP,KAAkBC,GAAlB,KAuBMrC,GAAUsC,cACV5C,GAAe6C,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,MAC5DlD,GAAMgD,aAAaC,QAAQ,gBAE3BE,GAAU,CACZC,eAAgB,CACZnD,aAAcA,KAiGtB,OA7FAoD,qBAAU,WAGN,GAFAlB,GAAe,GACfzC,QAAQC,IAAIK,IACRA,GAAK,CACL,IAAMsD,EAAS,CACXF,eAAgB,CACZnD,aAAcA,GACdD,IAAKA,KAIbuD,IAAM,CACFC,OAAQ,OACRC,IAAK,gEACL1B,KAAMuB,EACNI,QAAS,CACL,eAAgB,sBAGnBC,MAAK,SAAAtD,GACFX,QAAQC,IAAI,kBAAmBU,EAAS0B,MACxCO,EAAWjC,EAAS0B,KAAK3B,SAAS,IAClC,IAAIwD,GAAM,IAAIC,WAAYC,gBAAgBzD,EAAS0B,KAAK3B,SAAS,GAAGA,SAAU,aAE9E,GADAV,QAAQC,IAAIiE,GACkC,YAA1CvD,EAAS0B,KAAK3B,SAAS,GAAG2D,YAA2B,CACrD,IAAIC,EAAOJ,EAAIK,eAAe,YAC9BvE,QAAQC,IAAI,wBAA0BqE,EAAKE,WAC3CxE,QAAQC,IAAI,wBAA0BqE,EAAKG,WAC3C,IAAIC,EAAOC,IAAYL,EAAKG,WAC5BvB,GAAaH,IAAe6B,sBAAsBN,EAAKE,UAAW,SAClE1B,EAAiBwB,EAAKE,WAEtBnD,EAAWL,cAAY6D,kBACnBC,eAAaC,qBACXL,EAAKM,cAAeN,EAAKO,kBAM9B,GAA8C,UAA1CtE,EAAS0B,KAAK3B,SAAS,GAAG2D,YAAyB,CACxD,IAAIC,EAAOJ,EAAIgB,qBAAqB,OAAO,GAAGC,WAC9CrC,EAAiBwB,EAAKc,UAErB,GAA8C,UAA1CzE,EAAS0B,KAAK3B,SAAS,GAAG2D,YAAyB,CACxD,IAAIC,EAAOJ,EAAIgB,qBAAqB,UAAU,GAC9CpC,EAAiBwB,EAAKc,UAErB,GAA8C,QAA1CzE,EAAS0B,KAAK3B,SAAS,GAAG2D,YAAuB,CACtD,IACIe,EADOlB,EAAIgB,qBAAqB,UAAU,GAC/BE,IACXA,EAAIC,SAAS,oBAAmBD,EAAMA,EAAIE,QAAQ,iBAAkB,KACpEF,EAAIC,SAAS,uCAAsCD,EAAMA,EAAIE,QAAQ,oCAAqC,KAC9GxC,EAAiBsC,GAIrB,IAAIG,EAAM5E,EAAS0B,KAAK3B,SAAS,GAAG8E,mBACpCxF,QAAQC,IAAI,MAAOsF,GACnB,IAAIE,EAAOd,IAAYY,GACvBpE,EAAeH,cAAY6D,kBACvBC,eAAaC,qBACTU,EAAKT,cAAeS,EAAKR,aAEjC,IAAIS,EAAO/E,EAAS0B,KAAK3B,SAAS,GAAGiF,UAAUC,MAAM,KAAK,GAC1D5F,QAAQC,IAAIyF,GACZ7C,EAAoB6C,GACpB7B,IAAM,CACFC,OAAQ,OACRC,IAAK,gEACL1B,KAAMoB,GACNO,QAAS,CACL,eAAgB,sBAGnBC,MAAK,SAAAtD,GACFX,QAAQC,IAAI,iBAAkBU,EAAS0B,MACvCK,EAAe/B,EAAS0B,KAAKwD,UAC7BpD,GAAe,MAElBqD,OAAM,SAAAvD,GACHvC,QAAQC,IAAIsC,GACZE,GAAe,SAG1BqD,OAAM,SAAAvD,GACHvC,QAAQC,IAAIsC,GACZE,GAAe,SAG5B,IAGCD,EACO,cAAC,IAAD,IAIP,qCACI,cAAC,IAAD,CAASuD,YAAY,QAAQC,OAAQ,CACjC,CAAEC,KAAM,gBAAiBC,KAAM,WAC/B,CAAED,KAAM,oBAAqBC,KAAM,yBACnC,CAAED,KAAM,yBAA0BC,KAAM,0BAE5C,cAAC,IAAD,CACIC,cAAe,CACX3F,YAAamC,EAAQnC,YACrBC,YAAakC,EAAQlC,YACrB4D,YAAa1B,EAAQ0B,YACrB3D,SAAUU,EACVT,SAAQ,UAAEyF,OAAOC,KAAK1D,EAAQ2D,gBAAtB,QAAkC,GAC1C1F,UAAS,UAAE+B,EAAQ/B,iBAAV,QAAuB,IAEpC2F,iBAAkBC,IAClBC,kBAAkB,EAClBC,SAAU,SAAAC,GACNtG,EAAWC,GAAKC,GAAcoG,EAAOnG,YAAamG,EAAOlG,YAAakG,EAAOjG,SAAUiG,EAAOhG,SAAUgG,EAAO/F,UAAWC,KAZlI,SAgBK,gBAAG+F,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,WAAYC,EAA3C,EAA2CA,cAAeJ,EAA1D,EAA0DA,OAAQK,EAAlE,EAAkEA,OAAQC,EAA1E,EAA0EA,QAA1E,OACG,sBAAMP,SAAUG,EAAhB,SACI,sBAAKK,UAAU,cAAf,UACI,8CAAiBvE,EAAQlC,eACzB,sBAAKyG,UAAU,aAAf,UACI,+CACA,cAAC,IAAD,CACIC,KAAK,OACLjB,KAAK,cACLgB,UAAU,iDACVE,YAAY,UACZC,MAAOV,EAAOnG,YACd8G,SAAUV,EACVW,OAAQT,IAGXG,EAAQzG,aAAe,sBAAM0G,UAAU,iBAAhB,SAAkCF,EAAOxG,iBAErE,sBAAK0G,UAAU,aAAf,UACI,gDACA,cAAC,IAAD,CACIC,KAAK,OACLjB,KAAK,cACLgB,UAAU,iDACVE,YAAY,UACZC,MAAOV,EAAOlG,YACd6G,SAAUV,EACVW,OAAQT,IAGXG,EAAQxG,aAAe,sBAAMyG,UAAU,iBAAhB,SAAkCF,EAAOvG,iBAErE,sBAAKyG,UAAU,aAAf,UACI,8CACwB,YAAvBP,EAAOtC,YASJ,cAAC,SAAD,CACItD,YAAaK,EACboG,iBAAiB,mBACjBC,iBAAiB,mBACjBC,gBAAgB,kBAChBC,oBAAqBrG,EAErBqF,OAAQA,EAAOjG,SAEfwF,KAAK,WACL0B,QAAS,CACLC,MAAO,CACHC,eAAe,EACfC,kBAAkB,EAClBC,cAAc,EACdrG,eAAgBA,EAChBsG,YAAa,sDAEjBC,SAAS,CACLC,cAAe5G,IAGvB+F,SAAU,SAACvG,GACPmC,GAAayD,EAAOjG,UAEpBqG,EAAc,WAAYqB,IAAYC,uBAAajH,EAAQkH,uBAC3DtI,QAAQC,IAAIgD,GACZjD,QAAQC,IAAI0G,EAAOjG,UACnBV,QAAQC,IAAImB,MAoBpB,KACoB,UAAvBuF,EAAOtC,YAGJ,cAAC,IAAD,CACI8C,KAAK,OACLD,UAAU,oBACVhB,KAAK,WACLqB,OAAQT,EAGRQ,SAAU,SAACiB,GACX,IAAI3G,EAAO2G,EAAEC,cAAcC,MAAM,GAC7B7G,IACA5B,QAAQC,IAAI,mBAAoB2B,GAChCmF,EAAc,WAAYnF,OAclC,KACoB,UAAvB+E,EAAOtC,YACJ,cAAC,IAAD,CACI8C,KAAK,OACLjB,KAAK,WACLgB,UAAU,iDACVE,YAAY,oDACZC,MAAOV,EAAOjG,SACd4G,SAAUV,EACVW,OAAQT,IAEZ,KACoB,QAAvBH,EAAOtC,YACJ,cAAC,IAAD,CACI8C,KAAK,OACLjB,KAAK,WACLgB,UAAU,iDACVE,YAAY,sCAEZC,MAAOV,EAAOjG,SACd4G,SAAUV,EACVW,OAAQT,IAIZ,KACHG,EAAQvG,UAAY,sBAAMwG,UAAU,iBAAhB,SAAkCF,EAAOtG,cAelE,gCACA,sBAAKwG,UAAU,aAAf,UACI,mDACCP,EAAOhG,SAAS+H,KAAI,SAACC,EAAKC,GAEvB,OADA5I,QAAQC,IAAI,oBAAqB0I,GAC1B,cAAC,IAAD,CACHxB,KAAK,OACLjB,KAAK,WACLgB,UAAU,iDACVE,YAAY,UACZC,MAAOsB,EACPrB,SAAU,SAACiB,GACPxB,EAAc,YAAD,OAAa6B,GAASL,EAAEC,cAAcnB,QAEvDE,OAAQT,UAIyB,UAA5CxD,aAAaC,QAAQ,mBAClB,sBAAK2D,UAAU,aAAf,UACI,kDACA,wBACIhB,KAAK,YACLmB,MAAOV,EAAO/F,UACd0G,SAAU,SAACiB,GACPxB,EAAc,YAAawB,EAAEC,cAAcnB,QAJnD,SAQQV,EAAOhG,SAAS+H,KAAI,SAACG,GACjB,OACI,wBAAQxB,MAAOwB,EAAf,SAA0BA,YAM9C,KACA,wBAAQ3B,UAAU,iBAAiBC,KAAK,SAAxC,qCAQnBhH,EAAY,cAAC,IAAD,IAAe,Y","file":"static/js/61.ae86da23.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Heading from '../../../../../components/UI/Heading/Heading';\nimport './EditStep.scss';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport { editStep } from '../../../../../store/actions/dashboard';\nimport RKLoader from '../../../../../components/UI/RKLoaderInner/RKLoader';\nimport { connect } from 'react-redux';\nimport { validationStepEdit } from '../../../../../helpers/validation/validation';\nimport InputComponent from '../../../../../components/UI/Input/Input';\nimport axios from 'axios';\nimport RichTextEditor from 'react-rte';\nimport { getEmbedUrl } from '../../../../../helpers/fileHelper/fileHelper'\n\n//texteditor\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState, convertToRaw, convertFromRaw, current,ContentState, convertFromHTML} from \"draft-js\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport draftToHtml from \"draftjs-to-html\";\nimport {stateToHTML} from 'draft-js-export-html'\nimport htmlToDraft from 'html-to-draftjs'\n\n\nfunction EditStep({\n    onEditStep,\n    isLoading\n}) {\n\n\n    let editorState = EditorState.createEmpty()\n    \n\n    const [description, setDescription] = useState(editorState)\n    const onEditorStateChange = (editorState) => {\n        setDescription(editorState)\n    }\n\n    const [artikel, setArtikel] = useState(editorState)\n    const onEditorStateChangeArtikel = (editorState) => {\n        setArtikel(editorState)\n    }\n\n    const embedVideoCallBack = (link) =>{\n        \n        const asd = getEmbedUrl(link);\n        console.log(\"Video embed \", asd);\n        return asd;\n    }\n\n    const uploadCallback = (file) => new Promise(\n        (resolve, reject) => {\n        const reader= new FileReader();\n        reader.readAsDataURL(file);\n        reader.onloadend = () => {\n            console.log(reader.result);\n            resolve({data: {link: reader.result}});\n        }\n        reader.onerror = error => reject(error);\n        }\n    );\n\n    const [isPageLoading, setPageLoading] = useState(true);\n    const [programList, setProgramList] = useState();\n    const [content, setContent] = useState();\n    const [contentStartDate, setContentStartDate] = useState();\n    const [conFromImgVid, setConFromImgVid] = useState('');\n\n    const [textDeskripsi, setTextDeskripsi] = useState(RichTextEditor.createEmptyValue());\n    const [textValue, setTextValue] = useState(RichTextEditor.createEmptyValue());\n    const toolbarConfig = {\n        // Optionally specify the groups to display (displayed in the order listed).\n        display: ['INLINE_STYLE_BUTTONS', 'BLOCK_TYPE_BUTTONS', 'BLOCK_TYPE_DROPDOWN', 'HISTORY_BUTTONS'],\n        INLINE_STYLE_BUTTONS: [\n            { label: 'Bold', style: 'BOLD' },\n            { label: 'Italic', style: 'ITALIC' },\n            { label: 'Underline', style: 'UNDERLINE' },\n            { label: 'Strikethrough', style: 'STRIKETHROUGH' }\n        ],\n        BLOCK_TYPE_DROPDOWN: [\n            { label: 'Normal', style: 'unstyled' },\n            { label: 'Heading Large', style: 'header-one' },\n            { label: 'Heading Medium', style: 'header-two' },\n            { label: 'Heading Small', style: 'header-three' }\n        ],\n        BLOCK_TYPE_BUTTONS: [\n            { label: 'Unordered List', style: 'unordered-list-item' },\n            { label: 'Ordered List', style: 'ordered-list-item' },\n            { label: 'Blockquote', style: 'blockquote' }\n        ]\n    };\n\n    const history = useHistory();\n    const cobrandEmail = JSON.parse(localStorage.getItem('userData')).email;\n    const _id = localStorage.getItem('stepSelected');\n\n    const params1 = {\n        whereKeyValues: {\n            cobrandEmail: cobrandEmail\n        }\n    };\n\n    useEffect(() => {\n        setPageLoading(true);\n        console.log(_id);\n        if (_id) {\n            const params = {\n                whereKeyValues: {\n                    cobrandEmail: cobrandEmail,\n                    _id: _id\n                }\n            };\n\n            axios({\n                method: 'post',\n                url: 'https://as01.prod.ruangortu.id:8080/api/cobrand/contentFilter',\n                data: params,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            })\n                .then(response => {\n                    console.log(\"Response data: \", response.data);\n                    setContent(response.data.contents[0]);\n                    let con = new DOMParser().parseFromString(response.data.contents[0].contents, 'text/html');\n                    console.log(con);\n                    if (response.data.contents[0].contentType === 'Artikel') {\n                        let con1 = con.getElementById('contents');\n                        console.log('Ini adalah con1 outer' + con1.outerHTML);\n                        console.log('Ini adalah con1 inner' + con1.innerHTML);\n                        let con2 = htmlToDraft(con1.innerHTML);\n                        setTextValue(RichTextEditor.createValueFromString(con1.outerHTML, 'html'));\n                        setConFromImgVid(con1.outerHTML);\n                        // setArtikel(textValue)\n                        setArtikel(EditorState.createWithContent(\n                            ContentState.createFromBlockArray(\n                              con2.contentBlocks, con2.entityMap)))\n\n                        //   deskripsi\n                        // let condes = new DOMParser().parseFromString(response.data.contents[0].contentDescription, 'text/html');\n                        // console.log(condes);\n                    }\n                    else if (response.data.contents[0].contentType === 'Image') {\n                        let con1 = con.getElementsByTagName('img')[0].toString();\n                        setConFromImgVid(con1.src);\n                    }\n                    else if (response.data.contents[0].contentType === 'Video') {\n                        let con1 = con.getElementsByTagName('iframe')[0];\n                        setConFromImgVid(con1.src);\n                    }\n                    else if (response.data.contents[0].contentType === 'Pdf') {\n                        let con1 = con.getElementsByTagName('iframe')[0];\n                        let src = con1.src;\n                        if (src.includes('&embedded=true')) src = src.replace('&embedded=true', '');\n                        if (src.includes('http://docs.google.com/gview?url=')) src = src.replace('http://docs.google.com/gview?url=', '');\n                        setConFromImgVid(src);\n                    }\n\n\n                    let des = response.data.contents[0].contentDescription;\n                    console.log(\"des\", des) //null\n                    let des2 = htmlToDraft(des);\n                    setDescription(EditorState.createWithContent(\n                        ContentState.createFromBlockArray(\n                            des2.contentBlocks, des2.entityMap)))\n\n                    let date = response.data.contents[0].startDate.split('T')[0];\n                    console.log(date);\n                    setContentStartDate(date);\n                    axios({\n                        method: 'post',\n                        url: 'https://as01.prod.ruangortu.id:8080/api/cobrand/programFilter',\n                        data: params1,\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                    })\n                        .then(response => {\n                            console.log(\"Program list: \", response.data);\n                            setProgramList(response.data.programs);\n                            setPageLoading(false);\n                        })\n                        .catch(error => {\n                            console.log(error);\n                            setPageLoading(false);\n                        });\n                })\n                .catch(error => {\n                    console.log(error);\n                    setPageLoading(false);\n                });\n        }\n    }, []);\n\n\n    if (isPageLoading) {\n        return <RKLoader />\n    }\n\n    return (\n        <>\n            <Heading headingName=\"Tahap\" routes={[\n                { path: '/cms/program/', name: 'Program' },\n                { path: '/cms/program/edit', name: 'Ubah Program Terpilih' },\n                { path: '/cms/program/edit/step', name: 'Ubah Tahap Terpilih' }\n            ]} />\n            <Formik\n                initialValues={{ \n                    namaTahapan: content.namaTahapan,\n                    contentName: content.contentName,\n                    contentType: content.contentType,\n                    contents: artikel,\n                    response: Object.keys(content.respons) ?? [],\n                    answerKey: content.answerKey ?? ''\n                }}\n                validationSchema={validationStepEdit}\n                validateOnChange={true}\n                onSubmit={values => {\n                    onEditStep(_id, cobrandEmail, values.namaTahapan, values.contentName, values.contents, values.response, values.answerKey, history)\n                }}\n            >\n\n                {({ handleChange, handleSubmit, handleBlur, setFieldValue, values, errors, touched }) => (\n                    <form onSubmit={handleSubmit}>\n                        <div className=\"EditContent\">\n                            <h1>Ubah Tahap: {content.contentName}</h1>\n                            <div className=\"form-group\">\n                                <label>Nama Tahap</label>\n                                <InputComponent\n                                    type=\"text\"\n                                    name=\"namaTahapan\"\n                                    className=\"form-group__input form-group__input--fullwidth\"\n                                    placeholder=\"Example\"\n                                    value={values.namaTahapan}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n\n                                />\n                                {touched.namaTahapan && <span className=\"message__error\">{errors.namaTahapan}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Judul Tahap</label>\n                                <InputComponent\n                                    type=\"text\"\n                                    name=\"contentName\"\n                                    className=\"form-group__input form-group__input--fullwidth\"\n                                    placeholder=\"Example\"\n                                    value={values.contentName}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n\n                                />\n                                {touched.contentName && <span className=\"message__error\">{errors.contentName}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Isi Tahap</label>\n                                {values.contentType === \"Artikel\" ? (\n                                    /*<InputComponent\n                                        type=\"textarea\"\n                                        name=\"contents\"\n                                        placeholder=\"Type Something...\"\n                                        value={values.contents}\n                                        onChange={handleChange}\n                                    />*/\n\n                                    <Editor\n                                        editorState={artikel}\n                                        toolbarClassName=\"toolbarClassName\"\n                                        wrapperClassName=\"wrapperClassName\"\n                                        editorClassName=\"editorClassName\"\n                                        onEditorStateChange={onEditorStateChangeArtikel}\n                                        // value={draftToHtml(convertToRaw(artikel.getCurrentContent()))}\n                                        values={values.contents}\n       \n                                        name=\"contents\"\n                                        toolbar={{\n                                            image: {\n                                                uploadEnabled: true,\n                                                alignmentEnabled: true,\n                                                previewImage: true,\n                                                uploadCallback: uploadCallback,\n                                                inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg',\n                                            },\n                                            embedded:{\n                                                embedCallback: embedVideoCallBack\n                                            }\n                                        }}\n                                        onChange={(editorState) => {\n                                            setTextValue(values.contents);\n                                            // setFieldValue(\"contentDescription\", description);\n                                            setFieldValue(\"contents\", draftToHtml(convertToRaw(artikel.getCurrentContent())));\n                                            console.log(textValue); ///value yang lama\n                                            console.log(values.contents) //get nilai yg terbaru\n                                            console.log(artikel) //get nilai yg terbaru\n                                            \n                                        }}\n                                        \n                                    />\n\n\n                                    // <RichTextEditor\n                                    //     name=\"contents\"\n                                    //     placeholder=\"Type your contents here...\"\n                                    //     className=\"form-group_rte\"\n                                    //     value={textValue}\n                                    //     toolbarConfig={toolbarConfig}\n                                    //     onBlur={handleBlur}\n                                    //     onChange={(e) => {\n                                    //         setTextValue(e);\n                                    //         setFieldValue(\"contents\", e.toString(\"html\"));\n                                    //         console.log(values.contents);\n                                    //     }}\n                                    // />\n                                ) : null}\n                                {values.contentType === \"Image\" ? (\n                                    // <img src={conFromImgVid}></img>\n\n                                    <InputComponent\n                                        type=\"file\"\n                                        className=\"form-group__input\"\n                                        name=\"contents\"\n                                        onBlur={handleBlur}\n                                        // value={values.contents}\n                                        // onChange={handleChange}\n                                        onChange={(e) => {\n                                        let file = e.currentTarget.files[0];\n                                        if (file) {\n                                            console.log(\"File to upload: \", file);\n                                            setFieldValue(\"contents\", file);\n                                        }\n                                    }}\n                                    />\n\n                                    // <InputComponent\n                                    //     type=\"text\"\n                                    //     name=\"contents\"\n                                    //     className=\"form-group__input form-group__input--fullwidth\" \n                                    //     placeholder=\"Type Image URL... (https://example.com/something/something.jpg)\"\n                                    //     value={values.contents}\n                                    //     onChange={handleChange}\n                                    //     onBlur={handleBlur}\n                                    // />\n                                ) : null}\n                                {values.contentType === \"Video\" ? (\n                                    <InputComponent\n                                        type=\"text\"\n                                        name=\"contents\"\n                                        className=\"form-group__input form-group__input--fullwidth\"\n                                        placeholder=\"Type Video URL... (Youtube/Vimeo/Dailymotion/etc)\"\n                                        value={values.contents}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                    />\n                                ) : null}\n                                {values.contentType === \"Pdf\" ? (\n                                    <InputComponent\n                                        type=\"text\"\n                                        name=\"contents\"\n                                        className=\"form-group__input form-group__input--fullwidth\"\n                                        placeholder=\"Type Pdf URL... (just for pdf file)\"\n                                        // placeholder={values.contents}\n                                        value={values.contents}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                    />\n                                    // untuk internal masih diupdate\n                                    //url ok\n                                ) : null}\n                                {touched.contents && <span className=\"message__error\">{errors.contents}</span>}\n                            </div>\n                            {/* <div className=\"form-group\">\n                                <label>Set Schedule</label>\n                                <InputComponent\n                                    type=\"date\"\n                                    className=\"form-group__input\"\n                                    name=\"startDate\"\n                                    value={values.startDate}\n                                    min={new Date().toISOString().split('T')[0]}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                                {touched.startDate && <span className=\"message__error\">{errors.startDate}</span>}\n                            </div> */}\n                            <div>\n                            <div className=\"form-group\">\n                                <label>Respon/Jawaban</label>\n                                {values.response.map((res, index) => {\n                                    console.log(\"Content response:\", res)\n                                    return <InputComponent\n                                        type=\"text\"\n                                        name=\"response\"\n                                        className=\"form-group__input form-group__input--halfwidth\"\n                                        placeholder=\"Example\"\n                                        value={res}\n                                        onChange={(e) => {\n                                            setFieldValue(`response.${index}`, e.currentTarget.value);\n                                        }}\n                                        onBlur={handleBlur}\n                                    />\n                                })}\n                            </div>\n                            {localStorage.getItem('programCategory') === 'Ujian' ? (\n                                <div className=\"form-group\">\n                                    <label>Kunci Jawaban</label>\n                                    <select\n                                        name=\"answerKey\"\n                                        value={values.answerKey}\n                                        onChange={(e) => {\n                                            setFieldValue('answerKey', e.currentTarget.value)\n                                        }}\n                                    >\n                                        {\n                                            values.response.map((category) => {\n                                                return (\n                                                    <option value={category}>{category}</option>\n                                                )\n                                            })\n                                        }\n                                    </select>\n                                </div>\n                            ) : null}\n                                <button className=\"btn btn-submit\" type=\"submit\">\n                                    Update Tahap\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                )}\n            </Formik>\n            {isLoading ? <RKLoader /> : null}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    console.log(state.auth.isLoading);\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onEditStep: (_id, cobrandEmail, namaTahapan, contentName, contents, response, answerKey, history) =>\n            dispatch(editStep(_id, cobrandEmail, namaTahapan, contentName, contents, response, answerKey, history))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditStep)\n"],"sourceRoot":""}