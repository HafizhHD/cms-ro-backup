{"version":3,"sources":["containers/CoBrand/Content/EditContent/EditContent.js"],"names":["connect","state","console","log","auth","isLoading","dispatch","onEditContent","_id","cobrandEmail","programId","contentName","contentDescription","contentType","contentSource","contentThumbnail","contents","startDate","history","editContent","useState","isPageLoading","setPageLoading","programList","setProgramList","content","setContent","contentStartDate","setContentStartDate","conFromImgVid","setConFromImgVid","RichTextEditor","createEmptyValue","textValue","setTextValue","toolbarConfig","display","INLINE_STYLE_BUTTONS","label","style","BLOCK_TYPE_DROPDOWN","BLOCK_TYPE_BUTTONS","useHistory","JSON","parse","localStorage","getItem","email","params1","whereKeyValues","useEffect","params","axios","method","url","data","headers","then","response","con","DOMParser","parseFromString","con1","getElementById","createValueFromString","outerHTML","getElementsByTagName","toString","src","includes","replace","date","split","programs","catch","error","headingName","routes","path","name","initialValues","validationSchema","validationContentEdit","validateOnChange","onSubmit","values","handleChange","handleSubmit","handleBlur","setFieldValue","errors","touched","className","value","onChange","e","currentTarget","disabled","map","program","programName","type","placeholder","onBlur","file","files","min","Date","toISOString"],"mappings":"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","file":"static/js/21.650741ed.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Heading from '../../../../components/UI/Heading/Heading';\nimport './EditContent.scss';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport { editContent } from '../../../../store/actions/dashboard';\nimport RKLoader from '../../../../components/UI/RKLoaderInner/RKLoader';\nimport { connect } from 'react-redux';\nimport { validationContentEdit } from '../../../../helpers/validation/validation';\nimport InputComponent from '../../../../components/UI/Input/Input';\nimport axios from 'axios';\nimport RichTextEditor from 'react-rte';\n\nfunction EditContent({\n    onEditContent,\n    isLoading\n}) {\n\n    const [isPageLoading, setPageLoading] = useState(true);\n    const [programList, setProgramList] = useState();\n    const [content, setContent] = useState();\n    const [contentStartDate, setContentStartDate] = useState();\n    const [conFromImgVid, setConFromImgVid] = useState('');\n\n    const [textValue, setTextValue] = useState(RichTextEditor.createEmptyValue());\n    const toolbarConfig = {\n        // Optionally specify the groups to display (displayed in the order listed).\n        display: ['INLINE_STYLE_BUTTONS', 'BLOCK_TYPE_BUTTONS', 'BLOCK_TYPE_DROPDOWN', 'HISTORY_BUTTONS'],\n        INLINE_STYLE_BUTTONS: [\n            { label: 'Bold', style: 'BOLD' },\n            { label: 'Italic', style: 'ITALIC' },\n            { label: 'Underline', style: 'UNDERLINE' },\n            { label: 'Strikethrough', style: 'STRIKETHROUGH' }\n        ],\n        BLOCK_TYPE_DROPDOWN: [\n            { label: 'Normal', style: 'unstyled' },\n            { label: 'Heading Large', style: 'header-one' },\n            { label: 'Heading Medium', style: 'header-two' },\n            { label: 'Heading Small', style: 'header-three' }\n        ],\n        BLOCK_TYPE_BUTTONS: [\n            { label: 'Unordered List', style: 'unordered-list-item' },\n            { label: 'Ordered List', style: 'ordered-list-item' },\n            { label: 'Blockquote', style: 'blockquote' }\n        ]\n    };\n\n    const history = useHistory();\n    const cobrandEmail = JSON.parse(localStorage.getItem('userData')).email;\n    const _id = localStorage.getItem('contentSelected');\n\n    const params1 = {\n        whereKeyValues: {\n            cobrandEmail: cobrandEmail\n        }\n    };\n\n    useEffect(() => {\n        setPageLoading(true);\n        console.log(_id);\n        if (_id) {\n            const params = {\n                whereKeyValues: {\n                    cobrandEmail: cobrandEmail,\n                    _id: _id\n                }\n            };\n\n            axios({\n                method: 'post',\n                url: 'https://rk.defghi.biz.id:8080/api/cobrand/contentFilter',\n                data: params,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            })\n                .then(response => {\n                    console.log(\"Response data: \", response.data);\n                    setContent(response.data.contents[0]);\n                    let con = new DOMParser().parseFromString(response.data.contents[0].contents, 'text/html');\n                    console.log(con);\n                    if (response.data.contents[0].contentType === 'Artikel') {\n                        let con1 = con.getElementById('contents');\n                        setTextValue(RichTextEditor.createValueFromString(con1.outerHTML, 'html'));\n                        setConFromImgVid(con1.outerHTML);\n                    }\n                    else if (response.data.contents[0].contentType === 'Image') {\n                        let con1 = con.getElementsByTagName('img')[0].toString();\n                        setConFromImgVid(con1.src);\n                    }\n                    else if (response.data.contents[0].contentType === 'Video') {\n                        let con1 = con.getElementsByTagName('iframe')[0];\n                        setConFromImgVid(con1.src);\n                    }\n                    else if (response.data.contents[0].contentType === 'Pdf') {\n                        let con1 = con.getElementsByTagName('iframe')[0];\n                        let src = con1.src;\n                        if (src.includes('&embedded=true')) src = src.replace('&embedded=true', '');\n                        if (src.includes('http://docs.google.com/gview?url=')) src = src.replace('http://docs.google.com/gview?url=', '');\n                        setConFromImgVid(src);\n                    }\n\n                    let date = response.data.contents[0].startDate.split('T')[0];\n                    console.log(date);\n                    setContentStartDate(date);\n                    axios({\n                        method: 'post',\n                        url: 'https://rk.defghi.biz.id:8080/api/cobrand/programFilter',\n                        data: params1,\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                    })\n                        .then(response => {\n                            console.log(\"Program list: \", response.data);\n                            setProgramList(response.data.programs);\n                            setPageLoading(false);\n                        })\n                        .catch(error => {\n                            console.log(error);\n                            setPageLoading(false);\n                        });\n                })\n                .catch(error => {\n                    console.log(error);\n                    setPageLoading(false);\n                });\n        }\n    }, []);\n\n\n    if (isPageLoading) {\n        return <RKLoader />\n    }\n\n    return (\n        <>\n            <Heading headingName=\"Content\" routes={[\n                { path: '/content', name: 'Content' },\n                { path: '/content/edit', name: 'Edit Selected content' }\n            ]} />\n            <Formik\n                initialValues={{\n                    programId: content.programId,\n                    contentName: content.contentName,\n                    contentDescription: content.contentDescription,\n                    contentType: content.contentType,\n                    contentSource: content.contentSource,\n                    contents: conFromImgVid,\n                    startDate: contentStartDate\n                }}\n                validationSchema={validationContentEdit}\n                validateOnChange={true}\n                onSubmit={values => {\n                    onEditContent(_id, cobrandEmail, values.programId, values.contentName, values.contentDescription, values.contentType, values.contentSource, '', values.contents, values.startDate, history)\n                }}\n            >\n\n                {({ handleChange, handleSubmit, handleBlur, setFieldValue, values, errors, touched }) => (\n                    <form onSubmit={handleSubmit}>\n                        <div className=\"EditContent\">\n                            <h1>Edit Selected Content: {content.contentName}</h1>\n                            <div className=\"form-group\">\n                                <label>Content Type</label>\n                                <select\n                                    name=\"contentType\"\n                                    value={values.contentType}\n                                    onChange={(e) => {\n                                        setFieldValue(\"contentType\", e.currentTarget.value);\n                                        setFieldValue(\"contents\", '');\n                                    }}\n                                >\n                                    <option value=\"\" disabled>Select Content Type</option>\n                                    <option value=\"Artikel\">Artikel</option>\n                                    <option value=\"Image\">Image</option>\n                                    <option value=\"Video\">Video</option>\n                                    <option value=\"Pdf\">File Pdf</option>\n                                </select>\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Program Name</label>\n                                <select\n                                    name=\"programId\"\n                                    value={values.programId}\n                                    onChange={handleChange}\n                                >\n                                    <option value=\"-1\" disabled>Select Program</option>\n                                    {/* <option value=\"\">(Tanpa Program)</option> */}\n                                    {\n                                        programList ? programList.map((program) => {\n                                            return (\n                                                <option value={program._id}>{program.programName}</option>\n\n                                            )\n                                        }) : null\n                                    }\n                                </select>\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Title</label>\n                                <InputComponent\n                                    type=\"text\"\n                                    name=\"contentName\"\n                                    className=\"form-group__input form-group__input--fullwidth\"\n                                    placeholder=\"Example\"\n                                    value={values.contentName}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n\n                                />\n                                {touched.contentName && <span className=\"message__error\">{errors.contentName}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Description</label>\n                                <RichTextEditor\n                                        name=\"contentDescription\"\n                                        placeholder=\"Type your contents here...\"\n                                        className=\"form-group_rte\"\n                                        value={textValue}\n                                        // value={values.contentDescription}\n                                        toolbarConfig={toolbarConfig}\n                                        onBlur={handleBlur}\n                                        // onChange={handleChange}\n                                        onChange={(e) => {\n                                            setTextValue(e);\n                                            setFieldValue(\"contentDescription\", e.toString(\"html\"));\n                                            console.log(values.contentDescription);\n                                        }}\n                                />\n                                {/* <RichTextEditor\n                                        name=\"contents\"\n                                        placeholder=\"Type your contents here...\"\n                                        className=\"form-group_rte\"\n                                        value={textValue}\n                                        toolbarConfig={toolbarConfig}\n                                        onBlur={handleBlur}\n                                        onChange={(e) => {\n                                            setTextValue(e);\n                                            setFieldValue(\"contents\", e.toString(\"html\"));\n                                            console.log(values.contents);\n                                        }}\n                                    /> */}\n                                {/* <InputComponent\n                                    type=\"textarea\"\n                                    name=\"contentDescription\"\n                                    placeholder=\"Type Something...\"\n                                    value={values.contentDescription}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                /> */}\n                                {touched.contentDescription && <span className=\"message__error\">{errors.contentDescription}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Source</label>\n                                <InputComponent\n                                    type=\"text\"\n                                    name=\"contentSource\"\n                                    className=\"form-group__input form-group__input--fullwidth\"\n                                    placeholder=\"Example\"\n                                    value={values.contentSource}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                                {touched.contentSource && <span className=\"message__error\">{errors.contentSource}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Photo</label>\n                                <img className='photo' src={content.contentThumbnail}></img>\n                                <br></br>\n                                <InputComponent\n                                    type=\"file\"\n                                    className=\"form-group__input\"\n                                    name=\"contentThumbnail\"\n                                    onBlur={handleBlur}\n                                    // value={}\n                                    onChange={(e) => {\n                                        let file = e.currentTarget.files[0];\n                                        if (file) {\n                                            console.log(\"File to upload: \", file);\n                                            setFieldValue(\"contentThumbnail\", file);\n                                        }\n                                    }}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Contents</label>\n                                {values.contentType === \"Artikel\" ? (\n                                    /*<InputComponent\n                                        type=\"textarea\"\n                                        name=\"contents\"\n                                        placeholder=\"Type Something...\"\n                                        value={values.contents}\n                                        onChange={handleChange}\n                                    />*/\n                                    <RichTextEditor\n                                        name=\"contents\"\n                                        placeholder=\"Type your contents here...\"\n                                        className=\"form-group_rte\"\n                                        value={textValue}\n                                        toolbarConfig={toolbarConfig}\n                                        onBlur={handleBlur}\n                                        onChange={(e) => {\n                                            setTextValue(e);\n                                            setFieldValue(\"contents\", e.toString(\"html\"));\n                                            console.log(values.contents);\n                                        }}\n                                    />\n                                ) : null}\n                                {values.contentType === \"Image\" ? (\n                                    // <img src={conFromImgVid}></img>\n\n                                    <InputComponent\n                                        type=\"file\"\n                                        className=\"form-group__input\"\n                                        name=\"contents\"\n                                        onBlur={handleBlur}\n                                        value={values.contents}\n                                        onChange={handleChange}\n                                    // onChange={(e) => {\n                                    //     let file = e.currentTarget.files[0];\n                                    //     if (file) {\n                                    //         console.log(\"File to upload: \", file);\n                                    //         setFieldValue(\"contents\", file);\n                                    //     }\n                                    // }}\n                                    />\n\n                                    // <InputComponent\n                                    //     type=\"text\"\n                                    //     name=\"contents\"\n                                    //     className=\"form-group__input form-group__input--fullwidth\" \n                                    //     placeholder=\"Type Image URL... (https://example.com/something/something.jpg)\"\n                                    //     value={values.contents}\n                                    //     onChange={handleChange}\n                                    //     onBlur={handleBlur}\n                                    // />\n                                ) : null}\n                                {values.contentType === \"Video\" ? (\n                                    <InputComponent\n                                        type=\"text\"\n                                        name=\"contents\"\n                                        className=\"form-group__input form-group__input--fullwidth\"\n                                        placeholder=\"Type Video URL... (Youtube/Vimeo/Dailymotion/etc)\"\n                                        value={values.contents}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                    />\n                                ) : null}\n                                {values.contentType === \"Pdf\" ? (\n                                    <InputComponent\n                                        type=\"text\"\n                                        name=\"contents\"\n                                        className=\"form-group__input form-group__input--fullwidth\"\n                                        placeholder=\"Type Pdf URL... (just for pdf file)\"\n                                        // placeholder={values.contents}\n                                        value={values.contents}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                    />\n                                    // untuk internal masih diupdate\n                                    //url ok\n                                ) : null}\n                                {touched.contents && <span className=\"message__error\">{errors.contents}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Set Schedule</label>\n                                <InputComponent\n                                    type=\"date\"\n                                    className=\"form-group__input\"\n                                    name=\"startDate\"\n                                    value={values.startDate}\n                                    min={new Date().toISOString().split('T')[0]}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                                {touched.startDate && <span className=\"message__error\">{errors.startDate}</span>}\n                            </div>\n                            <div>\n                                <button className=\"btn btn-submit\" type=\"submit\">\n                                    Update Content\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                )}\n            </Formik>\n            {isLoading ? <RKLoader /> : null}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    console.log(state.auth.isLoading);\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onEditContent: (_id, cobrandEmail, programId, contentName, contentDescription, contentType, contentSource, contentThumbnail, contents, startDate, history) =>\n            dispatch(editContent(_id, cobrandEmail, programId, contentName, contentDescription, contentType, contentSource, contentThumbnail, contents, startDate, history))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditContent)\n"],"sourceRoot":""}