{"version":3,"sources":["assets/img/device.png","containers/CoBrand/Login/Login.js","components/UI/Input/Input.js","helpers/validation/validation.js","components/UI/Help/LoginHelp/LoginHelp.js"],"names":["connect","state","isLoading","auth","dispatch","onLogin","email","password","useState","showHelp","setShowHelp","isPasswordVisible","showPassword","formik","useFormik","initialValues","validationSchema","validationFormLogin","onSubmit","values","className","onClick","src","Logo","alt","DeviceImage","to","localStorage","getItem","handleSubmit","placeholder","type","name","onChange","handleChange","value","isError","touched","Boolean","errors","message","e","currentTarget","checked","for","Input","onBlur","min","id","memo","yup","required","validationFormRegister","accountName","cobrandName","thumbnail","test","img","includes","size","phoneNumber","matches","address","confirmPassword","when","schema","validationProgram","programName","programDescription","programThumbnail","startDate","validationProgramEdit","validationContent","contentName","contentDescription","contents","contentSource","contentThumbnail","isActive","validationContentEdit","LoginHelp"],"mappings":"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","file":"static/js/13.01628ab3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/device.68ed995d.png\";","import React, {useState} from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Login.scss';\nimport Logo from './../../../assets/img/Logo_1.png'\nimport DeviceImage from './../../../assets/img/device.png';\nimport InputComponent from '../../../components/UI/Input/Input';\nimport RKLoader from '../../../components/UI/RKLoader/RKLoader';\nimport { useFormik } from 'formik';\nimport { validationFormLogin } from './../../../helpers/validation/validation';\nimport { connect } from 'react-redux';\nimport { auth } from './../../../store/actions/auth';\nimport { FiHelpCircle, FiXCircle } from 'react-icons/fi'\nimport LoginHelp from '../../../components/UI/Help/LoginHelp/LoginHelp';\n\nfunction Login({\n    onLogin,\n    isLoading\n}) {\n    const [showHelp, setShowHelp] = useState(false);\n    const [isPasswordVisible, showPassword] = useState(false);\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: ''\n        },\n        validationSchema: validationFormLogin,\n        onSubmit: values => {\n            onLogin( values.email, values.password )\n        }\n    })\n\n    return (\n        <>\n            {showHelp ? <LoginHelp /> : null}\n            {showHelp ? (\n                <button \n                    className=\"CloseHelp\"\n                    onClick={() => {\n                    setShowHelp(false);\n                }}><FiXCircle/> </button>\n            ) : null}\n            <div className=\"LoginBg\">\n            <div className=\"Login\">\n                <div className=\"Login-top\">\n                    <img src={Logo} className=\"Login-top-img\" alt=\"logo top\" />\n                </div>\n             \n                <div className=\"Login-middle\">\n                        <div className=\"Login-middle-left\">\n                            <img \n                                src={DeviceImage} \n                                alt=\"Device \" \n                                className=\"Login-middle-left-img\"\n                            />\n                            <NavLink\n                                to=\"/\" \n                                className=\"Login-middle-left-help\"\n                                onClick={() => {\n                                setShowHelp(true);\n                            }}><FiHelpCircle/>  Bantuan</NavLink>\n                        </div>\n                        <div className=\"Login-middle-right\">\n                            <div className=\"Login-middle-right-heading mb-small\">\n                                <h1>Mulai Kelola Pelanggan Anda Sekarang.</h1>\n                                {localStorage.getItem('loginMessage') ? <p>{localStorage.getItem('loginMessage')}</p> : null}\n                            </div>\n                            <form className=\"Login-middle-right-form\" onSubmit={formik.handleSubmit}>\n                                <InputComponent \n                                    placeholder=\"Your E-mail (example@mail.com)\"\n                                    type=\"text\"\n                                    name=\"email\"\n                                    onChange={formik.handleChange}\n                                    value={formik.values.email}\n                                    className=\"Input-control Input-control__with-focus mb-tiny\"\n                                    isError={formik.touched.email && Boolean(formik.errors.email) }\n                                    message={formik.touched.email && formik.errors.email}\n                                />\n                                <InputComponent \n                                    placeholder=\"Password\"\n                                    type={isPasswordVisible ? \"text\" : \"password\"}\n                                    name=\"password\"\n                                    onChange={formik.handleChange}\n                                    value={formik.values.password}\n                                    className=\"Input-control Input-control__with-focus mb-tiny\"\n                                    isError={formik.touched.password && Boolean(formik.errors.password)}\n                                    message={formik.touched.password && formik.errors.password}\n                                />\n                                <div className=\"Login-middle-right-form-checkbox\">\n                                    <InputComponent\n                                        type=\"checkbox\"\n                                        name=\"showPassword\"\n                                        onChange={(e) => {\n                                            if(e.currentTarget.checked) {\n                                                showPassword(true);\n                                            }\n                                            else {\n                                                showPassword(false);\n                                            }\n                                        }}\n                                    />\n                                    <label for=\"showPassword\">Show Password</label>\n                                </div>\n                                <button\n                                    className=\"btn btn-login\"\n                                    type=\"submit\"\n                                >\n                                    Login\n                                </button>\n                            </form>\n                            <p className=\"Login-middle-right-joinus\">Ingin bermitra dengan kami? <NavLink to=\"/register\">Daftar Sekarang</NavLink> </p>\n                        </div>\n                    </div> \n                \n                {isLoading && (\n                    <RKLoader />\n                )}\n                <div className=\"Login-bottom\"></div>\n            </div>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onLogin: (email, password) => dispatch( auth( email, password )  )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Login)\n","import React, { memo } from 'react';\nimport './Input.scss';\n\nfunction Input({\n    placeholder,\n    type,\n    onChange,\n    onBlur,\n    value,\n    className,\n    message,\n    name,\n    min,\n    isError\n}) {\n    if(type === \"textarea\") {\n        return (\n        <>\n            <textarea\n                name={name}\n                id={name}\n                className={className}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n        )\n    }\n    else if(type === 'date') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    placeholder={placeholder}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else return (\n        <>\n            <input\n                name={name}\n                className={className} \n                type={type}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default memo(Input) \n","import * as yup from 'yup';\n\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\n\nexport const validationFormLogin = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    password: yup.string('Enter your password').required('Password is required')\n})\n\nexport const validationFormRegister = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    accountName: yup.string('Enter your name').required('Name is required'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => password && confirmPassword === password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationProgram = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationProgramEdit = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationContent = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description').required('Content description is required'),\n    contents: yup.string('Enter the content description').required('Content description is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    isActive: yup.boolean()\n})\n\nexport const validationContentEdit = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description').required('Content description is required'),\n    contents: yup.string('Enter the content description').required('Content description is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n})","import React from 'react';\nimport './LoginHelp.scss';\n\nfunction LoginHelp() {\n    return (\n        <div className=\"HelpOverlay\">\n            <div className=\"HelpOverlay-content\">\n                <h1>Guide Co-Brand Keluarga HKBP</h1>\n                <h2>Registrasi</h2>\n                <p>Pada halaman utama (Login), klik pada tulisan <span className=\"HelpOverlay-content-keyword\">Daftar Sekarang</span> untuk masuk ke halaman registrasi. Pada halaman registrasi, Anda harus mengisi delapan kolom yang disediakan, yaitu:</p>\n                <p><br/></p>\n                <ol>\n                    <li>E-Mail</li>\n                    <li>Password</li>\n                    <li>Confirm Password (isi harus sama dengan password)</li>\n                    <li>Your Name (Nama Anda)</li>\n                    <li>Your Brand Name (Nama Brand Anda)</li>\n                    <li>Phone Number (Nomor Telepon yang terhubung dengan Brand Anda)</li>\n                    <li>Address (Alamat Brand Anda)</li>\n                    <li>Photo (Foto atau Gambar Logo dari Brand Anda)</li>\n                </ol>\n                <p><br/></p>\n                <p>Setelah mengisi delapan kolom di atas, klik <span className=\"HelpOverlay-content-keyword\">Sign Up</span> untuk mendaftarkan Brand Anda. Jika berhasil, Anda akan dialihkan ke halaman <span className=\"HelpOverlay-content-keyword\">Login</span> untuk masuk.</p>\n                <p><br/></p>\n                <p><br/></p>\n                <h2>Login</h2>\n                <p>Pada halaman login, masukkan e-mail dan password yang telah dibuat pada saat registrasi. Lalu, klik tombol <span className=\"HelpOverlay-content-keyword\">Login</span>. Jika berhasil, Anda akan dialihkan ke halaman Dashboard.</p>   \n            </div>\n        </div>\n    )\n}\n\nexport default LoginHelp"],"sourceRoot":""}