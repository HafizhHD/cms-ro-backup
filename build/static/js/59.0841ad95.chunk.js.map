{"version":3,"sources":["components/UI/Input/Input.js","helpers/validation/validation.js","containers/CoBrand/Message/AddNotification/AddNotification.js","components/UI/Heading/Heading.js"],"names":["Input","placeholder","type","onChange","onBlur","value","className","message","name","min","max","disabled","isError","id","memo","PhoneRegex","validationFormLogin","yup","userName","required","password","validationFormRegister","email","accountName","cobrandName","thumbnail","test","img","includes","size","phoneNumber","matches","address","confirmPassword","when","schema","validationFormEdit","validationProgram","programName","programDescription","programThumbnail","startDate","endDate","category","targetAudiance","contentPrograms","of","namaTahapan","contentName","contents","answerKey","is","then","otherwise","validationProgramEdit","validationStepEdit","validationContent","contentDescription","contentSource","contentThumbnail","isActive","topics","targetAudience","validationContentEdit","validationUserEdit","nameUser","emailUser","birdDate","validationNotification","destination","messageSubject","messageContent","scheduleTime","mediaType","validationAudience","audianceName","validationNotifCategory","description","validationProgCategory","validationStaff","phone","validationContentTopic","topicName","validationScreenTime","controlParameterName","controlParameterValue","connect","state","isLoading","auth","dispatch","onAddNotification","cobrandEmail","useSchedule","history","addNotification","useHistory","useState","Date","sche","setSche","JSON","parse","localStorage","getItem","emailList","setEmailList","notifContext","setNotifContext","isTargetChecked","setTargetChecked","isScheduleChecked","setScheduleChecked","targetList","setTargetList","categoryList","setCategoryList","isPageLoading","setPageLoading","useEffect","x","setTime","getTime","split","removeItem","params","promiseAudience","getAudienceList","promiseCategory","getNotificationCategoryList","Promise","all","response","data","Data","headingName","routes","path","initialValues","toISOString","slice","validationSchema","validateOnChange","onSubmit","values","handleChange","handleSubmit","handleBlur","setFieldValue","errors","touched","onClick","e","currentTarget","checked","map","event","push","y","indexOf","splice","emails","_emails","getLabel","index","removeEmail","data-tag","data-tag-handle","Heading","length","item","i","exact","to"],"mappings":"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","file":"static/js/59.0841ad95.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\nimport './Input.scss';\r\n\r\nfunction Input({\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    onBlur,\r\n    value,\r\n    className,\r\n    message,\r\n    name,\r\n    min,\r\n    max,\r\n    disabled,\r\n    isError\r\n}) {\r\n    if(type === \"textarea\") {\r\n        return (\r\n        <>\r\n            <textarea\r\n                name={name}\r\n                id={name}\r\n                className={className}\r\n                placeholder={placeholder}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                value={value}\r\n                disabled={disabled}\r\n            />\r\n            {isError && (\r\n                <div className=\"message\">\r\n                    <span className=\"message__error\">{message}</span>\r\n                </div>\r\n            )}\r\n        </>\r\n        )\r\n    }\r\n    else if(type === 'date' || type === 'datetime-local') {\r\n        return (\r\n            <>\r\n                <input\r\n                    name={name}\r\n                    className={className} \r\n                    type={type}\r\n                    placeholder={placeholder}\r\n                    onChange={onChange}\r\n                    onBlur={onBlur}\r\n                    value={value}\r\n                    min={min}\r\n                    max={\"9999-12-31\"}\r\n                    disabled={disabled}\r\n                />\r\n                {isError && (\r\n                    <div className=\"message\">\r\n                        <span className=\"message__error\">{message}</span>\r\n                    </div>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n    else if(type === 'number') {\r\n        return (\r\n            <>\r\n                <input\r\n                    name={name}\r\n                    className={className} \r\n                    type={type}\r\n                    onChange={onChange}\r\n                    onBlur={onBlur}\r\n                    value={value}\r\n                    min={min}\r\n                    max={max}\r\n                    disabled={disabled}\r\n                />\r\n                {isError && (\r\n                    <div className=\"message\">\r\n                        <span className=\"message__error\">{message}</span>\r\n                    </div>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n    else return (\r\n        <>\r\n            <input\r\n                name={name}\r\n                className={className} \r\n                type={type}\r\n                placeholder={placeholder}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                value={value}\r\n                disabled={disabled}\r\n            />\r\n            {isError && (\r\n                <div className=\"message\">\r\n                    <span className=\"message__error\">{message}</span>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Input) \r\n","import * as yup from 'yup';\r\n\r\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\r\nconst UserRegex = /^\\S*$/;\r\n\r\nexport const validationFormLogin = yup.object({\r\n    userName: yup.string('Enter your email').required('Email is required'),\r\n    password: yup.string('Enter your password').required('Password is required')\r\n})\r\n\r\nexport const validationFormRegister = yup.object({\r\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\r\n    accountName: yup.string('Enter your name').required('Name is required'),\r\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\r\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\r\n        .test(\r\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\r\n            (img) =>\r\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\r\n        )\r\n        .test(\r\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\r\n            (img) => {\r\n                if(img) {\r\n                    return img.size <= 2097152;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n        ),\r\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\r\n    address: yup.string('Enter your address').required('Address is required'),\r\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\r\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\r\n        .when('password', (password, schema) => {\r\n            return schema.test({\r\n                test: confirmPassword => password && confirmPassword === password,\r\n                message: \"Password doesn't match\"\r\n            })\r\n        })\r\n})\r\n\r\nexport const validationFormEdit = yup.object({\r\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\r\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\r\n    thumbnail: yup.mixed('Insert your image, 2 MB max')\r\n        .test(\r\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\r\n            (img) =>\r\n                (img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)) || (!img)\r\n        )\r\n        .test(\r\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\r\n            (img) => {\r\n                if(img) {\r\n                    return img.size <= 2097152;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n        ),\r\n        //buat nambahin misal upload background. apakah akan masuk kesini?\r\n        \r\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\r\n    address: yup.string('Enter your address').required('Address is required'),\r\n    password: yup.string('Enter your password').min(8, 'Password should be 8 characters or more'),\r\n    confirmPassword: yup.string('Confirm your password')\r\n        .when('password', (password, schema) => {\r\n            return schema.test({\r\n                test: confirmPassword => (password && confirmPassword === password) || !password,\r\n                message: \"Password doesn't match\"\r\n            })\r\n        })\r\n})\r\n\r\nexport const validationProgram = yup.object({\r\n    programName: yup.string('Enter your program title').required('Program title is required'),\r\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\r\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\r\n        .test(\r\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\r\n            (img) =>\r\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\r\n        )\r\n        .test(\r\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\r\n            (img) => {\r\n                if(img) {\r\n                    return img.size <= 2097152;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n        ),\r\n    startDate: yup.date('Insert start date').required('Date is required'),\r\n    endDate: yup.date('Insert end date').required('Date is required'),\r\n    category: yup.string(),\r\n    targetAudiance: yup.array().min(1, 'Pilih minimal 1'),\r\n    contentPrograms: yup.array().min(1).of(\r\n        yup.object({\r\n            namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\r\n            contentName: yup.string().required('Judul Tahapan harus diisi'),\r\n            contents: yup.string().required('Isi Tahapan harus diisi'),\r\n            startDate: yup.date('Insert start date').required('Date is required'),\r\n            endDate: yup.date('Insert end date').required('Date is required'),\r\n            answerKey: yup.string().when('category', {\r\n                is: 'Ujian',\r\n                then: yup.string().required('Kunci Jawaban harus diisi'),\r\n                otherwise: yup.string()\r\n            })\r\n        })\r\n    )\r\n})\r\n\r\nexport const validationProgramEdit = yup.object({\r\n    programName: yup.string('Enter your program title').required('Program title is required'),\r\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\r\n    startDate: yup.date('Insert start date').required('Date is required')\r\n});\r\n\r\nexport const validationStepEdit = yup.object({\r\n    namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\r\n    contentName: yup.string().required('Judul Tahapan harus diisi'),\r\n    contents: yup.string().required('Isi Tahapan harus diisi'),\r\n});\r\n\r\nexport const validationContent = yup.object({\r\n    contentName: yup.string('Enter your content title').required('Content title is required'),\r\n    contentDescription: yup.string('Enter the content description'),\r\n    contents: yup.string('Enter the content description').required('Content is required'),\r\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\r\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\r\n        .test(\r\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\r\n            (img) =>\r\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\r\n        )\r\n        .test(\r\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\r\n            (img) => {\r\n                if(img) {\r\n                    return img.size <= 2097152;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n        ),\r\n    startDate: yup.date('Insert start date').required('Date is required'),\r\n    endDate: yup.date('Insert end date').required('Date is required'),\r\n    isActive: yup.boolean(),\r\n    topics: yup.array().min(1),\r\n    targetAudience: yup.array().min(1)\r\n})\r\n\r\nexport const validationContentEdit = yup.object({\r\n    contentName: yup.string('Enter your content title').required('Content title is required'),\r\n    contentDescription: yup.string('Enter the content description'),\r\n    contents: yup.string('Enter the content description').required('Content is required'),\r\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\r\n    startDate: yup.date('Insert start date').required('Date is required')\r\n});\r\n\r\nexport const validationUserEdit = yup.object({\r\n    nameUser: yup.string('Enter your content title').required('User name is required'),\r\n    emailUser: yup.string('Enter the content description').required('Email is required').email('Email not valid'),\r\n    birdDate: yup.date('Insert start date').required('Date is required')\r\n})\r\n\r\nexport const validationNotification = yup.object({\r\n    destination: yup.array().min(1),\r\n    messageSubject: yup.string('Enter the message subject').required('Message Subject is required'),\r\n    messageContent: yup.string('Enter the message content').required('Message Content is required'),\r\n    scheduleTime: yup.date('Insert start date').required('Date is required'),\r\n    mediaType: yup.string('Enter the media type').required('Media type is required'),\r\n    category: yup.string('Enter the category').required('Category is required')\r\n})\r\n\r\nexport const validationAudience = yup.object({\r\n    audianceName: yup.string('Enter your audience name').required('Audience Name is required')\r\n})\r\n\r\nexport const validationNotifCategory = yup.object({\r\n    category: yup.string('Enter category name').required('Category is required'),\r\n    description: yup.string('Enter description').required('Description is required')\r\n})\r\n\r\nexport const validationProgCategory = yup.object({\r\n    category: yup.string('Enter category name').required('Category is required'),\r\n    description: yup.string('Enter description').required('Description is required')\r\n})\r\n\r\nexport const validationStaff = yup.object({\r\n    emailUser: yup.string('Enter your email').required('Email is required').email('Email not valid'),\r\n    userName: yup.string('Enter your name').required('Name is required').matches(UserRegex, 'Invalid username format'),\r\n    phone: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\r\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more')\r\n})\r\n\r\nexport const validationContentTopic = yup.object({\r\n    topicName: yup.string('Enter topic name').required('Topic Name is required')\r\n})\r\n\r\nexport const validationScreenTime = yup.object({\r\n    controlParameterName: yup.string('Enter category name').required('Category is required'),\r\n    controlParameterValue: yup.number().required('Number is required')\r\n})","import React, { useEffect, useState } from 'react';\r\nimport Heading from '../../../../components/UI/Heading/Heading';\r\nimport './AddNotification.scss';\r\nimport { Formik } from 'formik';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { addNotification } from '../../../../store/actions/dashboard';\r\nimport { getAudienceList, getNotificationCategoryList } from './../../../../components/API/filter'\r\nimport RKLoader from '../../../../components/UI/RKLoaderInner/RKLoader';\r\nimport { connect } from 'react-redux';\r\nimport { validationNotification } from '../../../../helpers/validation/validation';\r\nimport InputComponent from '../../../../components/UI/Input/Input';\r\n\r\nimport { ReactMultiEmail } from \"react-multi-email\";\r\nimport \"react-multi-email/style.css\";\r\n\r\nfunction AddNotification({\r\n    onAddNotification,\r\n    isLoading\r\n}) {\r\n\r\n    const history = useHistory();\r\n    const [sche, setSche] = useState(new Date());\r\n    const cobrandEmail = JSON.parse(localStorage.getItem('userData')).cobrandEmail;\r\n    const [emailList, setEmailList] = useState([]);\r\n    const [notifContext, setNotifContext] = useState('');\r\n    const [isTargetChecked, setTargetChecked] = useState(false);\r\n    const [isScheduleChecked, setScheduleChecked] = useState(false);\r\n\r\n    const [targetList, setTargetList] = useState([]);\r\n    const [categoryList, setCategoryList] = useState([]);\r\n\r\n    const [isPageLoading, setPageLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        let x = sche;\r\n        x.setTime(x.getTime() + 7 * 60 * 60 * 1000);\r\n        setSche(x);\r\n        // console.log(new Date().toISOString())\r\n        if(localStorage.getItem('emailTo')) {\r\n            setEmailList(localStorage.getItem('emailTo').split(','));\r\n            localStorage.removeItem('emailTo');\r\n        }\r\n        if(localStorage.getItem('notifContext')) {\r\n            setNotifContext(localStorage.getItem('notifContext'));\r\n            localStorage.removeItem('notifContext');\r\n        }\r\n        let params = {};\r\n        let promiseAudience = getAudienceList(params);\r\n        let promiseCategory = getNotificationCategoryList(params);\r\n        Promise.all([promiseAudience, promiseCategory])\r\n        .then(response => {\r\n            // console.log(response[0].data.Data);\r\n            // console.log(response[1].data.Data);\r\n            setTargetList(response[0].data.Data);\r\n            setCategoryList(response[1].data.Data);\r\n            setPageLoading(false);\r\n        })\r\n    }, []);\r\n\r\n    if(isPageLoading)\r\n        return <RKLoader />\r\n\r\n    return (\r\n        <>\r\n            <Heading headingName=\"Buat Notifikasi\" routes={[\r\n                { path: '/cms/notifications', name: 'Notifikasi' },\r\n                { path: '/cms/notifications/add', name: 'Buat Notifikasi Baru' }\r\n            ]} />\r\n            <Formik\r\n                initialValues= {{\r\n                    destination: emailList, \r\n                    messageSubject: notifContext,\r\n                    messageContent: '',\r\n                    useSchedule: false,\r\n                    scheduleTime: sche.toISOString().slice(0, -8),\r\n                    mediaType: 'Semua',\r\n                    category: 'Umum',\r\n\r\n                }}\r\n                validationSchema = {validationNotification}\r\n                validateOnChange = {true}\r\n                onSubmit = { values => {\r\n                    onAddNotification(cobrandEmail, values.destination, values.messageSubject, values.messageContent, values.useSchedule, values.scheduleTime, values.mediaType, values.category, history)\r\n                }}\r\n            >\r\n            {({handleChange, handleSubmit, handleBlur, setFieldValue, values, errors, touched}) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"AddNotification\">\r\n                        <div className=\"form-group\">\r\n                            <label className=\"form-group-label\">Tujuan</label>\r\n                            <label className=\"form-group-option\">\r\n                                <input type=\"checkbox\" onClick={(e) => {\r\n                                        setFieldValue(\"destination\", []);\r\n                                    if(e.currentTarget.checked) setTargetChecked(true);\r\n                                    else {\r\n                                        setFieldValue(\"destination\", emailList);\r\n                                        setTargetChecked(false);\r\n                                    }\r\n                                }}>\r\n                                        </input>\r\n                                <p>Pakai Target Pengguna</p>\r\n                            </label>\r\n                            {isTargetChecked ? (\r\n                                <div className=\"form-group-choice\"> \r\n                                    {targetList.map(e => {\r\n                                        return <label>\r\n                                            <input type=\"checkbox\" value={e.audianceName} onClick={(event) => {\r\n                                                if(event.currentTarget.checked) {\r\n                                                    let x = values.destination;\r\n                                                    x.push(e.audianceName);\r\n                                                    setFieldValue(\"destination\", x);\r\n                                                }\r\n                                                else {\r\n                                                    let x = values.destination;\r\n                                                    let y = x.indexOf(e.audianceName);\r\n                                                    if(y > -1) x.splice(y, 1);\r\n                                                    setFieldValue(\"destination\", x);\r\n                                                }\r\n                                            }}>\r\n                                            </input>\r\n                                        <p>{e.audianceName}</p></label>\r\n                                    })}\r\n                                </div>\r\n                            ) : (\r\n                                <ReactMultiEmail\r\n                                    placeholder=\"Masukkan email...\"\r\n                                    emails={values.destination}\r\n                                    onChange={(_emails) => {\r\n                                        setEmailList(_emails)\r\n                                        setFieldValue(\"destination\", _emails)\r\n                                    }}\r\n                                    getLabel={(\r\n                                        email,\r\n                                        index,\r\n                                        removeEmail\r\n                                    ) => {\r\n                                        return (\r\n                                            <div data-tag key={index}>\r\n                                                {email}\r\n                                                <span data-tag-handle onClick={() => removeEmail(index)}>\r\n                                                ×\r\n                                                </span>\r\n                                            </div>\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            )}\r\n                            {touched.destination && <span className=\"message__error\">{errors.destination}</span>}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label className=\"form-group-label\">Judul Pesan</label>\r\n                            <InputComponent \r\n                                type=\"text\"\r\n                                name=\"messageSubject\"\r\n                                className=\"form-group__input form-group__input--fullwidth\" \r\n                                placeholder=\"Example\"\r\n                                value={values.messageSubject}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                            {touched.programName && <span className=\"message__error\">{errors.programName}</span>}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label className=\"form-group-label\">Isi Pesan</label>\r\n                            <InputComponent\r\n                                type=\"textarea\"\r\n                                name=\"messageContent\"\r\n                                placeholder=\"Ketik pesan...\"\r\n                                value={values.messageContent}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                           {touched.messageContent && <span className=\"message__error\">{errors.messageContent}</span>}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label className=\"form-group-label\">Pengaturan Jadwal</label>\r\n                            <label className=\"form-group-option\">\r\n                                <input type=\"checkbox\" onClick={(e) => {\r\n                                    if(e.currentTarget.checked) {\r\n                                        setScheduleChecked(true);\r\n                                        setFieldValue(\"useSchedule\", true);\r\n                                    }\r\n                                    else {\r\n                                        setScheduleChecked(false);\r\n                                        setFieldValue(\"useSchedule\", true);\r\n                                    }\r\n                                }}>\r\n                                        </input>\r\n                                <p>Jadwalkan</p>\r\n                            </label>\r\n                            <InputComponent\r\n                                type=\"datetime-local\"\r\n                                className=\"form-group__input\"\r\n                                name=\"scheduleTime\"\r\n                                min={new Date().toISOString().slice(0, -8)}\r\n                                value={values.scheduleTime}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                disabled={!isScheduleChecked}\r\n                            />\r\n                            {touched.startDate && <span className=\"message__error\">{errors.startDate}</span>}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label className=\"form-group-label\">Kirim Via</label>\r\n                            <select\r\n                                name=\"mediaType\"\r\n                                value={values.mediaType}\r\n                                onChange={(e) => {\r\n                                    setFieldValue(\"mediaType\", e.currentTarget.value);\r\n                                }}\r\n                            >\r\n                                <option value=\"Semua\">Semua</option>\r\n                                <option value=\"Email\">Email</option>\r\n                                <option value=\"Device\">Device</option>\r\n                            </select>\r\n                           {touched.messageContent && <span className=\"message__error\">{errors.messageContent}</span>}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label className=\"form-group-label\">Kategori</label>\r\n                            \r\n                            <div className=\"form-group-choice\"> \r\n                                {categoryList.map(e => {\r\n                                    return <label>\r\n                                        <input type=\"radio\" name=\"category\" value={e.category} checked={values.category === e.category} onChange={(event) => {\r\n                                            if(event.currentTarget.checked) {\r\n                                                setFieldValue(\"category\", event.currentTarget.value);\r\n                                            }\r\n                                        }}>\r\n                                        </input>\r\n                                    <p>{e.category}</p></label>\r\n                                })}\r\n                            </div>\r\n                            \r\n                            {touched.category && <span className=\"message__error\">{errors.category}</span>}\r\n                        </div>\r\n                        <div>\r\n                            <button className=\"btn btn-submit\" type=\"submit\">\r\n                                Kirim Notifikasi\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            )}\r\n            </Formik>\r\n            {/* {console.log(isLoading)} */}\r\n            {isLoading ? <RKLoader/> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    // console.log(state.auth.isLoading);\r\n    return {\r\n        isLoading: state.auth.isLoading\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onAddNotification: ( cobrandEmail, destination, messageSubject, messageContent, useSchedule, scheduleTime, mediaType, category, history ) =>\r\n            dispatch(addNotification( cobrandEmail, destination, messageSubject, messageContent, useSchedule, scheduleTime, mediaType, category, history ))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (AddNotification)\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './Heading.scss';\r\n\r\nfunction Heading({ headingName, routes = [] }) {\r\n    \r\n    return (\r\n        <div className=\"Heading\">\r\n            <h1>{headingName}</h1>\r\n            <ul className=\"Heading__breadcumb\">\r\n                {routes.length > 0 && routes.map((item, i) => {\r\n                    if(item.path){\r\n                        return <li className=\"Heading__breadcumb-item\" key={i}><NavLink exact to={item.path}>{item.name}</NavLink> </li>\r\n                    }else{\r\n                        return <li className=\"Heading__breadcumb-item\" key={i}> <span>{item.name}</span> </li>\r\n                    }\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Heading\r\n"],"sourceRoot":""}