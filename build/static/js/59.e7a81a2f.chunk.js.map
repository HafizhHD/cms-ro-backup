{"version":3,"sources":["helpers/validation/validation.js","containers/CoBrand/Content/EditContent/EditContent.js","../node_modules/suneditor/src/lang sync /^/.//.*/.js$","components/UI/Heading/Heading.js","components/UI/Input/Input.js"],"names":["PhoneRegex","validationFormLogin","yup","userName","required","password","validationFormRegister","email","accountName","cobrandName","thumbnail","test","img","includes","type","size","phoneNumber","matches","address","min","confirmPassword","when","schema","message","validationFormEdit","validationProgram","programName","programDescription","programThumbnail","startDate","endDate","category","targetAudiance","contentPrograms","of","namaTahapan","contentName","contents","answerKey","is","then","otherwise","validationProgramEdit","validationStepEdit","validationContent","contentDescription","contentSource","contentThumbnail","isActive","topics","targetAudience","validationContentEdit","validationUserEdit","nameUser","emailUser","birdDate","validationNotification","destination","messageSubject","messageContent","scheduleTime","mediaType","validationAudience","audianceName","validationNotifCategory","description","validationProgCategory","validationStaff","phone","validationCommunity","cobrandComunityName","partComunityName","validationGroupMitraAsuh","groupMitraAsuhName","validationContentTopic","topicName","validationScreenTime","controlParameterName","controlParameterValue","connect","state","isLoading","auth","dispatch","onEditContent","_id","cobrandEmail","programId","contentType","history","editContent","editorState","EditorState","createEmpty","useState","setDescription","setArtikel","editorButtonList","isPageLoading","setPageLoading","setProgramList","content","setContent","contentStartDate","setContentStartDate","conFromImgVid","setConFromImgVid","valueRadio","setRadio","RichTextEditor","createEmptyValue","setTextValue","useHistory","JSON","parse","localStorage","getItem","params1","whereKeyValues","useEffect","params","axios","method","url","data","headers","response","con","DOMParser","parseFromString","con1","getElementById","con2","htmlToDraft","innerHTML","createValueFromString","outerHTML","createWithContent","ContentState","createFromBlockArray","contentBlocks","entityMap","getElementsByTagName","toString","src","replace","des","des2","date","split","programs","catch","error","headingName","routes","path","name","initialValues","validationSchema","validateOnChange","onSubmit","values","window","scroll","handleChange","handleSubmit","handleBlur","setFieldValue","errors","touched","className","value","onChange","e","currentTarget","disabled","placeholder","onBlur","defaultValue","setOptions","buttonList","imageWidth","height","id","onClick","for","file","files","Object","keys","length","alert","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","code","resolve","module","exports","Heading","item","i","exact","to","Input","max","isError","memo"],"mappings":"yJAAA,inBAEMA,EAAa,6FAGNC,EAAsBC,IAAW,CAC1CC,SAAUD,IAAW,oBAAoBE,SAAS,qBAClDC,SAAUH,IAAW,uBAAuBE,SAAS,0BAG5CE,EAAyBJ,IAAW,CAC7CK,MAAOL,IAAW,oBAAoBE,SAAS,qBAAqBG,MAAM,mBAC1EC,YAAaN,IAAW,mBAAmBE,SAAS,oBACpDK,YAAaP,IAAW,yBAAyBE,SAAS,0BAC1DM,UAAWR,IAAU,+BAA+BE,SAAS,qBACxDO,KACG,YAAa,0DACb,SAACC,GAAD,OACIA,GAAO,CAAC,YAAa,YAAa,cAAcC,SAASD,EAAIE,SAEpEH,KACG,YAAa,0DACb,SAACC,GACG,OAAGA,GACQA,EAAIG,MAAQ,WAOnCC,YAAad,IAAW,2BAA2BE,SAAS,4BAA4Ba,QAAQjB,EAAY,+BAC5GkB,QAAShB,IAAW,sBAAsBE,SAAS,uBACnDC,SAAUH,IAAW,uBAAuBE,SAAS,wBAAwBe,IAAI,EAAG,2CACpFC,gBAAiBlB,IAAW,yBAAyBE,SAAS,wBACzDiB,KAAK,YAAY,SAAChB,EAAUiB,GACzB,OAAOA,EAAOX,KAAK,CACfA,KAAM,SAAAS,GAAe,OAAIf,GAAYe,IAAoBf,GACzDkB,QAAS,gCAKZC,EAAqBtB,IAAW,CACzCK,MAAOL,IAAW,oBAAoBE,SAAS,qBAAqBG,MAAM,mBAC1EE,YAAaP,IAAW,yBAAyBE,SAAS,0BAC1DM,UAAWR,IAAU,+BAChBS,KACG,YAAa,0DACb,SAACC,GAAD,OACKA,GAAO,CAAC,YAAa,YAAa,cAAcC,SAASD,EAAIE,QAAYF,KAEjFD,KACG,YAAa,0DACb,SAACC,GACG,OAAGA,GACQA,EAAIG,MAAQ,WASnCC,YAAad,IAAW,2BAA2BE,SAAS,4BAA4Ba,QAAQjB,EAAY,+BAC5GkB,QAAShB,IAAW,sBAAsBE,SAAS,uBACnDC,SAAUH,IAAW,uBAAuBiB,IAAI,EAAG,2CACnDC,gBAAiBlB,IAAW,yBACvBmB,KAAK,YAAY,SAAChB,EAAUiB,GACzB,OAAOA,EAAOX,KAAK,CACfA,KAAM,SAAAS,GAAe,OAAKf,GAAYe,IAAoBf,IAAcA,GACxEkB,QAAS,gCAKZE,EAAoBvB,IAAW,CACxCwB,YAAaxB,IAAW,4BAA4BE,SAAS,6BAC7DuB,mBAAoBzB,IAAW,iCAAiCE,SAAS,mCACzEwB,iBAAkB1B,IAAU,+BAA+BE,SAAS,qBAC/DO,KACG,YAAa,0DACb,SAACC,GAAD,OACIA,GAAO,CAAC,YAAa,YAAa,cAAcC,SAASD,EAAIE,SAEpEH,KACG,YAAa,0DACb,SAACC,GACG,OAAGA,GACQA,EAAIG,MAAQ,WAOnCc,UAAW3B,IAAS,qBAAqBE,SAAS,oBAClD0B,QAAS5B,IAAS,mBAAmBE,SAAS,oBAC9C2B,SAAU7B,MACV8B,eAAgB9B,MAAYiB,IAAI,EAAG,mBACnCc,gBAAiB/B,MAAYiB,IAAI,GAAGe,GAChChC,IAAW,CACPiC,YAAajC,MAAaE,SAAS,4BACnCgC,YAAalC,MAAaE,SAAS,6BACnCiC,SAAUnC,MAAaE,SAAS,2BAChCyB,UAAW3B,IAAS,qBAAqBE,SAAS,oBAClD0B,QAAS5B,IAAS,mBAAmBE,SAAS,oBAC9CkC,UAAWpC,MAAamB,KAAK,WAAY,CACrCkB,GAAI,QACJC,KAAMtC,MAAaE,SAAS,6BAC5BqC,UAAWvC,aAMdwC,EAAwBxC,IAAW,CAC5CwB,YAAaxB,IAAW,4BAA4BE,SAAS,6BAC7DuB,mBAAoBzB,IAAW,iCAAiCE,SAAS,mCACzEyB,UAAW3B,IAAS,qBAAqBE,SAAS,sBAGzCuC,EAAqBzC,IAAW,CACzCiC,YAAajC,MAAaE,SAAS,4BACnCgC,YAAalC,MAAaE,SAAS,6BACnCiC,SAAUnC,MAAaE,SAAS,6BAGvBwC,EAAoB1C,IAAW,CACxCkC,YAAalC,IAAW,4BAA4BE,SAAS,6BAC7DyC,mBAAoB3C,IAAW,iCAC/BmC,SAAUnC,IAAW,iCAAiCE,SAAS,uBAC/D0C,cAAe5C,IAAW,4BAA4BE,SAAS,8BAC/D2C,iBAAkB7C,IAAU,+BAA+BE,SAAS,qBAC/DO,KACG,YAAa,0DACb,SAACC,GAAD,OACIA,GAAO,CAAC,YAAa,YAAa,cAAcC,SAASD,EAAIE,SAEpEH,KACG,YAAa,0DACb,SAACC,GACG,OAAGA,GACQA,EAAIG,MAAQ,WAOnCc,UAAW3B,IAAS,qBAAqBE,SAAS,oBAClD0B,QAAS5B,IAAS,mBAAmBE,SAAS,oBAC9C4C,SAAU9C,MACV+C,OAAQ/C,MAAYiB,IAAI,GACxB+B,eAAgBhD,MAAYiB,IAAI,KAGvBgC,EAAwBjD,IAAW,CAC5CkC,YAAalC,IAAW,4BAA4BE,SAAS,6BAC7DyC,mBAAoB3C,IAAW,iCAC/BmC,SAAUnC,IAAW,iCAAiCE,SAAS,uBAC/D0C,cAAe5C,IAAW,4BAA4BE,SAAS,8BAC/DyB,UAAW3B,IAAS,qBAAqBE,SAAS,sBAGzCgD,EAAqBlD,IAAW,CACzCmD,SAAUnD,IAAW,4BAA4BE,SAAS,yBAC1DkD,UAAWpD,IAAW,iCAAiCE,SAAS,qBAAqBG,MAAM,mBAC3FgD,SAAUrD,IAAS,qBAAqBE,SAAS,sBAGxCoD,EAAyBtD,IAAW,CAC7CuD,YAAavD,MAAYiB,IAAI,GAC7BuC,eAAgBxD,IAAW,6BAA6BE,SAAS,+BACjEuD,eAAgBzD,IAAW,6BAA6BE,SAAS,+BACjEwD,aAAc1D,IAAS,qBAAqBE,SAAS,oBACrDyD,UAAW3D,IAAW,wBAAwBE,SAAS,0BACvD2B,SAAU7B,IAAW,sBAAsBE,SAAS,0BAG3C0D,EAAqB5D,IAAW,CACzC6D,aAAc7D,IAAW,4BAA4BE,SAAS,+BAGrD4D,EAA0B9D,IAAW,CAC9C6B,SAAU7B,IAAW,uBAAuBE,SAAS,wBACrD6D,YAAa/D,IAAW,qBAAqBE,SAAS,6BAG7C8D,EAAyBhE,IAAW,CAC7C6B,SAAU7B,IAAW,uBAAuBE,SAAS,wBACrD6D,YAAa/D,IAAW,qBAAqBE,SAAS,6BAG7C+D,EAAkBjE,IAAW,CACtCoD,UAAWpD,IAAW,oBAAoBE,SAAS,qBAAqBG,MAAM,mBAC9EJ,SAAUD,IAAW,mBAAmBE,SAAS,oBAAoBa,QAlMvD,QAkM0E,2BACxFmD,MAAOlE,IAAW,2BAA2BE,SAAS,4BAA4Ba,QAAQjB,EAAY,+BACtGK,SAAUH,IAAW,uBAAuBE,SAAS,wBAAwBe,IAAI,EAAG,6CAG3EkD,EAAsBnE,IAAW,CAC1CoE,oBAAqBpE,IAAW,6BAA6BE,SAAS,8BACtEmE,iBAAkBrE,IAAW,+BAGpBsE,EAA2BtE,IAAW,CAC/CuE,mBAAoBvE,IAAW,yBAAyBE,SAAS,4BAGxDsE,EAAyBxE,IAAW,CAC7CyE,UAAWzE,IAAW,oBAAoBE,SAAS,4BAG1CwE,EAAuB1E,IAAW,CAC3C2E,qBAAsB3E,IAAW,uBAAuBE,SAAS,wBACjE0E,sBAAuB5E,MAAaE,SAAS,yB,4QC+blC2E,uBAdS,SAAAC,GAEpB,MAAO,CACHC,UAAWD,EAAME,KAAKD,cAIH,SAACE,GACxB,MAAO,CACHC,cAAe,SAACC,EAAKC,EAAcC,EAAWnD,EAAaS,EAAoB2C,EAAa1C,EAAeC,EAAkBV,EAAUR,EAAW4D,GAAnI,OACXN,EAASO,YAAYL,EAAKC,EAAcC,EAAWnD,EAAaS,EAAoB2C,EAAa1C,EAAeC,EAAkBV,EAAUR,EAAW4D,QAIpJV,EA9nBf,YAGI,IAFAK,EAED,EAFCA,cACAH,EACD,EADCA,UAIIU,EAAcC,cAAYC,cAG9B,EAAsCC,mBAASH,GAA/C,mBAAoBI,GAApB,WAKA,EAA8BD,mBAASH,GAAvC,mBAAgBK,GAAhB,WAKMC,EAAmB,CACrB,CAAC,OAAQ,QACT,CAAC,OAAQ,WAAY,eACrB,CAAC,iBAAkB,cACnB,CAAC,OAAQ,YAAa,SAAU,SAAU,YAAa,eACvD,CAAC,YAAa,cAAe,aAC7B,CAAC,gBACD,CAAC,UAAW,UACZ,CAAC,QAAS,iBAAkB,OAAQ,cACpC,CAAC,QAAS,OAAQ,QAAS,SAG3B,CAAC,UAAW,UAIhB,EAAwCH,oBAAS,GAAjD,mBAAOI,EAAP,KAAsBC,EAAtB,KACA,EAAsCL,qBAAtC,mBAAoBM,GAApB,WACA,EAA8BN,qBAA9B,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAAgDR,qBAAhD,mBAAOS,EAAP,KAAyBC,EAAzB,KACA,EAA0CV,mBAAS,IAAnD,mBAAOW,EAAP,KAAsBC,EAAtB,KACA,EAA+BZ,mBAAS,IAAxC,mBAAOa,EAAP,KAAmBC,EAAnB,KAqBA,EAA0Cd,mBAASe,IAAeC,oBAAlE,mBACA,GADA,UACkChB,mBAASe,IAAeC,qBAA1D,mBAAkBC,GAAlB,WAuBMtB,EAAUuB,cACV1B,GAAe2B,KAAKC,MAAMC,aAAaC,QAAQ,aAAa9B,aAC5DD,GAAM8B,aAAaC,QAAQ,mBAE3BC,GAAU,CACZC,eAAgB,CACZhC,aAAcA,KAgGtB,OA5FAiC,qBAAU,WAGN,GAFApB,GAAe,GAEXd,GAAK,CACL,IAAMmC,EAAS,CACXF,eAAgB,CACZhC,aAAcA,GACdD,IAAKA,KAIboC,IAAM,CACFC,OAAQ,OACRC,IAAK,gEACLC,KAAMJ,EACNK,QAAS,CACL,eAAgB,sBAGnBrF,MAAK,SAAAsF,GAEFxB,EAAWwB,EAASF,KAAKvF,SAAS,IAClC,IAAI0F,GAAM,IAAIC,WAAYC,gBAAgBH,EAASF,KAAKvF,SAAS,GAAGA,SAAU,aAE9E,GAA8C,YAA1CyF,EAASF,KAAKvF,SAAS,GAAGmD,YAA2B,CACrD,IAAI0C,EAAOH,EAAII,eAAe,YAG1BC,EAAOC,IAAYH,EAAKI,WAC5BvB,EAAaF,IAAe0B,sBAAsBL,EAAKM,UAAW,SAClE9B,EAAiBwB,EAAKM,WAEtBxC,EAAWJ,cAAY6C,kBACnBC,eAAaC,qBACXP,EAAKQ,cAAeR,EAAKS,kBAM9B,GAA8C,UAA1Cf,EAASF,KAAKvF,SAAS,GAAGmD,YAAyB,CACxD,IAAI0C,EAAOH,EAAIe,qBAAqB,OAAO,GAAGC,WAC9CrC,EAAiBwB,EAAKc,UAErB,GAA8C,UAA1ClB,EAASF,KAAKvF,SAAS,GAAGmD,YAAyB,CACxD,IAAI0C,EAAOH,EAAIe,qBAAqB,UAAU,GAC9CpC,EAAiBwB,EAAKc,UAErB,GAA8C,QAA1ClB,EAASF,KAAKvF,SAAS,GAAGmD,YAAuB,CACtD,IACIwD,EADOjB,EAAIe,qBAAqB,UAAU,GAC/BE,IACXA,EAAInI,SAAS,oBAAmBmI,EAAMA,EAAIC,QAAQ,iBAAkB,KACpED,EAAInI,SAAS,uCAAsCmI,EAAMA,EAAIC,QAAQ,oCAAqC,KAC9GvC,EAAiBsC,GAIrB,IAAIE,EAAMpB,EAASF,KAAKvF,SAAS,GAAGQ,mBAEhCsG,EAAOd,IAAYa,GACvBnD,EAAeH,cAAY6C,kBACvBC,eAAaC,qBACTQ,EAAKP,cAAeO,EAAKN,aACjC,IAAIO,EAAOtB,EAASF,KAAKvF,SAAS,GAAGR,UAAUwH,MAAM,KAAK,GAE1D7C,EAAoB4C,GACpB3B,IAAM,CACFC,OAAQ,OACRC,IAAK,gEACLC,KAAMP,GACNQ,QAAS,CACL,eAAgB,sBAGnBrF,MAAK,SAAAsF,GAEF1B,EAAe0B,EAASF,KAAK0B,UAC7BnD,GAAe,MAElBoD,OAAM,SAAAC,GAEHrD,GAAe,SAG1BoD,OAAM,SAAAC,GAEHrD,GAAe,SAG5B,IAGCD,EACO,cAAC,IAAD,IAIP,qCACI,cAAC,IAAD,CAASuD,YAAY,UAAUC,OAAQ,CACnC,CAAEC,KAAM,eAAgBC,KAAM,WAC9B,CAAED,KAAM,oBAAqBC,KAAM,4BAEvC,cAAC,IAAD,CACIC,cAAe,CACXtE,UAAWc,EAAQd,UACnBnD,YAAaiE,EAAQjE,YACrBS,mBAAoBwD,EAAQxD,mBAC5B2C,YAAaa,EAAQb,YACrB1C,cAAeuD,EAAQvD,cACvBT,SAAUoE,EACV5E,UAAW0E,GAEfuD,iBAAkB3G,IAClB4G,kBAAkB,EAClBC,SAAU,SAAAC,GACNC,OAAOC,OAAO,EAAE,GAChB/E,EAAcC,GAAKC,GAAc2E,EAAO1E,UAAW0E,EAAO7H,YAAa6H,EAAOpH,mBAAoBoH,EAAOzE,YAAayE,EAAOnH,cAAemH,EAAOlH,iBAAkBkH,EAAO5H,SAAU4H,EAAOpI,UAAW4D,IAdhN,SAkBK,gBAAG2E,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,WAAYC,EAA3C,EAA2CA,cAAeN,EAA1D,EAA0DA,OAAQO,EAAlE,EAAkEA,OAAQC,EAA1E,EAA0EA,QAA1E,OACG,sBAAMT,SAAUK,EAAhB,SACI,sBAAKK,UAAU,cAAf,UACI,gDAAmBrE,EAAQjE,eAC3B,sBAAKsI,UAAU,aAAf,UACI,iDACA,yBACId,KAAK,cACLe,MAAOV,EAAOzE,YACdoF,SAAU,SAACC,GACPN,EAAc,cAAeM,EAAEC,cAAcH,OAC7CJ,EAAc,WAAY,KALlC,UAQI,wBAAQI,MAAM,GAAGI,UAAQ,EAAzB,iCACA,wBAAQJ,MAAM,UAAd,qBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,MAAd,4BAGR,sBAAKD,UAAU,aAAf,UACI,0CACA,cAAC,IAAD,CACI5J,KAAK,OACL8I,KAAK,cACLc,UAAU,iDACVM,YAAY,UACZL,MAAOV,EAAO7H,YACdwI,SAAUR,EACVa,OAAQX,IAGXG,EAAQrI,aAAe,sBAAMsI,UAAU,iBAAhB,SAAkCF,EAAOpI,iBAErE,sBAAKsI,UAAU,aAAf,UAC4B,YAAvBT,EAAOzE,YAA6B,qCACjC,gDACA,cAAC,IAAD,CACA0F,aAAcjB,EAAO5H,SACrB8I,WAAY,CACRC,WAAYnF,EACZoF,WAAY,SAEhBT,SAAU,SAACvE,GACPkE,EAAc,WAAYlE,IAE9BiF,OAAO,aAgDP,KACoB,UAAvBrB,EAAOzE,YAA2B,qCAC/B,8CACA,gCACI,mEACA,iCACI,uBAAO1E,KAAK,QAAQyK,GAAG,OAAO3B,KAAK,eAAee,MAAO,WACrDa,QAAS,WAAQ5E,EAAS,eAE9B,uBAAO6E,IAAI,WAAX,qCACA,uBACA,uBAAO3K,KAAK,QAAQyK,GAAG,OAAO3B,KAAK,eAAee,MAAO,MACrDa,QAAS,kBAAM5E,EAAS,UAE5B,uBAAO6E,IAAI,MAAX,wBACA,0BAGY,aAAf9E,EACG,cAAC,IAAD,CACI7F,KAAK,OACL4J,UAAU,oBACVd,KAAK,WACLqB,OAAQX,EAGRM,SAAU,SAACC,GACP,IAAIa,EAAOb,EAAEC,cAAca,MAAM,GAC7BD,GAEAnB,EAAc,WAAYmB,MAKtC,cAAC,IAAD,CACI5K,KAAK,OACL8I,KAAK,WACLc,UAAU,iDACVM,YAAY,kEACZL,MAAOV,EAAO5H,SACduI,SAAUR,EACVa,OAAQX,UAMpB,KACoB,UAAvBL,EAAOzE,YA+CJ,qCACA,8CACA,cAAC,IAAD,CACI1E,KAAK,OACL8I,KAAK,WACLc,UAAU,iDACVM,YAAY,oDACZL,MAAOV,EAAO5H,SACduI,SAAUR,EACVa,OAAQX,OAEV,KACkB,QAAvBL,EAAOzE,YACJ,qCACA,4CACA,gCACI,mEACA,iCACI,uBAAO1E,KAAK,QAAQyK,GAAG,OAAO3B,KAAK,eAAee,MAAO,WACrDa,QAAS,WAAQ5E,EAAS,eAE9B,uBAAO6E,IAAI,WAAX,yCACA,uBACA,uBAAO3K,KAAK,QAAQyK,GAAG,OAAO3B,KAAK,eAAee,MAAO,MACrDa,QAAS,kBAAM5E,EAAS,UAE5B,uBAAO6E,IAAI,MAAX,wBACA,0BAGY,aAAf9E,EACG,cAAC,IAAD,CACI7F,KAAK,OACL4J,UAAU,oBACVd,KAAK,WACLqB,OAAQX,EAGRM,SAAU,SAACC,GACP,IAAIa,EAAOb,EAAEC,cAAca,MAAM,GAC7BD,GAEAnB,EAAc,WAAYmB,MAKtC,cAAC,IAAD,CACI5K,KAAK,OACL8I,KAAK,WACLc,UAAU,iDACVM,YAAY,6BACZL,MAAOV,EAAO5H,SACduI,SAAUR,EACVa,OAAQX,UAKpB,KACHG,EAAQpI,UAAY,sBAAMqI,UAAU,iBAAhB,SAAkCF,EAAOnI,cAE1C,YAAvB4H,EAAOzE,YAA4B,sBAAKkF,UAAU,aAAf,UACpC,gDACI,cAAC,IAAD,CACAQ,aAAcjB,EAAOpH,mBACrBsI,WAAY,CACRC,WAAYnF,GAEhB2E,SAAU,SAACvE,GACPkE,EAAc,qBAAsBlE,IAExCiF,OAAO,aAqFF,KACT,sBAAKZ,UAAU,aAAf,UACI,2CACA,cAAC,IAAD,CACI5J,KAAK,OACL8I,KAAK,gBACLc,UAAU,iDACVM,YAAY,UACZL,MAAOV,EAAOnH,cACd8H,SAAUR,EACVa,OAAQX,IAEXG,EAAQ3H,eAAiB,sBAAM4H,UAAU,iBAAhB,SAAkCF,EAAO1H,mBAEvE,sBAAK4H,UAAU,aAAf,UACI,8CACA,qBAAKA,UAAU,QAAQ1B,IAAK3C,EAAQtD,mBACpC,uBACA,cAAC,IAAD,CACIjC,KAAK,OACL4J,UAAU,oBACVd,KAAK,mBACLqB,OAAQX,EACRM,SAAU,SAACC,GACP,IAAIa,EAAOb,EAAEC,cAAca,MAAM,GAC7BD,GAEAnB,EAAc,mBAAoBmB,SAkBlD,8BACI,wBAAQhB,UAAU,iBAAiB5J,KAAK,SAAS0K,QAAS,WACvDI,OAAOC,KAAKrB,GAAQsB,OAAS,GAAGC,MAAM,qDADzC,sCAUnB9G,EAAY,cAAC,IAAD,IAAe,Y,oBCroBxC,IAAI+G,EAAM,CACT,WAAY,IACZ,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,IACX,aAAc,IACd,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,IACX,aAAc,IACd,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,IACX,aAAc,KAIf,SAASC,EAAeC,GACvB,IAAIX,EAAKY,EAAsBD,GAC/B,OAAOE,EAAoBb,GAE5B,SAASY,EAAsBD,GAC9B,IAAIE,EAAoBC,EAAEL,EAAKE,GAAM,CACpC,IAAIrB,EAAI,IAAIyB,MAAM,uBAAyBJ,EAAM,KAEjD,MADArB,EAAE0B,KAAO,mBACH1B,EAEP,OAAOmB,EAAIE,GAEZD,EAAeJ,KAAO,WACrB,OAAOD,OAAOC,KAAKG,IAEpBC,EAAeO,QAAUL,EACzBM,EAAOC,QAAUT,EACjBA,EAAeV,GAAK,K,sDCzCpB,+BAsBeoB,IAlBf,YAAgD,IAA7BlD,EAA4B,EAA5BA,YAA4B,IAAfC,cAAe,MAAN,GAAM,EAE3C,OACI,sBAAKgB,UAAU,UAAf,UACI,6BAAKjB,IACL,oBAAIiB,UAAU,qBAAd,SACKhB,EAAOoC,OAAS,GAAKpC,EAAOsC,KAAI,SAACY,EAAMC,GACpC,OAAGD,EAAKjD,KACG,qBAAIe,UAAU,0BAAd,UAAgD,cAAC,IAAD,CAASoC,OAAK,EAACC,GAAIH,EAAKjD,KAAxB,SAA+BiD,EAAKhD,OAApF,MAA6CiD,GAE7C,qBAAInC,UAAU,0BAAd,cAAiD,+BAAOkC,EAAKhD,OAA7D,MAA6CiD,a,qDCd5E,2BAGA,SAASG,EAAT,GAaI,IAZAhC,EAYD,EAZCA,YACAlK,EAWD,EAXCA,KACA8J,EAUD,EAVCA,SACAK,EASD,EATCA,OACAN,EAQD,EARCA,MACAD,EAOD,EAPCA,UACAnJ,EAMD,EANCA,QACAqI,EAKD,EALCA,KACAzI,EAID,EAJCA,IACA8L,EAGD,EAHCA,IACAlC,EAED,EAFCA,SACAmC,EACD,EADCA,QAEA,MAAY,aAATpM,EAEC,qCACI,0BACI8I,KAAMA,EACN2B,GAAI3B,EACJc,UAAWA,EACXM,YAAaA,EACbJ,SAAUA,EACVK,OAAQA,EACRN,MAAOA,EACPI,SAAUA,IAEbmC,GACG,qBAAKxC,UAAU,UAAf,SACI,sBAAMA,UAAU,iBAAhB,SAAkCnJ,SAMjC,SAATT,GAA4B,mBAATA,EAEnB,qCACI,uBACI8I,KAAMA,EACNc,UAAWA,EACX5J,KAAMA,EACNkK,YAAaA,EACbJ,SAAUA,EACVK,OAAQA,EACRN,MAAOA,EACPxJ,IAAKA,EACL8L,IAAK,aACLlC,SAAUA,IAEbmC,GACG,qBAAKxC,UAAU,UAAf,SACI,sBAAMA,UAAU,iBAAhB,SAAkCnJ,SAMrC,WAATT,EAEA,qCACI,uBACI8I,KAAMA,EACNc,UAAWA,EACX5J,KAAMA,EACN8J,SAAUA,EACVK,OAAQA,EACRN,MAAOA,EACPxJ,IAAKA,EACL8L,IAAKA,EACLlC,SAAUA,IAEbmC,GACG,qBAAKxC,UAAU,UAAf,SACI,sBAAMA,UAAU,iBAAhB,SAAkCnJ,SAOlD,qCACI,uBACIqI,KAAMA,EACNc,UAAWA,EACX5J,KAAMA,EACNkK,YAAaA,EACbJ,SAAUA,EACVK,OAAQA,EACRN,MAAOA,EACPI,SAAUA,IAEbmC,GACG,qBAAKxC,UAAU,UAAf,SACI,sBAAMA,UAAU,iBAAhB,SAAkCnJ,SAOvC4L,mBAAKH","file":"static/js/59.e7a81a2f.chunk.js","sourcesContent":["import * as yup from 'yup';\n\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\nconst UserRegex = /^\\S*$/;\n\nexport const validationFormLogin = yup.object({\n    userName: yup.string('Enter your email').required('Email is required'),\n    password: yup.string('Enter your password').required('Password is required')\n})\n\nexport const validationFormRegister = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    accountName: yup.string('Enter your name').required('Name is required'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => password && confirmPassword === password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationFormEdit = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                (img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)) || (!img)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n        //buat nambahin misal upload background. apakah akan masuk kesini?\n        \n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => (password && confirmPassword === password) || !password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationProgram = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    endDate: yup.date('Insert end date').required('Date is required'),\n    category: yup.string(),\n    targetAudiance: yup.array().min(1, 'Pilih minimal 1'),\n    contentPrograms: yup.array().min(1).of(\n        yup.object({\n            namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\n            contentName: yup.string().required('Judul Tahapan harus diisi'),\n            contents: yup.string().required('Isi Tahapan harus diisi'),\n            startDate: yup.date('Insert start date').required('Date is required'),\n            endDate: yup.date('Insert end date').required('Date is required'),\n            answerKey: yup.string().when('category', {\n                is: 'Ujian',\n                then: yup.string().required('Kunci Jawaban harus diisi'),\n                otherwise: yup.string()\n            })\n        })\n    )\n})\n\nexport const validationProgramEdit = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n});\n\nexport const validationStepEdit = yup.object({\n    namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\n    contentName: yup.string().required('Judul Tahapan harus diisi'),\n    contents: yup.string().required('Isi Tahapan harus diisi'),\n});\n\nexport const validationContent = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description'),\n    contents: yup.string('Enter the content description').required('Content is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    endDate: yup.date('Insert end date').required('Date is required'),\n    isActive: yup.boolean(),\n    topics: yup.array().min(1),\n    targetAudience: yup.array().min(1)\n})\n\nexport const validationContentEdit = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description'),\n    contents: yup.string('Enter the content description').required('Content is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n});\n\nexport const validationUserEdit = yup.object({\n    nameUser: yup.string('Enter your content title').required('User name is required'),\n    emailUser: yup.string('Enter the content description').required('Email is required').email('Email not valid'),\n    birdDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationNotification = yup.object({\n    destination: yup.array().min(1),\n    messageSubject: yup.string('Enter the message subject').required('Message Subject is required'),\n    messageContent: yup.string('Enter the message content').required('Message Content is required'),\n    scheduleTime: yup.date('Insert start date').required('Date is required'),\n    mediaType: yup.string('Enter the media type').required('Media type is required'),\n    category: yup.string('Enter the category').required('Category is required')\n})\n\nexport const validationAudience = yup.object({\n    audianceName: yup.string('Enter your audience name').required('Audience Name is required')\n})\n\nexport const validationNotifCategory = yup.object({\n    category: yup.string('Enter category name').required('Category is required'),\n    description: yup.string('Enter description').required('Description is required')\n})\n\nexport const validationProgCategory = yup.object({\n    category: yup.string('Enter category name').required('Category is required'),\n    description: yup.string('Enter description').required('Description is required')\n})\n\nexport const validationStaff = yup.object({\n    emailUser: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    userName: yup.string('Enter your name').required('Name is required').matches(UserRegex, 'Invalid username format'),\n    phone: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more')\n})\n\nexport const validationCommunity = yup.object({\n    cobrandComunityName: yup.string('Enter your community name').required('Community name is required'),\n    partComunityName: yup.string('Enter your community name')\n})\n\nexport const validationGroupMitraAsuh = yup.object({\n    groupMitraAsuhName: yup.string('Enter your group name').required('Group name is required'),\n})\n\nexport const validationContentTopic = yup.object({\n    topicName: yup.string('Enter topic name').required('Topic Name is required')\n})\n\nexport const validationScreenTime = yup.object({\n    controlParameterName: yup.string('Enter category name').required('Category is required'),\n    controlParameterValue: yup.number().required('Number is required')\n})","import React, { useState, useEffect } from 'react';\nimport Heading from '../../../../components/UI/Heading/Heading';\nimport './EditContent.scss';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport { editContent } from '../../../../store/actions/dashboard';\nimport RKLoader from '../../../../components/UI/RKLoaderInner/RKLoader';\nimport { connect } from 'react-redux';\nimport { validationContentEdit } from '../../../../helpers/validation/validation';\nimport InputComponent from '../../../../components/UI/Input/Input';\nimport axios from 'axios';\nimport RichTextEditor from 'react-rte';\nimport { getEmbedUrl } from '../../../../helpers/fileHelper/fileHelper'\n\n//texteditor\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState, convertToRaw, convertFromRaw, current,ContentState, convertFromHTML} from \"draft-js\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport draftToHtml from \"draftjs-to-html\";\nimport {stateToHTML} from 'draft-js-export-html'\nimport htmlToDraft from 'html-to-draftjs'\n\n\nimport SunEditor, {buttonList} from 'suneditor-react';\nimport 'suneditor/dist/css/suneditor.min.css';\n\nfunction EditContent({\n    onEditContent,\n    isLoading\n}) {\n\n\n    let editorState = EditorState.createEmpty()\n    \n\n    const [description, setDescription] = useState(editorState)\n    const onEditorStateChange = (editorState) => {\n        setDescription(editorState)\n    }\n\n    const [artikel, setArtikel] = useState(editorState)\n    const onEditorStateChangeArtikel = (editorState) => {\n        setArtikel(editorState)\n    }\n\n    const editorButtonList = [\n        ['undo', 'redo'],\n        ['font', 'fontSize', 'formatBlock'],\n        ['paragraphStyle', 'blockquote'],\n        ['bold', 'underline', 'italic', 'strike', 'subscript', 'superscript'],\n        ['fontColor', 'hiliteColor', 'textStyle'],\n        ['removeFormat'],\n        ['outdent', 'indent'],\n        ['align', 'horizontalRule', 'list', 'lineHeight'],\n        ['table', 'link', 'image', 'video'], /** 'audio', 'math', */ // You must add the 'katex' library at options to use the 'math' plugin.\n        /** 'imageGallery', */ // You must add the \"imageGalleryUrl\".\n        // ['fullScreen', 'showBlocks', 'codeView'],\n        ['preview', 'print'], // 'save', 'template'\n        /** 'dir', 'dir_ltr', 'dir_rtl' */ // \"dir\": Toggle text direction, \"dir_ltr\": Right to Left, \"dir_rtl\": Left to Right\n    ];\n\n    const [isPageLoading, setPageLoading] = useState(true);\n    const [programList, setProgramList] = useState();\n    const [content, setContent] = useState();\n    const [contentStartDate, setContentStartDate] = useState();\n    const [conFromImgVid, setConFromImgVid] = useState('');\n    const [valueRadio, setRadio] = useState('');\n\n    const embedVideoCallBack = (link) =>{\n        \n        const asd = getEmbedUrl(link);\n        // console.log(\"Video embed \", asd);\n        return asd;\n    }\n\n    const uploadCallback = (file) => new Promise(\n        (resolve, reject) => {\n        const reader= new FileReader();\n        reader.readAsDataURL(file);\n        reader.onloadend = () => {\n            // console.log(reader.result);\n            resolve({data: {link: reader.result}});\n        }\n        reader.onerror = error => reject(error);\n        }\n    );\n\n    const [textDeskripsi, setTextDeskripsi] = useState(RichTextEditor.createEmptyValue());\n    const [textValue, setTextValue] = useState(RichTextEditor.createEmptyValue());\n    const toolbarConfig = {\n        // Optionally specify the groups to display (displayed in the order listed).\n        display: ['INLINE_STYLE_BUTTONS', 'BLOCK_TYPE_BUTTONS', 'BLOCK_TYPE_DROPDOWN', 'HISTORY_BUTTONS'],\n        INLINE_STYLE_BUTTONS: [\n            { label: 'Bold', style: 'BOLD' },\n            { label: 'Italic', style: 'ITALIC' },\n            { label: 'Underline', style: 'UNDERLINE' },\n            { label: 'Strikethrough', style: 'STRIKETHROUGH' }\n        ],\n        BLOCK_TYPE_DROPDOWN: [\n            { label: 'Normal', style: 'unstyled' },\n            { label: 'Heading Large', style: 'header-one' },\n            { label: 'Heading Medium', style: 'header-two' },\n            { label: 'Heading Small', style: 'header-three' }\n        ],\n        BLOCK_TYPE_BUTTONS: [\n            { label: 'Unordered List', style: 'unordered-list-item' },\n            { label: 'Ordered List', style: 'ordered-list-item' },\n            { label: 'Blockquote', style: 'blockquote' }\n        ]\n    };\n\n    const history = useHistory();\n    const cobrandEmail = JSON.parse(localStorage.getItem('userData')).cobrandEmail;\n    const _id = localStorage.getItem('contentSelected');\n\n    const params1 = {\n        whereKeyValues: {\n            cobrandEmail: cobrandEmail\n        }\n    };\n\n    useEffect(() => {\n        setPageLoading(true);\n        // console.log(_id);\n        if (_id) {\n            const params = {\n                whereKeyValues: {\n                    cobrandEmail: cobrandEmail,\n                    _id: _id\n                }\n            };\n\n            axios({\n                method: 'post',\n                url: 'https://as01.prod.ruangortu.id:8080/api/cobrand/contentFilter',\n                data: params,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            })\n                .then(response => {\n                    // console.log(\"Response data: \", response.data);\n                    setContent(response.data.contents[0]);\n                    let con = new DOMParser().parseFromString(response.data.contents[0].contents, 'text/html');\n                    // console.log(con);\n                    if (response.data.contents[0].contentType === 'Artikel') {\n                        let con1 = con.getElementById('contents');\n                        // console.log('Ini adalah con1 outer' + con1.outerHTML);\n                        // console.log('Ini adalah con1 inner' + con1.innerHTML);\n                        let con2 = htmlToDraft(con1.innerHTML);\n                        setTextValue(RichTextEditor.createValueFromString(con1.outerHTML, 'html'));\n                        setConFromImgVid(con1.outerHTML);\n                        // setArtikel(textValue)\n                        setArtikel(EditorState.createWithContent(\n                            ContentState.createFromBlockArray(\n                              con2.contentBlocks, con2.entityMap)))\n\n                        //   deskripsi\n                        // let condes = new DOMParser().parseFromString(response.data.contents[0].contentDescription, 'text/html');\n                        // // console.log(condes);\n                    }\n                    else if (response.data.contents[0].contentType === 'Image') {\n                        let con1 = con.getElementsByTagName('img')[0].toString();\n                        setConFromImgVid(con1.src);\n                    }\n                    else if (response.data.contents[0].contentType === 'Video') {\n                        let con1 = con.getElementsByTagName('iframe')[0];\n                        setConFromImgVid(con1.src);\n                    }\n                    else if (response.data.contents[0].contentType === 'Pdf') {\n                        let con1 = con.getElementsByTagName('iframe')[0];\n                        let src = con1.src;\n                        if (src.includes('&embedded=true')) src = src.replace('&embedded=true', '');\n                        if (src.includes('http://docs.google.com/gview?url=')) src = src.replace('http://docs.google.com/gview?url=', '');\n                        setConFromImgVid(src);\n                    }\n\n\n                    let des = response.data.contents[0].contentDescription;\n                    // console.log(\"des\", des) //null\n                    let des2 = htmlToDraft(des);\n                    setDescription(EditorState.createWithContent(\n                        ContentState.createFromBlockArray(\n                            des2.contentBlocks, des2.entityMap)))\n                    let date = response.data.contents[0].startDate.split('T')[0];\n                    // console.log(date);\n                    setContentStartDate(date);\n                    axios({\n                        method: 'post',\n                        url: 'https://as01.prod.ruangortu.id:8080/api/cobrand/programFilter',\n                        data: params1,\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                    })\n                        .then(response => {\n                            // console.log(\"Program list: \", response.data);\n                            setProgramList(response.data.programs);\n                            setPageLoading(false);\n                        })\n                        .catch(error => {\n                            // console.log(error);\n                            setPageLoading(false);\n                        });\n                })\n                .catch(error => {\n                    // console.log(error);\n                    setPageLoading(false);\n                });\n        }\n    }, []);\n\n\n    if (isPageLoading) {\n        return <RKLoader />\n    }\n\n    return (\n        <>\n            <Heading headingName=\"Artikel\" routes={[\n                { path: '/cms/content', name: 'Artikel' },\n                { path: '/cms/content/edit', name: 'Ubah Artikel Terpilih' }\n            ]} />\n            <Formik\n                initialValues={{ \n                    programId: content.programId ,\n                    contentName: content.contentName,\n                    contentDescription: content.contentDescription,\n                    contentType: content.contentType,\n                    contentSource: content.contentSource,\n                    contents: conFromImgVid,\n                    startDate: contentStartDate\n                }}\n                validationSchema={validationContentEdit}\n                validateOnChange={true}\n                onSubmit={values => {\n                    window.scroll(0,0);\n                    onEditContent(_id, cobrandEmail, values.programId, values.contentName, values.contentDescription, values.contentType, values.contentSource, values.contentThumbnail, values.contents, values.startDate, history)\n                }}\n            >\n\n                {({ handleChange, handleSubmit, handleBlur, setFieldValue, values, errors, touched }) => (\n                    <form onSubmit={handleSubmit}>\n                        <div className=\"EditContent\">\n                            <h1>Ubah Artikel: {content.contentName}</h1>\n                            <div className=\"form-group\">\n                                <label>Tipe Artikel</label>\n                                <select\n                                    name=\"contentType\"\n                                    value={values.contentType}\n                                    onChange={(e) => {\n                                        setFieldValue(\"contentType\", e.currentTarget.value);\n                                        setFieldValue(\"contents\", '');\n                                    }}\n                                >\n                                    <option value=\"\" disabled>Select Content Type</option>\n                                    <option value=\"Artikel\">Artikel</option>\n                                    <option value=\"Image\">Image</option>\n                                    <option value=\"Video\">Video</option>\n                                    <option value=\"Pdf\">File Pdf</option>\n                                </select>\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Judul</label>\n                                <InputComponent\n                                    type=\"text\"\n                                    name=\"contentName\"\n                                    className=\"form-group__input form-group__input--fullwidth\"\n                                    placeholder=\"Example\"\n                                    value={values.contentName}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n\n                                />\n                                {touched.contentName && <span className=\"message__error\">{errors.contentName}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                {values.contentType === \"Artikel\" ? (<>\n                                    <label>Isi Artikel</label>\n                                    <SunEditor\n                                    defaultValue={values.contents}\n                                    setOptions={{\n                                        buttonList: editorButtonList,\n                                        imageWidth: '360px'\n                                    }}\n                                    onChange={(content) => {\n                                        setFieldValue('contents', content);\n                                    }}\n                                    height='500px'/>\n                                    {/* <Editor\n                                        editorState={artikel}\n                                        toolbarClassName=\"toolbarClassName\"\n                                        wrapperClassName=\"wrapperClassName\"\n                                        editorClassName=\"editorClassName\"\n                                        onEditorStateChange={(editorState) => setArtikel(editorState)}\n                                        // onEditorStateChange={updateTextDescription}\n                                        // value={description.values}\n                                        value={draftToHtml(convertToRaw(artikel.getCurrentContent()))}\n                                        // value={draftToHtml(convertToRaw(editorState.getCurrentContent()))}\n                                        name=\"contents\"\n                                        toolbar={{\n                                            list: {\n                                                inDropdown: true,\n                                            },\n                                            textAlign: {\n                                                inDropdown: true,\n                                            },\n                                            image: {\n                                                uploadEnabled: true,\n                                                alignmentEnabled: true,\n                                                previewImage: true,\n                                                uploadCallback: uploadCallback,\n                                                inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg',\n                                                defaultSize: {\n                                                    height: 'auto',\n                                                    width: '360px',\n                                                },\n                                            },\n                                            embedded:{\n                                                embedCallback: embedVideoCallBack,\n                                                defaultSize: {\n                                                    height: 'auto',\n                                                    width: '360px',\n                                                },\n                                            }\n                                        }}\n                                        onChange={() => {\n                                            // setTextValue(editorState);\n                                            // setFieldValue(\"contentDescription\", description);\n                                            setFieldValue('contents', draftToHtml(convertToRaw(artikel.getCurrentContent())));\n                                            // // console.log(textDeskripsi);\n                                            // // console.log(values.contents)\n                                        }}\n\n                                    /> */}\n                                    </>\n                                ) : null}\n                                {values.contentType === \"Image\" ? (<>\n                                    <label>Isi Image</label>\n                                    <div>\n                                        <p>Pilih media yang ingin di upload :</p>\n                                        <form>\n                                            <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'internal'}\n                                                onClick={() => { setRadio('internal') }}\n                                            />\n                                            <label for=\"internal\" >Media Internal Komputer</label>\n                                            <br></br>\n                                            <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'url'}\n                                                onClick={() => setRadio('url')}\n                                            />\n                                            <label for=\"url\" >Alamat URL</label>\n                                            <br></br>\n                                        </form>\n\n                                        {valueRadio === 'internal' ?\n                                            <InputComponent\n                                                type=\"file\"\n                                                className=\"form-group__input\"\n                                                name=\"contents\"\n                                                onBlur={handleBlur}\n                                                //   value={values.contents}\n                                                //   onChange={handleChange}\n                                                onChange={(e) => {\n                                                    let file = e.currentTarget.files[0];\n                                                    if (file) {\n                                                        // console.log(\"File to upload: \", file);\n                                                        setFieldValue(\"contents\", file);\n                                                    }\n                                                }}\n                                            />\n                                            :\n                                            <InputComponent\n                                                type=\"text\"\n                                                name=\"contents\"\n                                                className=\"form-group__input form-group__input--fullwidth\"\n                                                placeholder=\"Type Image URL... (https://example.com/something/something.jpg)\"\n                                                value={values.contents}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                            />\n                                        }\n\n                                    </div>\n                                    </>\n                                ) : null}\n                                {values.contentType === \"Video\" ?\n                                    // (\n                                    //     <div>\n                                    //         <p>Pilih media yang ingin di upload :</p>\n                                    //         <form>\n                                    //             <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'internal'}\n                                    //             onClick={() => {setRadio('internal')}}\n                                    //             />\n                                    //             <label for=\"internal\" >Media Internal Komputer</label>\n                                    //             <br></br>\n                                    //             <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'url'}\n                                    //             onClick={() =>setRadio('url')}\n                                    //             />\n                                    //             <label for=\"url\" >Alamat URL</label>\n                                    //             <br></br>\n                                    //         </form>\n\n                                    //         {valueRadio === 'internal' ? \n                                    //         <InputComponent\n                                    //         type=\"file\"\n                                    //         className=\"form-group__input\"\n                                    //         name=\"contents\"\n                                    //         onBlur={handleBlur}\n                                    //         //   value={values.contents}\n                                    //         //   onChange={handleChange}\n                                    //         onChange={(e) => {\n                                    //             let file = e.currentTarget.files[0];\n                                    //             if (file) {\n                                    //                 // console.log(\"File to upload: \", file);\n                                    //                 setFieldValue(\"contents\", file);\n                                    //             }\n                                    //         }}\n                                    //         />\n                                    //         : \n                                    //         <InputComponent\n                                    //         type=\"text\"\n                                    //         name=\"contents\"\n                                    //         className=\"form-group__input form-group__input--fullwidth\"\n                                    //         placeholder=\"Type Video URL... (Youtube/Vimeo/Dailymotion/etc)\"\n                                    //         value={values.contents}\n                                    //         onChange={handleChange}\n                                    //         onBlur={handleBlur}\n                                    //         />\n                                    //         }\n                                    //     </div>\n\n                                    // )\n                                    <>\n                                    <label>URL Video</label>\n                                    <InputComponent\n                                        type=\"text\"\n                                        name=\"contents\"\n                                        className=\"form-group__input form-group__input--fullwidth\"\n                                        placeholder=\"Type Video URL... (Youtube/Vimeo/Dailymotion/etc)\"\n                                        value={values.contents}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                    /></>\n                                    : null}\n                                {values.contentType === \"Pdf\" ? (\n                                    <>\n                                    <label>Isi PDF</label>\n                                    <div>\n                                        <p>Pilih media yang ingin di upload :</p>\n                                        <form>\n                                            <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'internal'}\n                                                onClick={() => { setRadio('internal') }}\n                                            />\n                                            <label for=\"internal\" >Media Internal - Maks 300kb</label>\n                                            <br></br>\n                                            <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'url'}\n                                                onClick={() => setRadio('url')}\n                                            />\n                                            <label for=\"url\" >Alamat URL</label>\n                                            <br></br>\n                                        </form>\n\n                                        {valueRadio === 'internal' ?\n                                            <InputComponent\n                                                type=\"file\"\n                                                className=\"form-group__input\"\n                                                name=\"contents\"\n                                                onBlur={handleBlur}\n                                                //   value={values.contents}\n                                                //   onChange={handleChange}\n                                                onChange={(e) => {\n                                                    let file = e.currentTarget.files[0];\n                                                    if (file) {\n                                                        // console.log(\"File to upload: \", file);\n                                                        setFieldValue(\"contents\", file);\n                                                    }\n                                                }}\n                                            />\n                                            :\n                                            <InputComponent\n                                                type=\"text\"\n                                                name=\"contents\"\n                                                className=\"form-group__input form-group__input--fullwidth\"\n                                                placeholder=\"Type Pdf URL... (Pdf file)\"\n                                                value={values.contents}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                            />\n                                        }\n                                    </div>\n                                    </>\n                                ) : null}\n                                {touched.contents && <span className=\"message__error\">{errors.contents}</span>}\n                            </div>\n                            {values.contentType !== 'Artikel' ? <div className=\"form-group\">\n                            <label>Isi Artikel</label>\n                                <SunEditor \n                                defaultValue={values.contentDescription}\n                                setOptions={{\n                                    buttonList: editorButtonList\n                                }}\n                                onChange={(content) => {\n                                    setFieldValue('contentDescription', content);\n                                }}\n                                height='500px'/>\n                                {/* <Editor\n                                    editorState={description}\n                                    toolbarClassName=\"toolbarClassName\"\n                                    wrapperClassName=\"wrapperClassName\"\n                                    editorClassName=\"editorClassName\"\n                                    onEditorStateChange={(editorState) => setDescription(editorState)}\n                                    // onEditorStateChange={updateTextDescription}\n                                    // value={description.values}\n                                    value={draftToHtml(convertToRaw(description.getCurrentContent()))}\n                                    // value={draftToHtml(convertToRaw(editorState.getCurrentContent()))}\n                                    name=\"contentDescription\"\n                                    toolbar={{\n                                        list: {\n                                            inDropdown: true,\n                                        },\n                                        textAlign: {\n                                            inDropdown: true,\n                                        },\n                                        image: {\n                                            uploadEnabled: true,\n                                            alignmentEnabled: true,\n                                            previewImage: true,\n                                            uploadCallback: uploadCallback,\n                                            inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg',\n                                            defaultSize: {\n                                                height: 'auto',\n                                                width: '360px',\n                                            },\n                                        },\n                                        embedded:{\n                                            embedCallback: embedVideoCallBack,\n                                            defaultSize: {\n                                                height: 'auto',\n                                                width: '360px',\n                                            },\n                                        }\n                                    }}\n                                    onChange={() => {\n                                        // setTextValue(editorState);\n                                        // setFieldValue(\"contentDescription\", description);\n                                        setFieldValue('contentDescription', draftToHtml(convertToRaw(description.getCurrentContent())));\n                                        // // console.log(textDeskripsi);\n                                        // // console.log(values.contents)\n                                    }}\n\n                                /> */}\n                                {/* <RichTextEditor\n                                        name=\"contentDescription\"\n                                        placeholder=\"Type your contents here...\"\n                                        className=\"form-group_rte\"\n                                        value={values.contentDescription}\n                                        // value={values.contentDescription}\n                                        toolbarConfig={toolbarConfig}\n                                        onBlur={handleBlur}\n                                        // onChange={handleChange}\n                                        onChange={(e) => {\n                                            setTextDeskripsi(e);\n                                            setFieldValue(\"contentDescription\", e.toString(\"html\"));\n                                            // console.log(values.contentDescription);\n                                        }}\n                                /> */}\n                                {/* <RichTextEditor\n                                        name=\"contentDescription\"\n                                        placeholder=\"Type your contents here...\"\n                                        className=\"form-group_rte\"\n                                        // value={textValue}\n                                        value={values.contentDescription}\n                                        toolbarConfig={toolbarConfig}\n                                        onBlur={handleBlur}\n                                        onChange={(e) => {\n                                            setTextDeskripsi(e);\n                                            setFieldValue(\"contentDescription\", e.toString(\"html\"));\n                                            // console.log(values.contentDescription);\n                                        }}\n                                    /> */}\n                                {/* <InputComponent\n                                    type=\"textarea\"\n                                    name=\"contentDescription\"\n                                    placeholder=\"Type Something...\"\n                                    value={values.contentDescription}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                /> */}\n                                {/* {touched.contentDescription && <span className=\"message__error\">{errors.contentDescription}</span>} */}\n                            </div> : null}\n                            <div className=\"form-group\">\n                                <label>Sumber</label>\n                                <InputComponent\n                                    type=\"text\"\n                                    name=\"contentSource\"\n                                    className=\"form-group__input form-group__input--fullwidth\"\n                                    placeholder=\"Example\"\n                                    value={values.contentSource}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                                {touched.contentSource && <span className=\"message__error\">{errors.contentSource}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Thumbnail</label>\n                                <img className='photo' src={content.contentThumbnail}></img>\n                                <br></br>\n                                <InputComponent\n                                    type=\"file\"\n                                    className=\"form-group__input\"\n                                    name=\"contentThumbnail\"\n                                    onBlur={handleBlur}\n                                    onChange={(e) => {\n                                        let file = e.currentTarget.files[0];\n                                        if (file) {\n                                            // console.log(\"File to upload: \", file);\n                                            setFieldValue(\"contentThumbnail\", file);\n                                        }\n                                    }}\n                                />\n                            </div>\n                            {/* <div className=\"form-group\">\n                                <label>Set Schedule</label>\n                                <InputComponent\n                                    type=\"date\"\n                                    className=\"form-group__input\"\n                                    name=\"startDate\"\n                                    value={values.startDate}\n                                    min={new Date().toISOString().split('T')[0]}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                                {touched.startDate && <span className=\"message__error\">{errors.startDate}</span>}\n                            </div> */}\n                            <div>\n                                <button className=\"btn btn-submit\" type=\"submit\" onClick={() => {\n                                if(Object.keys(errors).length > 0) alert('Ada kolom yang belum diisi. Silakan cek kembali.');\n                            }}>\n                                    Update Artikel\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                )}\n            </Formik>\n            {isLoading ? <RKLoader /> : null}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    // console.log(state.auth.isLoading);\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onEditContent: (_id, cobrandEmail, programId, contentName, contentDescription, contentType, contentSource, contentThumbnail, contents, startDate, history) =>\n            dispatch(editContent(_id, cobrandEmail, programId, contentName, contentDescription, contentType, contentSource, contentThumbnail, contents, startDate, history))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditContent)\n","var map = {\n\t\"./ckb.js\": 190,\n\t\"./da.js\": 191,\n\t\"./de.js\": 192,\n\t\"./en.js\": 182,\n\t\"./es.js\": 193,\n\t\"./fr.js\": 194,\n\t\"./he.js\": 195,\n\t\"./index.js\": 232,\n\t\"./it.js\": 196,\n\t\"./ja.js\": 197,\n\t\"./ko.js\": 198,\n\t\"./lv.js\": 199,\n\t\"./nl.js\": 200,\n\t\"./pl.js\": 201,\n\t\"./pt_br.js\": 202,\n\t\"./ro.js\": 203,\n\t\"./ru.js\": 204,\n\t\"./se.js\": 205,\n\t\"./ua.js\": 206,\n\t\"./zh_cn.js\": 207\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 231;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Heading.scss';\n\nfunction Heading({ headingName, routes = [] }) {\n    \n    return (\n        <div className=\"Heading\">\n            <h1>{headingName}</h1>\n            <ul className=\"Heading__breadcumb\">\n                {routes.length > 0 && routes.map((item, i) => {\n                    if(item.path){\n                        return <li className=\"Heading__breadcumb-item\" key={i}><NavLink exact to={item.path}>{item.name}</NavLink> </li>\n                    }else{\n                        return <li className=\"Heading__breadcumb-item\" key={i}> <span>{item.name}</span> </li>\n                    }\n                })}\n            </ul>\n        </div>\n    )\n}\n\nexport default Heading\n","import React, { memo } from 'react';\nimport './Input.scss';\n\nfunction Input({\n    placeholder,\n    type,\n    onChange,\n    onBlur,\n    value,\n    className,\n    message,\n    name,\n    min,\n    max,\n    disabled,\n    isError\n}) {\n    if(type === \"textarea\") {\n        return (\n        <>\n            <textarea\n                name={name}\n                id={name}\n                className={className}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n        )\n    }\n    else if(type === 'date' || type === 'datetime-local') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    placeholder={placeholder}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                    max={\"9999-12-31\"}\n                    disabled={disabled}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else if(type === 'number') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                    max={max}\n                    disabled={disabled}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else return (\n        <>\n            <input\n                name={name}\n                className={className} \n                type={type}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default memo(Input) \n"],"sourceRoot":""}