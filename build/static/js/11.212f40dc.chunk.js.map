{"version":3,"sources":["assets/img/device.png","containers/CoBrand/Register/Register.js","components/UI/Input/Input.js","helpers/validation/validation.js"],"names":["connect","state","isLoading","auth","dispatch","onRegister","email","accountName","cobrandName","thumbnail","phoneNumber","address","password","confirmPassword","history","registerAuth","useHistory","className","src","Logo","alt","DeviceImage","initialValues","validationSchema","validationFormRegister","validateOnChange","onSubmit","values","handleChange","handleBlur","handleSubmit","setFieldValue","touched","errors","placeholder","type","name","onChange","value","onBlur","isError","Boolean","message","e","file","currentTarget","files","console","log","to","Input","id","memo","validationFormLogin","yup","required","test","img","includes","size","matches","min","when","schema","validationProgram","programName","programDescription","programThumbnail","startDate","validationContent","contentName","contentDescription","contents","contentSource","contentThumbnail"],"mappings":"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","file":"static/js/11.212f40dc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/device.68ed995d.png\";","import React from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport './Register.scss';\nimport Logo from './../../../assets/img/Logo_1.png'\nimport DeviceImage from './../../../assets/img/device.png';\nimport InputComponent from '../../../components/UI/Input/Input';\nimport RKLoader from '../../../components/UI/RKLoader/RKLoader';\nimport { Formik } from 'formik';\nimport { validationFormRegister } from './../../../helpers/validation/validation';\nimport { connect } from 'react-redux';\nimport { registerAuth } from './../../../store/actions/auth';\n\nfunction Register({\n    onRegister,\n    isLoading\n}) {\n\n    const history = useHistory();\n\n    return (\n        <>\n            <div className=\"RegisterBg\">\n            <div className=\"Register\">\n                <div className=\"Register-top\">\n                    <img src={Logo} className=\"Register-top-img\" alt=\"logo top\" />\n                </div>\n             \n                <div className=\"Register-middle\">\n                        <div className=\"Register-middle-left\">\n                            <img \n                                src={DeviceImage} \n                                alt=\"Device \" \n                                className=\"Register-middle-left-img\"\n                            />\n                        </div>\n                        <div className=\"Register-middle-right\">\n                            <div className=\"Register-middle-right-heading mb-small\">\n                                <h1>Daftarkan Brand Anda.</h1>\n                            </div>\n                            <Formik\n                                initialValues= {{\n                                    email: '',\n                                    password: '',\n                                    confirmPassword: '',\n                                    accountName: '',\n                                    cobrandName: '',\n                                    phoneNumber: '',\n                                    address: '',\n                                    thumbnail: ''\n                                }}\n                                validationSchema = {validationFormRegister}\n                                validateOnChange = {true}\n                                onSubmit = {values => {\n                                    onRegister( values.email, values.accountName, values.cobrandName, values.thumbnail, values.phoneNumber,\n                                        values.address, values.password, values.confirmPassword, history)\n                                }}\n                            >\n                            {({handleChange, handleBlur, handleSubmit, setFieldValue, touched, values, errors}) => (\n                                <form className=\"Register-middle-right-form\" onSubmit={handleSubmit}>\n                                    <InputComponent \n                                        placeholder=\"Your E-mail (example@mail.com)\"\n                                        type=\"text\"\n                                        name=\"email\"\n                                        onChange={handleChange}\n                                        value={values.email}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.email && Boolean(errors.email) }\n                                        message={touched.email && errors.email}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Password\"\n                                        type=\"password\"\n                                        name=\"password\"\n                                        onChange={handleChange}\n                                        value={values.password}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.password && Boolean(errors.password) }\n                                        message={touched.password && errors.password}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Confirm Password\"\n                                        type=\"password\"\n                                        name=\"confirmPassword\"\n                                        onChange={handleChange}\n                                        value={values.confirmPassword}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.confirmPassword && Boolean(errors.confirmPassword) }\n                                        message={touched.confirmPassword && errors.confirmPassword}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Your Name\"\n                                        type=\"text\"\n                                        name=\"accountName\"\n                                        onChange={handleChange}\n                                        value={values.accountName}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.accountName && Boolean(errors.accountName) }\n                                        message={touched.accountName && errors.accountName}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Your Brand Name\"\n                                        type=\"text\"\n                                        name=\"cobrandName\"\n                                        onChange={handleChange}\n                                        value={values.cobrandName}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.cobrandName && Boolean(errors.cobrandName) }\n                                        message={touched.cobrandName && errors.cobrandName}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Phone Number\"\n                                        type=\"text\"\n                                        name=\"phoneNumber\"\n                                        onChange={handleChange}\n                                        value={values.phoneNumber}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.phoneNumber && Boolean(errors.phoneNumber) }\n                                        message={touched.phoneNumber && errors.phoneNumber}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Address\"\n                                        type=\"textarea\"\n                                        name=\"address\"\n                                        onChange={handleChange}\n                                        value={values.address}\n                                        className=\"Input-control Input-control-big Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.address && Boolean(errors.address) }\n                                        message={touched.address && errors.address}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Photo\"\n                                        type=\"file\"\n                                        name=\"thumbnail\"\n                                        onChange={(e) => {\n                                            let file = e.currentTarget.files[0];\n                                            if(file) {\n                                            console.log(\"File to upload: \", file);\n                                            setFieldValue(\"thumbnail\", file);\n                                            }\n                                        }}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.thumbnail && Boolean(errors.thumbnail) }\n                                        message={touched.thumbnail && errors.thumbnail}\n                                    />\n                                    <button\n                                        className=\"btn btn-register\"\n                                        type=\"submit\"\n                                    >\n                                        Sign up\n                                    </button>\n                                </form>\n                            )}\n                            </Formik>\n                            <p className=\"Register-middle-right-joinus\">Sudah punya akun? <NavLink to=\"/\">Klik untuk masuk</NavLink> </p>\n                        </div>\n                    </div> \n                \n                {isLoading && (\n                    <RKLoader />\n                )}\n                <div className=\"Register-bottom\"></div>\n            </div>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onRegister: ( email, accountName, cobrandName, thumbnail, phoneNumber, address, password, confirmPassword, history ) =>\n            dispatch( registerAuth( email, accountName, cobrandName, thumbnail, phoneNumber, address, password, confirmPassword, history )  )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Register)\n","import React, { memo } from 'react';\nimport './Input.scss';\n\nfunction Input({\n    placeholder,\n    type,\n    onChange,\n    onBlur,\n    value,\n    className,\n    message,\n    name,\n    isError\n}) {\n    if(type === \"textarea\") {\n        return (\n        <>\n            <textarea\n                name={name}\n                id={name}\n                className={className}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n        )\n    }\n    else return (\n    <>\n        <input\n            name={name}\n            className={className} \n            type={type}\n            placeholder={placeholder}\n            onChange={onChange}\n            onBlur={onBlur}\n            value={value}\n        />\n        {isError && (\n            <div className=\"message\">\n                <span className=\"message__error\">{message}</span>\n            </div>\n        )}\n    </>\n    )\n}\n\nexport default memo(Input) \n","import * as yup from 'yup';\n\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\n\nexport const validationFormLogin = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    password: yup.string('Enter your password').required('Password is required')\n})\n\nexport const validationFormRegister = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    accountName: yup.string('Enter your name').required('Name is required'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => password && confirmPassword === password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationProgram = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationContent = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description').required('Content description is required'),\n    contents: yup.string('Enter the content description').required('Content description is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required')\n})"],"sourceRoot":""}