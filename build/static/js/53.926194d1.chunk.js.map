{"version":3,"sources":["components/UI/Input/Input.js","helpers/validation/validation.js","containers/CoBrand/Login/Login.js","assets/img/device2.png","components/UI/Help/LoginHelp/LoginHelp.js"],"names":["Input","placeholder","type","onChange","onBlur","value","className","message","name","min","max","disabled","isError","id","memo","PhoneRegex","validationFormLogin","yup","email","required","password","validationFormRegister","accountName","cobrandName","thumbnail","test","img","includes","size","phoneNumber","matches","address","confirmPassword","when","schema","validationFormEdit","validationProgram","programName","programDescription","programThumbnail","startDate","endDate","category","targetAudiance","contentPrograms","of","namaTahapan","contentName","contents","validationProgramEdit","validationContent","contentDescription","contentSource","contentThumbnail","isActive","topics","targetAudience","validationContentEdit","validationNotification","destination","messageSubject","messageContent","scheduleTime","mediaType","validationAudience","audianceName","validationNotifCategory","description","validationProgCategory","validationStaff","emailUser","userName","phone","validationContentTopic","topicName","validationScreenTime","controlParameterName","controlParameterValue","connect","state","isLoading","auth","dispatch","onLogin","useState","showHelp","setShowHelp","isPasswordVisible","showPassword","setLoginMessage","formik","useFormik","initialValues","validationSchema","onSubmit","values","useEffect","localStorage","getItem","removeItem","onClick","src","Logo","alt","DeviceImage","to","handleSubmit","handleChange","touched","Boolean","errors","e","currentTarget","checked","LoginHelp"],"mappings":"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","file":"static/js/53.926194d1.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport './Input.scss';\n\nfunction Input({\n    placeholder,\n    type,\n    onChange,\n    onBlur,\n    value,\n    className,\n    message,\n    name,\n    min,\n    max,\n    disabled,\n    isError\n}) {\n    if(type === \"textarea\") {\n        return (\n        <>\n            <textarea\n                name={name}\n                id={name}\n                className={className}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n        )\n    }\n    else if(type === 'date' || type === 'datetime-local') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    placeholder={placeholder}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                    max={\"9999-12-31\"}\n                    disabled={disabled}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else if(type === 'number') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                    max={max}\n                    disabled={disabled}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else return (\n        <>\n            <input\n                name={name}\n                className={className} \n                type={type}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default memo(Input) \n","import * as yup from 'yup';\n\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\nconst UserRegex = /^\\S*$/;\n\nexport const validationFormLogin = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    password: yup.string('Enter your password').required('Password is required')\n})\n\nexport const validationFormRegister = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    accountName: yup.string('Enter your name').required('Name is required'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => password && confirmPassword === password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationFormEdit = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                (img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)) || (!img)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n        //buat nambahin misal upload background. apakah akan masuk kesini?\n        \n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => (password && confirmPassword === password) || !password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationProgram = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    endDate: yup.date('Insert end date').required('Date is required'),\n    category: yup.string(),\n    targetAudiance: yup.array().min(1, 'Pilih minimal 1'),\n    contentPrograms: yup.array().min(1).of(\n        yup.object({\n            namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\n            contentName: yup.string().required('Judul Tahapan harus diisi'),\n            contents: yup.string().required('Isi Tahapan harus diisi'),\n            startDate: yup.date('Insert start date').required('Date is required'),\n            endDate: yup.date('Insert end date').required('Date is required'),\n        })\n    )\n})\n\nexport const validationProgramEdit = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationContent = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description').required('Content description is required'),\n    contents: yup.string('Enter the content description').required('Content is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    endDate: yup.date('Insert end date').required('Date is required'),\n    isActive: yup.boolean(),\n    topics: yup.array().min(1),\n    targetAudience: yup.array().min(1)\n})\n\nexport const validationContentEdit = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description').required('Content description is required'),\n    contents: yup.string('Enter the content description').required('Content is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationNotification = yup.object({\n    destination: yup.array().min(1),\n    messageSubject: yup.string('Enter the message subject').required('Message Subject is required'),\n    messageContent: yup.string('Enter the message content').required('Message Content is required'),\n    scheduleTime: yup.date('Insert start date').required('Date is required'),\n    mediaType: yup.string('Enter the media type').required('Media type is required'),\n    category: yup.string('Enter the category').required('Category is required')\n})\n\nexport const validationAudience = yup.object({\n    audianceName: yup.string('Enter your audience name').required('Audience Name is required')\n})\n\nexport const validationNotifCategory = yup.object({\n    category: yup.string('Enter category name').required('Category is required'),\n    description: yup.string('Enter description').required('Description is required')\n})\n\nexport const validationProgCategory = yup.object({\n    category: yup.string('Enter category name').required('Category is required'),\n    description: yup.string('Enter description').required('Description is required')\n})\n\nexport const validationStaff = yup.object({\n    emailUser: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    userName: yup.string('Enter your name').required('Name is required').matches(UserRegex, 'Invalid username format'),\n    phone: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more')\n})\n\nexport const validationContentTopic = yup.object({\n    topicName: yup.string('Enter topic name').required('Topic Name is required')\n})\n\nexport const validationScreenTime = yup.object({\n    controlParameterName: yup.string('Enter category name').required('Category is required'),\n    controlParameterValue: yup.number().required('Number is required')\n})","import React, {useState, useEffect} from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Login.scss';\nimport Logo from './../../../assets/img/Logo_2.png'\nimport DeviceImage from './../../../assets/img/device2.png';\nimport InputComponent from '../../../components/UI/Input/Input';\nimport RKLoader from '../../../components/UI/RKLoader/RKLoader';\nimport { useFormik } from 'formik';\nimport { validationFormLogin } from './../../../helpers/validation/validation';\nimport { connect } from 'react-redux';\nimport { auth } from './../../../store/actions/auth';\nimport { FiHelpCircle, FiXCircle } from 'react-icons/fi'\nimport LoginHelp from '../../../components/UI/Help/LoginHelp/LoginHelp';\n\nfunction Login({\n    onLogin,\n    isLoading\n}) {\n    const [showHelp, setShowHelp] = useState(false);\n    const [isPasswordVisible, showPassword] = useState(false);\n    const [loginMessage, setLoginMessage] = useState();\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: ''\n        },\n        validationSchema: validationFormLogin,\n        onSubmit: values => {\n            onLogin( values.email, values.password )\n        }\n    });\n\n    useEffect(() => {\n        if(localStorage.getItem('loginMessage')) {\n            setLoginMessage(localStorage.getItem('loginMessage'));\n            localStorage.removeItem('loginMessage');\n        }\n    })\n\n    return (\n        <>\n            {showHelp ? <LoginHelp /> : null}\n            {showHelp ? (\n                <button \n                    className=\"CloseHelp\"\n                    onClick={() => {\n                    setShowHelp(false);\n                }}><FiXCircle/> </button>\n            ) : null}\n            <div className=\"LoginBg\">\n            <div className=\"Login\">\n                <div className=\"Login-top\">\n                    <img src={Logo} className=\"Login-top-img\" alt=\"logo top\" />\n                </div>\n             \n                <div className=\"Login-middle\">\n                        <div className=\"Login-middle-left\">\n                            <img \n                                src={DeviceImage} \n                                alt=\"Device \" \n                                className=\"Login-middle-left-img\"\n                            />\n                            <NavLink\n                                to=\"/\" \n                                className=\"Login-middle-left-help\"\n                                onClick={() => {\n                                setShowHelp(true);\n                            }}><FiHelpCircle/>  Bantuan</NavLink>\n                        </div>\n                        <div className=\"Login-middle-right\">\n                            <div className=\"Login-middle-right-heading mb-small\">\n                                <h1>Mulai Kelola Pelanggan Anda Sekarang.</h1>\n                                {localStorage.getItem('loginMessage') ? <p>{localStorage.getItem('loginMessage')}</p> : null}\n                            </div>\n                            <form className=\"Login-middle-right-form\" onSubmit={formik.handleSubmit}>\n                                <InputComponent \n                                    placeholder=\"Your E-mail (example@mail.com)\"\n                                    type=\"text\"\n                                    name=\"email\"\n                                    onChange={formik.handleChange}\n                                    value={formik.values.email}\n                                    className=\"Input-control Input-control__with-focus mb-tiny\"\n                                    isError={formik.touched.email && Boolean(formik.errors.email) }\n                                    message={formik.touched.email && formik.errors.email}\n                                />\n                                <InputComponent \n                                    placeholder=\"Password\"\n                                    type={isPasswordVisible ? \"text\" : \"password\"}\n                                    name=\"password\"\n                                    onChange={formik.handleChange}\n                                    value={formik.values.password}\n                                    className=\"Input-control Input-control__with-focus mb-tiny\"\n                                    isError={formik.touched.password && Boolean(formik.errors.password)}\n                                    message={formik.touched.password && formik.errors.password}\n                                />\n                                <div className=\"Login-middle-right-form-checkbox\">\n                                    <InputComponent\n                                        type=\"checkbox\"\n                                        name=\"showPassword\"\n                                        onChange={(e) => {\n                                            if(e.currentTarget.checked) {\n                                                showPassword(true);\n                                            }\n                                            else {\n                                                showPassword(false);\n                                            }\n                                        }}\n                                    />\n                                    <label>Show Password</label>\n                                </div>\n                                <button\n                                    className=\"btn btn-login\"\n                                    type=\"submit\"\n                                >\n                                    Login\n                                </button>\n                            </form>\n                            {/*<p className=\"Login-middle-right-joinus\">Ingin bermitra dengan kami? <NavLink to=\"/register\">Daftar Sekarang</NavLink> </p>*/}\n                        </div>\n                    </div> \n                \n                {isLoading && (\n                    <RKLoader />\n                )}\n                <div className=\"Login-bottom\"></div>\n            </div>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onLogin: (email, password) => dispatch( auth( email, password )  )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Login)\n","export default __webpack_public_path__ + \"static/media/device2.69f8ea4a.png\";","import React from 'react';\nimport './LoginHelp.scss';\n\nfunction LoginHelp() {\n    return (\n        <div className=\"HelpOverlay\">\n            <div className=\"HelpOverlay-content\">\n                <h1>Guide Co-Brand Ruang Ortu</h1>\n                <h2>Registrasi</h2>\n                <p>Pada halaman utama (Login), klik pada tulisan <span className=\"HelpOverlay-content-keyword\">Daftar Sekarang</span> untuk masuk ke halaman registrasi. Pada halaman registrasi, Anda harus mengisi delapan kolom yang disediakan, yaitu:</p>\n                <p><br/></p>\n                <ol>\n                    <li>E-Mail</li>\n                    <li>Password</li>\n                    <li>Confirm Password (isi harus sama dengan password)</li>\n                    <li>Your Name (Nama Anda)</li>\n                    <li>Your Brand Name (Nama Brand Anda)</li>\n                    <li>Phone Number (Nomor Telepon yang terhubung dengan Brand Anda)</li>\n                    <li>Address (Alamat Brand Anda)</li>\n                    <li>Photo (Foto atau Gambar Logo dari Brand Anda)</li>\n                </ol>\n                <p><br/></p>\n                <p>Setelah mengisi delapan kolom di atas, klik <span className=\"HelpOverlay-content-keyword\">Sign Up</span> untuk mendaftarkan Brand Anda. Jika berhasil, Anda akan dialihkan ke halaman <span className=\"HelpOverlay-content-keyword\">Login</span> untuk masuk.</p>\n                <p><br/></p>\n                <p><br/></p>\n                <h2>Login</h2>\n                <p>Pada halaman login, masukkan e-mail dan password yang telah dibuat pada saat registrasi. Lalu, klik tombol <span className=\"HelpOverlay-content-keyword\">Login</span>. Jika berhasil, Anda akan dialihkan ke halaman Dashboard.</p>   \n            </div>\n        </div>\n    )\n}\n\nexport default LoginHelp"],"sourceRoot":""}