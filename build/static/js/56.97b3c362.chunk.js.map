{"version":3,"sources":["components/UI/Input/Input.js","helpers/validation/validation.js","containers/CoBrand/ManagementUser/AddStaff/AddStaff.js","components/UI/Heading/Heading.js"],"names":["Input","placeholder","type","onChange","onBlur","value","className","message","name","min","max","disabled","isError","id","memo","PhoneRegex","validationFormLogin","yup","userName","required","password","validationFormRegister","email","accountName","cobrandName","thumbnail","test","img","includes","size","phoneNumber","matches","address","confirmPassword","when","schema","validationFormEdit","validationProgram","programName","programDescription","programThumbnail","startDate","endDate","category","targetAudiance","contentPrograms","of","namaTahapan","contentName","contents","answerKey","is","then","otherwise","validationProgramEdit","validationStepEdit","validationContent","contentDescription","contentSource","contentThumbnail","isActive","topics","targetAudience","validationContentEdit","validationUserEdit","nameUser","emailUser","birdDate","validationNotification","destination","messageSubject","messageContent","scheduleTime","mediaType","validationAudience","audianceName","validationNotifCategory","description","validationProgCategory","validationStaff","phone","validationContentTopic","topicName","validationScreenTime","controlParameterName","controlParameterValue","connect","state","console","log","auth","isLoading","dispatch","onAddStaff","userType","cobrandEmail","userLevel","history","addStaff","useHistory","JSON","parse","localStorage","getItem","useState","isPasswordVisible","showPassword","headingName","routes","path","initialValues","validationSchema","validateOnChange","onSubmit","values","handleChange","handleSubmit","handleBlur","setFieldValue","errors","touched","e","currentTarget","checked","result","replace","onClick","Heading","length","map","item","i","exact","to"],"mappings":"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","file":"static/js/56.97b3c362.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport './Input.scss';\n\nfunction Input({\n    placeholder,\n    type,\n    onChange,\n    onBlur,\n    value,\n    className,\n    message,\n    name,\n    min,\n    max,\n    disabled,\n    isError\n}) {\n    if(type === \"textarea\") {\n        return (\n        <>\n            <textarea\n                name={name}\n                id={name}\n                className={className}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n        )\n    }\n    else if(type === 'date' || type === 'datetime-local') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    placeholder={placeholder}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                    max={\"9999-12-31\"}\n                    disabled={disabled}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else if(type === 'number') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                    max={max}\n                    disabled={disabled}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else return (\n        <>\n            <input\n                name={name}\n                className={className} \n                type={type}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default memo(Input) \n","import * as yup from 'yup';\n\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\nconst UserRegex = /^\\S*$/;\n\nexport const validationFormLogin = yup.object({\n    userName: yup.string('Enter your email').required('Email is required'),\n    password: yup.string('Enter your password').required('Password is required')\n})\n\nexport const validationFormRegister = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    accountName: yup.string('Enter your name').required('Name is required'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => password && confirmPassword === password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationFormEdit = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                (img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)) || (!img)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n        //buat nambahin misal upload background. apakah akan masuk kesini?\n        \n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => (password && confirmPassword === password) || !password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationProgram = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    endDate: yup.date('Insert end date').required('Date is required'),\n    category: yup.string(),\n    targetAudiance: yup.array().min(1, 'Pilih minimal 1'),\n    contentPrograms: yup.array().min(1).of(\n        yup.object({\n            namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\n            contentName: yup.string().required('Judul Tahapan harus diisi'),\n            contents: yup.string().required('Isi Tahapan harus diisi'),\n            startDate: yup.date('Insert start date').required('Date is required'),\n            endDate: yup.date('Insert end date').required('Date is required'),\n            answerKey: yup.string().when('category', {\n                is: 'Ujian',\n                then: yup.string().required('Kunci Jawaban harus diisi'),\n                otherwise: yup.string()\n            })\n        })\n    )\n})\n\nexport const validationProgramEdit = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n});\n\nexport const validationStepEdit = yup.object({\n    namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\n    contentName: yup.string().required('Judul Tahapan harus diisi'),\n    contents: yup.string().required('Isi Tahapan harus diisi'),\n});\n\nexport const validationContent = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description'),\n    contents: yup.string('Enter the content description').required('Content is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    endDate: yup.date('Insert end date').required('Date is required'),\n    isActive: yup.boolean(),\n    topics: yup.array().min(1),\n    targetAudience: yup.array().min(1)\n})\n\nexport const validationContentEdit = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description'),\n    contents: yup.string('Enter the content description').required('Content is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n});\n\nexport const validationUserEdit = yup.object({\n    nameUser: yup.string('Enter your content title').required('User name is required'),\n    emailUser: yup.string('Enter the content description').required('Email is required').email('Email not valid'),\n    birdDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationNotification = yup.object({\n    destination: yup.array().min(1),\n    messageSubject: yup.string('Enter the message subject').required('Message Subject is required'),\n    messageContent: yup.string('Enter the message content').required('Message Content is required'),\n    scheduleTime: yup.date('Insert start date').required('Date is required'),\n    mediaType: yup.string('Enter the media type').required('Media type is required'),\n    category: yup.string('Enter the category').required('Category is required')\n})\n\nexport const validationAudience = yup.object({\n    audianceName: yup.string('Enter your audience name').required('Audience Name is required')\n})\n\nexport const validationNotifCategory = yup.object({\n    category: yup.string('Enter category name').required('Category is required'),\n    description: yup.string('Enter description').required('Description is required')\n})\n\nexport const validationProgCategory = yup.object({\n    category: yup.string('Enter category name').required('Category is required'),\n    description: yup.string('Enter description').required('Description is required')\n})\n\nexport const validationStaff = yup.object({\n    emailUser: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    userName: yup.string('Enter your name').required('Name is required').matches(UserRegex, 'Invalid username format'),\n    phone: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more')\n})\n\nexport const validationContentTopic = yup.object({\n    topicName: yup.string('Enter topic name').required('Topic Name is required')\n})\n\nexport const validationScreenTime = yup.object({\n    controlParameterName: yup.string('Enter category name').required('Category is required'),\n    controlParameterValue: yup.number().required('Number is required')\n})","import React, {useState} from 'react';\nimport Heading from '../../../../components/UI/Heading/Heading';\nimport './AddStaff.scss';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport { addStaff } from '../../../../store/actions/dashboard';\nimport RKLoader from '../../../../components/UI/RKLoaderInner/RKLoader';\nimport { connect } from 'react-redux';\nimport { validationStaff } from '../../../../helpers/validation/validation';\nimport InputComponent from '../../../../components/UI/Input/Input';\n\nfunction AddStaff({\n    onAddStaff,\n    isLoading\n}) {\n\n    const history = useHistory();\n    const cobrandEmail = JSON.parse(localStorage.getItem('userData')).cobrandEmail;\n    const [isPasswordVisible, showPassword] = useState(false);\n\n    return (\n        <>\n            <Heading headingName=\"Tambah Admin &amp; Staff\" routes={[\n                { path: '/tools/admin-staff', name: 'Admin & Staff' },\n                { path: '/tools/admin-staff/add', name: 'Tambah' }\n            ]} />\n            <Formik\n                initialValues= {{\n                    userName: '',\n                    password: '',\n                    userType: 'Co-Brand',\n                    cobrandEmail: cobrandEmail,\n                    userLevel: 'Reporter',\n                    emailUser: '',\n                    phone: ''\n                }}\n                validationSchema = {validationStaff}\n                validateOnChange = {true}\n                onSubmit = { values => {\n                    console.log(values);\n                    onAddStaff( values.userName, values.password, values.userType, values.cobrandEmail, values.userLevel, values.emailUser, values.phone, history)\n                }}\n            >\n            {({handleChange, handleSubmit, handleBlur, setFieldValue, values, errors, touched}) => (\n                <form onSubmit={handleSubmit}>\n                    <div className=\"AddStaff\">\n                        <h1>Tambah</h1>\n                        <div className=\"form-group\">\n                            <label>Username</label>\n                            <InputComponent \n                                type=\"text\"\n                                name=\"userName\"\n                                className=\"form-group__input form-group__input--fullwidth\" \n                                placeholder=\"Example\"\n                                value={values.userName}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            />\n                            {touched.userName && <span className=\"message__error\">{errors.userName}</span>}\n                        </div>\n                        <div className=\"form-group\">\n                        <label>Password</label>\n                            <InputComponent \n                                type={isPasswordVisible ? \"text\" : \"password\"}\n                                name=\"password\"\n                                className=\"form-group__input form-group__input--fullwidth\"\n                                value={values.password}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            />\n                            <div className=\"form-checkbox\">\n                                <InputComponent\n                                    type=\"checkbox\"\n                                    name=\"showPassword\"\n                                    onChange={(e) => {\n                                        if(e.currentTarget.checked) {\n                                            showPassword(true);\n                                        }\n                                        else {\n                                            showPassword(false);\n                                        }\n                                    }}\n                                />\n                                <label>Show Password</label>\n                            </div>\n                            {touched.password && <span className=\"message__error\">{errors.password}</span>}\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Tipe User</label>\n                            <select\n                                name=\"userType\"\n                                value={values.userType}\n                                onChange={(e) => {\n                                    setFieldValue(\"userType\", e.currentTarget.value);\n                                }}\n                            >\n                                <option value=\"CS\">CS</option>\n                                <option value=\"Co-Brand\">Co-Brand</option>\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Level User</label>\n                            <select\n                                name=\"userLevel\"\n                                value={values.userLevel}\n                                onChange={(e) => {\n                                    setFieldValue(\"userLevel\", e.currentTarget.value);\n                                }}\n                            >\n                                <option value=\"Super Admin\">Super Admin</option>\n                                <option value=\"Admin\">Admin</option>\n                                <option value=\"Editor\">Editor</option>\n                                <option value=\"Reporter\">Reporter</option>\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Email User</label>\n                            <InputComponent \n                                type=\"text\"\n                                name=\"emailUser\"\n                                className=\"form-group__input form-group__input--fullwidth\" \n                                placeholder=\"Example\"\n                                value={values.emailUser}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            />\n                            {touched.emailUser && <span className=\"message__error\">{errors.emailUser}</span>}\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Nomor Telepon</label>\n                            <InputComponent \n                                type=\"text\"\n                                name=\"phone\"\n                                className=\"form-group__input form-group__input--fullwidth\" \n                                placeholder=\"Example\"\n                                value={values.phone}\n                                onChange={(e) => {\n                                    const result = e.currentTarget.value.replace(/\\D/g, '');\n                                    setFieldValue(\"phone\", result);\n                                }}\n                                onBlur={handleBlur}\n                            />\n                            {touched.phone && <span className=\"message__error\">{errors.phone}</span>}\n                        </div>\n                        <div>\n                            <button className=\"btn btn-submit\" type=\"submit\" onClick={() => {\n                                console.log(values);\n                            }}>\n                                Tambah\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            )}\n            </Formik>\n            {console.log(isLoading)}\n            {isLoading ? <RKLoader/> : null}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    console.log(state.auth.isLoading);\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAddStaff: ( userName, password, userType, cobrandEmail, userLevel, emailUser, phone, history ) =>\n            dispatch(addStaff(  userName, password, userType, cobrandEmail, userLevel, emailUser, phone, history ))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (AddStaff)\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Heading.scss';\n\nfunction Heading({ headingName, routes = [] }) {\n    \n    return (\n        <div className=\"Heading\">\n            <h1>{headingName}</h1>\n            <ul className=\"Heading__breadcumb\">\n                {routes.length > 0 && routes.map((item, i) => {\n                    if(item.path){\n                        return <li className=\"Heading__breadcumb-item\" key={i}><NavLink exact to={item.path}>{item.name}</NavLink> </li>\n                    }else{\n                        return <li className=\"Heading__breadcumb-item\" key={i}> <span>{item.name}</span> </li>\n                    }\n                })}\n            </ul>\n        </div>\n    )\n}\n\nexport default Heading\n"],"sourceRoot":""}