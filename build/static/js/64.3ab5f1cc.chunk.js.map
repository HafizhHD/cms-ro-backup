{"version":3,"sources":["components/UI/Input/Input.js","helpers/validation/validation.js","assets/img/Logo_2.png","assets/img/device2.png","containers/CoBrand/Register/Register.js","components/UI/Help/LoginHelp/LoginHelp.js"],"names":["Input","placeholder","type","onChange","onBlur","value","className","message","name","min","max","disabled","isError","id","memo","PhoneRegex","validationFormLogin","yup","userName","required","password","validationFormRegister","email","accountName","cobrandName","thumbnail","test","img","includes","size","phoneNumber","matches","address","confirmPassword","when","schema","validationFormEdit","validationProgram","programName","programDescription","programThumbnail","startDate","endDate","category","targetAudiance","contentPrograms","of","namaTahapan","contentName","contents","answerKey","is","then","otherwise","validationProgramEdit","validationStepEdit","validationContent","contentDescription","contentSource","contentThumbnail","isActive","topics","targetAudience","validationContentEdit","validationUserEdit","nameUser","emailUser","birdDate","validationNotification","destination","messageSubject","messageContent","scheduleTime","mediaType","validationAudience","audianceName","validationNotifCategory","description","validationProgCategory","validationStaff","phone","validationContentTopic","topicName","validationScreenTime","controlParameterName","controlParameterValue","connect","state","isLoading","auth","dispatch","onRegister","history","registerAuth","useState","showHelp","setShowHelp","useHistory","LoginHelp","onClick","src","Logo","alt","DeviceImage","to","initialValues","validationSchema","validateOnChange","onSubmit","values","handleChange","handleBlur","handleSubmit","setFieldValue","touched","errors","Boolean","e","file","currentTarget","files","RKLoader"],"mappings":"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","file":"static/js/64.3ab5f1cc.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\nimport './Input.scss';\r\n\r\nfunction Input({\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    onBlur,\r\n    value,\r\n    className,\r\n    message,\r\n    name,\r\n    min,\r\n    max,\r\n    disabled,\r\n    isError\r\n}) {\r\n    if(type === \"textarea\") {\r\n        return (\r\n        <>\r\n            <textarea\r\n                name={name}\r\n                id={name}\r\n                className={className}\r\n                placeholder={placeholder}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                value={value}\r\n                disabled={disabled}\r\n            />\r\n            {isError && (\r\n                <div className=\"message\">\r\n                    <span className=\"message__error\">{message}</span>\r\n                </div>\r\n            )}\r\n        </>\r\n        )\r\n    }\r\n    else if(type === 'date' || type === 'datetime-local') {\r\n        return (\r\n            <>\r\n                <input\r\n                    name={name}\r\n                    className={className} \r\n                    type={type}\r\n                    placeholder={placeholder}\r\n                    onChange={onChange}\r\n                    onBlur={onBlur}\r\n                    value={value}\r\n                    min={min}\r\n                    max={\"9999-12-31\"}\r\n                    disabled={disabled}\r\n                />\r\n                {isError && (\r\n                    <div className=\"message\">\r\n                        <span className=\"message__error\">{message}</span>\r\n                    </div>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n    else if(type === 'number') {\r\n        return (\r\n            <>\r\n                <input\r\n                    name={name}\r\n                    className={className} \r\n                    type={type}\r\n                    onChange={onChange}\r\n                    onBlur={onBlur}\r\n                    value={value}\r\n                    min={min}\r\n                    max={max}\r\n                    disabled={disabled}\r\n                />\r\n                {isError && (\r\n                    <div className=\"message\">\r\n                        <span className=\"message__error\">{message}</span>\r\n                    </div>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n    else return (\r\n        <>\r\n            <input\r\n                name={name}\r\n                className={className} \r\n                type={type}\r\n                placeholder={placeholder}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                value={value}\r\n                disabled={disabled}\r\n            />\r\n            {isError && (\r\n                <div className=\"message\">\r\n                    <span className=\"message__error\">{message}</span>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Input) \r\n","import * as yup from 'yup';\r\n\r\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\r\nconst UserRegex = /^\\S*$/;\r\n\r\nexport const validationFormLogin = yup.object({\r\n    userName: yup.string('Enter your email').required('Email is required'),\r\n    password: yup.string('Enter your password').required('Password is required')\r\n})\r\n\r\nexport const validationFormRegister = yup.object({\r\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\r\n    accountName: yup.string('Enter your name').required('Name is required'),\r\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\r\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\r\n        .test(\r\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\r\n            (img) =>\r\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\r\n        )\r\n        .test(\r\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\r\n            (img) => {\r\n                if(img) {\r\n                    return img.size <= 2097152;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n        ),\r\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\r\n    address: yup.string('Enter your address').required('Address is required'),\r\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\r\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\r\n        .when('password', (password, schema) => {\r\n            return schema.test({\r\n                test: confirmPassword => password && confirmPassword === password,\r\n                message: \"Password doesn't match\"\r\n            })\r\n        })\r\n})\r\n\r\nexport const validationFormEdit = yup.object({\r\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\r\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\r\n    thumbnail: yup.mixed('Insert your image, 2 MB max')\r\n        .test(\r\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\r\n            (img) =>\r\n                (img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)) || (!img)\r\n        )\r\n        .test(\r\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\r\n            (img) => {\r\n                if(img) {\r\n                    return img.size <= 2097152;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n        ),\r\n        //buat nambahin misal upload background. apakah akan masuk kesini?\r\n        \r\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\r\n    address: yup.string('Enter your address').required('Address is required'),\r\n    password: yup.string('Enter your password').min(8, 'Password should be 8 characters or more'),\r\n    confirmPassword: yup.string('Confirm your password')\r\n        .when('password', (password, schema) => {\r\n            return schema.test({\r\n                test: confirmPassword => (password && confirmPassword === password) || !password,\r\n                message: \"Password doesn't match\"\r\n            })\r\n        })\r\n})\r\n\r\nexport const validationProgram = yup.object({\r\n    programName: yup.string('Enter your program title').required('Program title is required'),\r\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\r\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\r\n        .test(\r\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\r\n            (img) =>\r\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\r\n        )\r\n        .test(\r\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\r\n            (img) => {\r\n                if(img) {\r\n                    return img.size <= 2097152;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n        ),\r\n    startDate: yup.date('Insert start date').required('Date is required'),\r\n    endDate: yup.date('Insert end date').required('Date is required'),\r\n    category: yup.string(),\r\n    targetAudiance: yup.array().min(1, 'Pilih minimal 1'),\r\n    contentPrograms: yup.array().min(1).of(\r\n        yup.object({\r\n            namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\r\n            contentName: yup.string().required('Judul Tahapan harus diisi'),\r\n            contents: yup.string().required('Isi Tahapan harus diisi'),\r\n            startDate: yup.date('Insert start date').required('Date is required'),\r\n            endDate: yup.date('Insert end date').required('Date is required'),\r\n            answerKey: yup.string().when('category', {\r\n                is: 'Ujian',\r\n                then: yup.string().required('Kunci Jawaban harus diisi'),\r\n                otherwise: yup.string()\r\n            })\r\n        })\r\n    )\r\n})\r\n\r\nexport const validationProgramEdit = yup.object({\r\n    programName: yup.string('Enter your program title').required('Program title is required'),\r\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\r\n    startDate: yup.date('Insert start date').required('Date is required')\r\n});\r\n\r\nexport const validationStepEdit = yup.object({\r\n    namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\r\n    contentName: yup.string().required('Judul Tahapan harus diisi'),\r\n    contents: yup.string().required('Isi Tahapan harus diisi'),\r\n});\r\n\r\nexport const validationContent = yup.object({\r\n    contentName: yup.string('Enter your content title').required('Content title is required'),\r\n    contentDescription: yup.string('Enter the content description'),\r\n    contents: yup.string('Enter the content description').required('Content is required'),\r\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\r\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\r\n        .test(\r\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\r\n            (img) =>\r\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\r\n        )\r\n        .test(\r\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\r\n            (img) => {\r\n                if(img) {\r\n                    return img.size <= 2097152;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n        ),\r\n    startDate: yup.date('Insert start date').required('Date is required'),\r\n    endDate: yup.date('Insert end date').required('Date is required'),\r\n    isActive: yup.boolean(),\r\n    topics: yup.array().min(1),\r\n    targetAudience: yup.array().min(1)\r\n})\r\n\r\nexport const validationContentEdit = yup.object({\r\n    contentName: yup.string('Enter your content title').required('Content title is required'),\r\n    contentDescription: yup.string('Enter the content description'),\r\n    contents: yup.string('Enter the content description').required('Content is required'),\r\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\r\n    startDate: yup.date('Insert start date').required('Date is required')\r\n});\r\n\r\nexport const validationUserEdit = yup.object({\r\n    nameUser: yup.string('Enter your content title').required('User name is required'),\r\n    emailUser: yup.string('Enter the content description').required('Email is required').email('Email not valid'),\r\n    birdDate: yup.date('Insert start date').required('Date is required')\r\n})\r\n\r\nexport const validationNotification = yup.object({\r\n    destination: yup.array().min(1),\r\n    messageSubject: yup.string('Enter the message subject').required('Message Subject is required'),\r\n    messageContent: yup.string('Enter the message content').required('Message Content is required'),\r\n    scheduleTime: yup.date('Insert start date').required('Date is required'),\r\n    mediaType: yup.string('Enter the media type').required('Media type is required'),\r\n    category: yup.string('Enter the category').required('Category is required')\r\n})\r\n\r\nexport const validationAudience = yup.object({\r\n    audianceName: yup.string('Enter your audience name').required('Audience Name is required')\r\n})\r\n\r\nexport const validationNotifCategory = yup.object({\r\n    category: yup.string('Enter category name').required('Category is required'),\r\n    description: yup.string('Enter description').required('Description is required')\r\n})\r\n\r\nexport const validationProgCategory = yup.object({\r\n    category: yup.string('Enter category name').required('Category is required'),\r\n    description: yup.string('Enter description').required('Description is required')\r\n})\r\n\r\nexport const validationStaff = yup.object({\r\n    emailUser: yup.string('Enter your email').required('Email is required').email('Email not valid'),\r\n    userName: yup.string('Enter your name').required('Name is required').matches(UserRegex, 'Invalid username format'),\r\n    phone: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\r\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more')\r\n})\r\n\r\nexport const validationContentTopic = yup.object({\r\n    topicName: yup.string('Enter topic name').required('Topic Name is required')\r\n})\r\n\r\nexport const validationScreenTime = yup.object({\r\n    controlParameterName: yup.string('Enter category name').required('Category is required'),\r\n    controlParameterValue: yup.number().required('Number is required')\r\n})","export default __webpack_public_path__ + \"static/media/Logo_2.17216ad5.png\";","export default __webpack_public_path__ + \"static/media/device2.69f8ea4a.png\";","import React, { useState } from 'react';\r\nimport { NavLink, useHistory } from 'react-router-dom';\r\nimport './Register.scss';\r\nimport Logo from './../../../assets/img/Logo_2.png'\r\nimport DeviceImage from './../../../assets/img/device2.png';\r\nimport InputComponent from '../../../components/UI/Input/Input';\r\nimport RKLoader from '../../../components/UI/RKLoader/RKLoader';\r\nimport { Formik } from 'formik';\r\nimport { validationFormRegister } from './../../../helpers/validation/validation';\r\nimport { connect } from 'react-redux';\r\nimport { registerAuth } from './../../../store/actions/auth';\r\nimport LoginHelp from '../../../components/UI/Help/LoginHelp/LoginHelp';\r\nimport { FiHelpCircle, FiXCircle } from 'react-icons/fi'\r\n\r\nfunction Register({\r\n    onRegister,\r\n    isLoading\r\n}) {\r\n    const [showHelp, setShowHelp] = useState(false);\r\n\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <>\r\n            {showHelp ? <LoginHelp /> : null}\r\n            {showHelp ? (\r\n                <button \r\n                    className=\"CloseHelp\"\r\n                    onClick={() => {\r\n                    setShowHelp(false);\r\n                }}><FiXCircle/> </button>\r\n            ) : null}\r\n            <div className=\"RegisterBg\">\r\n            <div className=\"Register\">\r\n                <div className=\"Register-top\">\r\n                    <img src={Logo} className=\"Register-top-img\" alt=\"logo top\" />\r\n                </div>\r\n             \r\n                <div className=\"Register-middle\">\r\n                        <div className=\"Register-middle-left\">\r\n                            <img \r\n                                src={DeviceImage} \r\n                                alt=\"Device \" \r\n                                className=\"Register-middle-left-img\"\r\n                            />\r\n                            <NavLink\r\n                                to=\"/register\" \r\n                                className=\"Register-middle-left-help\"\r\n                                onClick={() => {\r\n                                setShowHelp(true);\r\n                            }}><FiHelpCircle/>  Bantuan</NavLink>\r\n                        </div>\r\n                        <div className=\"Register-middle-right\">\r\n                            <div className=\"Register-middle-right-heading mb-small\">\r\n                                <h1>Daftarkan Brand Anda.</h1>\r\n                            </div>\r\n                            <Formik\r\n                                initialValues= {{\r\n                                    email: '',\r\n                                    password: '',\r\n                                    confirmPassword: '',\r\n                                    accountName: '',\r\n                                    cobrandName: '',\r\n                                    phoneNumber: '',\r\n                                    address: '',\r\n                                    thumbnail: ''\r\n                                }}\r\n                                validationSchema = {validationFormRegister}\r\n                                validateOnChange = {true}\r\n                                onSubmit = {values => {\r\n                                    onRegister( values.email, values.accountName, values.cobrandName, values.thumbnail, values.phoneNumber,\r\n                                        values.address, values.password, values.confirmPassword, history)\r\n                                }}\r\n                            >\r\n                            {({handleChange, handleBlur, handleSubmit, setFieldValue, touched, values, errors}) => (\r\n                                <form className=\"Register-middle-right-form\" onSubmit={handleSubmit}>\r\n                                    <InputComponent \r\n                                        placeholder=\"Your E-mail (example@mail.com)\"\r\n                                        type=\"text\"\r\n                                        name=\"email\"\r\n                                        onChange={handleChange}\r\n                                        value={values.email}\r\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\r\n                                        onBlur={handleBlur}\r\n                                        isError={touched.email && Boolean(errors.email) }\r\n                                        message={touched.email && errors.email}\r\n                                    />\r\n                                    <InputComponent \r\n                                        placeholder=\"Password\"\r\n                                        type=\"password\"\r\n                                        name=\"password\"\r\n                                        onChange={handleChange}\r\n                                        value={values.password}\r\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\r\n                                        onBlur={handleBlur}\r\n                                        isError={touched.password && Boolean(errors.password) }\r\n                                        message={touched.password && errors.password}\r\n                                    />\r\n                                    <InputComponent \r\n                                        placeholder=\"Confirm Password\"\r\n                                        type=\"password\"\r\n                                        name=\"confirmPassword\"\r\n                                        onChange={handleChange}\r\n                                        value={values.confirmPassword}\r\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\r\n                                        onBlur={handleBlur}\r\n                                        isError={touched.confirmPassword && Boolean(errors.confirmPassword) }\r\n                                        message={touched.confirmPassword && errors.confirmPassword}\r\n                                    />\r\n                                    <InputComponent \r\n                                        placeholder=\"Your Name\"\r\n                                        type=\"text\"\r\n                                        name=\"accountName\"\r\n                                        onChange={handleChange}\r\n                                        value={values.accountName}\r\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\r\n                                        onBlur={handleBlur}\r\n                                        isError={touched.accountName && Boolean(errors.accountName) }\r\n                                        message={touched.accountName && errors.accountName}\r\n                                    />\r\n                                    <InputComponent \r\n                                        placeholder=\"Your Brand Name\"\r\n                                        type=\"text\"\r\n                                        name=\"cobrandName\"\r\n                                        onChange={handleChange}\r\n                                        value={values.cobrandName}\r\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\r\n                                        onBlur={handleBlur}\r\n                                        isError={touched.cobrandName && Boolean(errors.cobrandName) }\r\n                                        message={touched.cobrandName && errors.cobrandName}\r\n                                    />\r\n                                    <InputComponent \r\n                                        placeholder=\"Phone Number\"\r\n                                        type=\"text\"\r\n                                        name=\"phoneNumber\"\r\n                                        onChange={handleChange}\r\n                                        value={values.phoneNumber}\r\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\r\n                                        onBlur={handleBlur}\r\n                                        isError={touched.phoneNumber && Boolean(errors.phoneNumber) }\r\n                                        message={touched.phoneNumber && errors.phoneNumber}\r\n                                    />\r\n                                    <InputComponent \r\n                                        placeholder=\"Address\"\r\n                                        type=\"textarea\"\r\n                                        name=\"address\"\r\n                                        onChange={handleChange}\r\n                                        value={values.address}\r\n                                        className=\"Input-control Input-control-big Input-control__with-focus mb-tiny\"\r\n                                        onBlur={handleBlur}\r\n                                        isError={touched.address && Boolean(errors.address) }\r\n                                        message={touched.address && errors.address}\r\n                                    />\r\n                                    <label>Photo</label>\r\n                                    <InputComponent \r\n                                        placeholder=\"Photo\"\r\n                                        type=\"file\"\r\n                                        name=\"thumbnail\"\r\n                                        onChange={(e) => {\r\n                                            let file = e.currentTarget.files[0];\r\n                                            if(file) {\r\n                                            // console.log(\"File to upload: \", file);\r\n                                            setFieldValue(\"thumbnail\", file);\r\n                                            }\r\n                                        }}\r\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\r\n                                        onBlur={handleBlur}\r\n                                        isError={touched.thumbnail && Boolean(errors.thumbnail) }\r\n                                        message={touched.thumbnail && errors.thumbnail}\r\n                                    />\r\n                                    <button\r\n                                        className=\"btn btn-register\"\r\n                                        type=\"submit\"\r\n                                    >\r\n                                        Sign up\r\n                                    </button>\r\n                                </form>\r\n                            )}\r\n                            </Formik>\r\n                            <p className=\"Register-middle-right-joinus\">Sudah punya akun? <NavLink to=\"/\">Klik untuk masuk</NavLink> </p>\r\n                        </div>\r\n                    </div> \r\n                \r\n                {isLoading && (\r\n                    <RKLoader />\r\n                )}\r\n                <div className=\"Register-bottom\"></div>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoading: state.auth.isLoading\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onRegister: ( email, accountName, cobrandName, thumbnail, phoneNumber, address, password, confirmPassword, history ) =>\r\n            dispatch( registerAuth( email, accountName, cobrandName, thumbnail, phoneNumber, address, password, confirmPassword, history )  )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Register)\r\n","import React from 'react';\r\nimport './LoginHelp.scss';\r\n\r\nfunction LoginHelp() {\r\n    return (\r\n        <div className=\"HelpOverlay\">\r\n            <div className=\"HelpOverlay-content\">\r\n                <h1>Guide Co-Brand Ruang Ortu</h1>\r\n                <h2>Registrasi</h2>\r\n                <p>Pada halaman utama (Login), klik pada tulisan <span className=\"HelpOverlay-content-keyword\">Daftar Sekarang</span> untuk masuk ke halaman registrasi. Pada halaman registrasi, Anda harus mengisi delapan kolom yang disediakan, yaitu:</p>\r\n                <p><br/></p>\r\n                <ol>\r\n                    <li>E-Mail</li>\r\n                    <li>Password</li>\r\n                    <li>Confirm Password (isi harus sama dengan password)</li>\r\n                    <li>Your Name (Nama Anda)</li>\r\n                    <li>Your Brand Name (Nama Brand Anda)</li>\r\n                    <li>Phone Number (Nomor Telepon yang terhubung dengan Brand Anda)</li>\r\n                    <li>Address (Alamat Brand Anda)</li>\r\n                    <li>Photo (Foto atau Gambar Logo dari Brand Anda)</li>\r\n                </ol>\r\n                <p><br/></p>\r\n                <p>Setelah mengisi delapan kolom di atas, klik <span className=\"HelpOverlay-content-keyword\">Sign Up</span> untuk mendaftarkan Brand Anda. Jika berhasil, Anda akan dialihkan ke halaman <span className=\"HelpOverlay-content-keyword\">Login</span> untuk masuk.</p>\r\n                <p><br/></p>\r\n                <p><br/></p>\r\n                <h2>Login</h2>\r\n                <p>Pada halaman login, masukkan e-mail dan password yang telah dibuat pada saat registrasi. Lalu, klik tombol <span className=\"HelpOverlay-content-keyword\">Login</span>. Jika berhasil, Anda akan dialihkan ke halaman Dashboard.</p>   \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginHelp"],"sourceRoot":""}