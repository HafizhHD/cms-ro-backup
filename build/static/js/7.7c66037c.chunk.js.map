{"version":3,"sources":["store/actions/webMainUtils.js","containers/CoBrand/Content/AddContent/AddContent.js","components/UI/Heading/Heading.js","components/UI/Input/Input.js","helpers/validation/validation.js"],"names":["authStart","type","AUTH_START","authFailed","AUTH_FAILED","addProgram","cobrandEmail","programName","ProgramDescription","photo","startDate","history","dispatch","toBase64","then","result","console","log","programthumnail","setTimeout","data","axios","method","url","headers","response","push","catch","error","addContent","programId","contentName","contentDescription","contentType","contentSource","contents","contentThumbnail","connect","state","auth","isLoading","onAddContent","useState","isPageLoading","setPageLoading","programList","setProgramList","useHistory","JSON","parse","localStorage","getItem","email","params","whereKeyValues","useEffect","programs","headingName","routes","path","name","initialValues","validationSchema","validationContent","validateOnChange","onSubmit","values","handleChange","handleSubmit","setFieldValue","errors","className","value","onChange","disabled","map","program","_id","placeholder","e","file","currentTarget","files","Heading","length","item","i","exact","to","Input","onBlur","message","isError","id","memo","validationFormLogin","yup","required","password","validationFormRegister","accountName","cobrandName","thumbnail","test","img","includes","size","phoneNumber","matches","address","min","confirmPassword","when","schema","validationProgram","programDescription","programThumbnail"],"mappings":"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","file":"static/js/7.7c66037c.chunk.js","sourcesContent":["import {\n    AUTH_SUCCESS,\n    AUTH_START,\n    AUTH_FAILED,\n    AUTH_LOGOUT\n} from './actionTypes';\nimport axios from 'axios';\nimport { toBase64 } from '../../helpers/fileHelper/fileHelper';\n\nexport const authStart = () => ({ type: AUTH_START });\nexport const authFailed = () => ({ type: AUTH_FAILED });\nexport const authSuccess = () => ({ type: AUTH_SUCCESS })\n\nexport const addProgram = ( cobrandEmail, programName, ProgramDescription, photo, startDate, history ) => {\n    return dispatch => {\n        dispatch( authStart() );\n\n        const promise = toBase64(photo);\n        promise.then((result) => {\n            console.log(typeof result);\n            const programthumnail = result;\n\n            setTimeout( () => {\n                let data = {\n                    cobrandEmail,\n                    programName,\n                    ProgramDescription,\n                    programthumnail,\n                    startDate\n                };\n\n                console.log(data);\n                //Call API ....\n                \n                axios({\n                    method: 'post',\n                    url: 'https://rk.defghi.biz.id:8080/api/cobrand/programAdd',\n                    data: data,\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                })\n                .then(response => {\n                    console.log('Success:', response.data);\n                    history.push('/program');\n                })\n                .catch((error) => {\n                    console.error('Error:', error);\n                });\n                console.log(data);\n                dispatch(authFailed());\n            },2000)\n        });\n    }\n\n}\n\nexport const addContent = ( cobrandEmail, programId, contentName, contentDescription, contentType, contentSource, photo, contents, startDate, history ) => {\n    return dispatch => {\n        dispatch( authStart() );\n\n        const promise = toBase64(photo);\n        promise.then((result) => {\n            console.log(typeof result);\n            const contentThumbnail = result;\n\n            setTimeout( () => {\n                let data = {\n                    cobrandEmail,\n                    programId,\n                    contentName,\n                    contentDescription,\n                    contentType,\n                    contentSource,\n                    contentThumbnail,\n                    contents,\n                    startDate\n                };\n\n                console.log(data);\n                //Call API ....\n                \n                axios({\n                    method: 'post',\n                    url: 'https://rk.defghi.biz.id:8080/api/cobrand/contentAdd',\n                    data: data,\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                })\n                .then(response => {\n                    console.log('Success:', response.data);\n                    history.push('/content');\n                })\n                .catch((error) => {\n                    console.error('Error:', error);\n                });\n                console.log(data);\n                dispatch(authFailed());\n            },2000)\n        });\n    }\n\n}","import React, { useState, useEffect } from 'react';\nimport Heading from '../../../../components/UI/Heading/Heading';\nimport './AddContent.scss';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport { addContent } from '../../../../store/actions/webMainUtils';\nimport RKLoader from '../../../../components/UI/RKLoader/RKLoader';\nimport { connect } from 'react-redux';\nimport { validationContent } from '../../../../helpers/validation/validation';\nimport InputComponent from '../../../../components/UI/Input/Input';\nimport axios from 'axios';\n\nfunction AddContent({\n    onAddContent,\n    isLoading\n}) {\n\n    const [isPageLoading, setPageLoading] = useState(true);\n    const [programList, setProgramList] = useState();\n    const history = useHistory();\n    const cobrandEmail = JSON.parse(localStorage.getItem('userData')).email;\n\n    const params = {\n        whereKeyValues: {\n            cobrandEmail: cobrandEmail\n        }\n    };\n\n    useEffect(() => {\n        axios({\n            method: 'post',\n            url: 'https://rk.defghi.biz.id:8080/api/cobrand/programFilter',\n            data: params,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n        .then(response => {\n            console.log(\"Program list: \", response.data);\n            setProgramList(response.data.programs);\n            setPageLoading(false);\n        })\n        .catch(error => {\n            console.log(error);\n            setPageLoading(false);\n        });\n    }, []);\n\n    if(isPageLoading) {\n        return <RKLoader/>\n    }\n\n    return (\n        <>\n            <Heading headingName=\"Content\" routes={[\n                { path: '/content', name: 'Content' },\n                { path: '/content/add', name: 'Create new content' }\n            ]} />\n            <Formik\n                initialValues= {{\n                    programId: '',\n                    contentName: '',\n                    contentDescription: '',\n                    contentType: '',\n                    contentSource: '',\n                    contentThumbnail: '',\n                    contents: '',\n                    startDate: ''\n                }}\n                validationSchema = {validationContent}\n                validateOnChange = {true}\n                onSubmit = { values => {\n                    onAddContent( cobrandEmail, values.programId, values.contentName, values.contentDescription, values.contentType, values.contentSource, values.contentThumbnail, values.contents, values.startDate, history)\n                }}\n            >\n            {({handleChange, handleSubmit, setFieldValue, values, errors}) => (\n                <form onSubmit={handleSubmit}>\n                    <div className=\"AddContent\">\n                        <h1>Create New Content</h1>\n                        <div className=\"form-group\">\n                            <label>Content Type</label>\n                            <select\n                                name=\"contentType\"\n                                value={values.contentType}\n                                onChange={handleChange}\n                            >\n                                <option value=\"\" disabled>--Select Content Type--</option>\n                                <option value=\"Artikel\">Artikel</option>\n                                <option value=\"Lomba\">Lomba</option>\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Program Name</label>\n                            <select\n                                name=\"programId\"\n                                value={values.programId}\n                                onChange={handleChange}\n                            >\n                                <option value=\"\">(Tanpa Program)</option>\n                                {\n                                    programList.map((program) => {\n                                        return (\n                                            <option value={program._id}>{program.programName}</option>\n                                        )\n                                    })\n                                }\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Title</label>\n                            <InputComponent \n                                type=\"text\"\n                                name=\"contentName\"\n                                className=\"form-group__input form-group__input--fullwidth\" \n                                placeholder=\"Example\"\n                                value={values.contentName}\n                                onChange={handleChange}\n                            />\n                            <span className=\"message__error\">{errors.contentName}</span>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Description</label>\n                            <InputComponent\n                                type=\"textarea\"\n                                name=\"contentDescription\"\n                                placeholder=\"Type Something...\"\n                                value={values.contentDescription}\n                                onChange={handleChange}\n                            />\n                        </div>\n                        <span className=\"message__error\">{errors.contentDescription}</span>\n                        <div className=\"form-group\">\n                            <label>Source</label>\n                            <InputComponent \n                                type=\"text\"\n                                name=\"contentSource\"\n                                className=\"form-group__input form-group__input--fullwidth\" \n                                placeholder=\"Example\"\n                                value={values.contentSource}\n                                onChange={handleChange}\n                            />\n                            <span className=\"message__error\">{errors.contentSource}</span>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Photo</label>\n                            <InputComponent\n                                type=\"file\"\n                                className=\"form-group__input\"\n                                name=\"contentThumbnail\"\n                                onChange={(e) => {\n                                    let file = e.currentTarget.files[0];\n                                    if(file) {\n                                        console.log(\"File to upload: \", file);\n                                        setFieldValue(\"contentThumbnail\", file);\n                                    }\n                                }}\n                            />\n                            <span className=\"message__error\">{errors.contentThumbnail}</span>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Contents</label>\n                            <InputComponent\n                                type=\"textarea\"\n                                name=\"contents\"\n                                placeholder=\"Type Something...\"\n                                value={values.contents}\n                                onChange={handleChange}\n                            />\n                            <span className=\"message__error\">{errors.contents}</span>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Set Schedule</label>\n                            <InputComponent\n                                type=\"date\"\n                                className=\"form-group__input\"\n                                name=\"startDate\"\n                                value={values.startDate}\n                                onChange={handleChange}\n                            />\n                            <span className=\"message__error\">{errors.startDate}</span>\n                        </div>\n                        <div>\n                            <button className=\"btn\" type=\"submit\">\n                                Post Content\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            )}\n            </Formik>\n            {console.log(isLoading)}\n            {isLoading ? <RKLoader/> : null}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    console.log(state.auth.isLoading);\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAddContent: ( cobrandEmail, programId, contentName, contentDescription, contentType, contentSource, contentThumbnail, contents, startDate, history) =>\n            dispatch(addContent( cobrandEmail, programId, contentName, contentDescription, contentType, contentSource, contentThumbnail, contents, startDate, history))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (AddContent)\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Heading.scss';\n\nfunction Heading({ headingName, routes = [] }) {\n    \n    return (\n        <div className=\"Heading\">\n            <h1>{headingName}</h1>\n            <ul className=\"Heading__breadcumb\">\n                {routes.length > 0 && routes.map((item, i) => {\n                    if(item.path){\n                        return <li className=\"Heading__breadcumb-item\" key={i}><NavLink exact to={item.path}>{item.name}</NavLink> </li>\n                    }else{\n                        return <li className=\"Heading__breadcumb-item\" key={i}> <span>{item.name}</span> </li>\n                    }\n                })}\n            </ul>\n        </div>\n    )\n}\n\nexport default Heading\n","import React, { memo } from 'react';\nimport './Input.scss';\n\nfunction Input({\n    placeholder,\n    type,\n    onChange,\n    onBlur,\n    value,\n    className,\n    message,\n    name,\n    isError\n}) {\n    if(type === \"textarea\") {\n        return (\n        <>\n            <textarea\n                name={name}\n                id={name}\n                className={className}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n        )\n    }\n    else return (\n    <>\n        <input\n            name={name}\n            className={className} \n            type={type}\n            placeholder={placeholder}\n            onChange={onChange}\n            onBlur={onBlur}\n            value={value}\n        />\n        {isError && (\n            <div className=\"message\">\n                <span className=\"message__error\">{message}</span>\n            </div>\n        )}\n    </>\n    )\n}\n\nexport default memo(Input) \n","import * as yup from 'yup';\n\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\n\nexport const validationFormLogin = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    password: yup.string('Enter your password').required('Password is required')\n})\n\nexport const validationFormRegister = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    accountName: yup.string('Enter your name').required('Name is required'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => password && confirmPassword === password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationProgram = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationContent = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description').required('Content description is required'),\n    contents: yup.string('Enter the content description').required('Content description is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required')\n})"],"sourceRoot":""}