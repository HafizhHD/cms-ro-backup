{"version":3,"sources":["assets/img/device.png","containers/CoBrand/Login/Login.js","components/UI/Input/Input.js","helpers/validation/validation.js"],"names":["connect","state","isLoading","auth","dispatch","onLogin","email","password","formik","useFormik","initialValues","validationSchema","validationFormLogin","onSubmit","values","className","src","Logo","alt","DeviceImage","handleSubmit","placeholder","type","name","onChange","handleChange","value","isError","touched","Boolean","errors","message","to","Input","onBlur","id","memo","yup","required","validationFormRegister","accountName","cobrandName","thumbnail","test","img","includes","size","phoneNumber","matches","address","min","confirmPassword","when","schema","validationProgram","programName","programDescription","programThumbnail","startDate","validationProgramEdit","validationContent","contentName","contentDescription","contents","contentSource","contentThumbnail","validationContentEdit"],"mappings":"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","file":"static/js/12.ae993164.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/device.68ed995d.png\";","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Login.scss';\nimport Logo from './../../../assets/img/Logo_1.png'\nimport DeviceImage from './../../../assets/img/device.png';\nimport InputComponent from '../../../components/UI/Input/Input';\nimport RKLoader from '../../../components/UI/RKLoader/RKLoader';\nimport { useFormik } from 'formik';\nimport { validationFormLogin } from './../../../helpers/validation/validation';\nimport { connect } from 'react-redux';\nimport { auth } from './../../../store/actions/auth';\n\nfunction Login({\n    onLogin,\n    isLoading\n}) {\n\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: ''\n        },\n        validationSchema: validationFormLogin,\n        onSubmit: values => {\n            onLogin( values.email, values.password )\n        }\n    })\n\n    return (\n        <>\n            <div className=\"LoginBg\">\n            <div className=\"Login\">\n                <div className=\"Login-top\">\n                    <img src={Logo} className=\"Login-top-img\" alt=\"logo top\" />\n                </div>\n             \n                <div className=\"Login-middle\">\n                        <div className=\"Login-middle-left\">\n                            <img \n                                src={DeviceImage} \n                                alt=\"Device \" \n                                className=\"Login-middle-left-img\"\n                            />\n                        </div>\n                        <div className=\"Login-middle-right\">\n                            <div className=\"Login-middle-right-heading mb-small\">\n                                <h1>Mulai Kelola Pelanggan Anda Sekarang.</h1>\n                            </div>\n                            <form className=\"Login-middle-right-form\" onSubmit={formik.handleSubmit}>\n                                <InputComponent \n                                    placeholder=\"example@mail.com\"\n                                    type=\"text\"\n                                    name=\"email\"\n                                    onChange={formik.handleChange}\n                                    value={formik.values.email}\n                                    className=\"Input-control Input-control__with-focus mb-tiny\"\n                                    isError={formik.touched.email && Boolean(formik.errors.email) }\n                                    message={formik.touched.email && formik.errors.email}\n                                />\n                                <InputComponent \n                                    placeholder=\"Password\"\n                                    type=\"password\"\n                                    name=\"password\"\n                                    onChange={formik.handleChange}\n                                    value={formik.values.password}\n                                    className=\"Input-control Input-control__with-focus mb-tiny\"\n                                    isError={formik.touched.password && Boolean(formik.errors.password)}\n                                    message={formik.touched.password && formik.errors.password}\n                                />\n                                <button\n                                    className=\"btn btn-login\"\n                                    type=\"submit\"\n                                >\n                                    Sign in\n                                </button>\n                            </form>\n                            <p className=\"Login-middle-right-joinus\">Ingin bermitra dengan kami? <NavLink to=\"/register\">Daftar Sekarang</NavLink> </p>\n                        </div>\n                    </div> \n                \n                {isLoading && (\n                    <RKLoader />\n                )}\n                <div className=\"Login-bottom\"></div>\n            </div>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onLogin: (email, password) => dispatch( auth( email, password )  )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Login)\n","import React, { memo } from 'react';\nimport './Input.scss';\n\nfunction Input({\n    placeholder,\n    type,\n    onChange,\n    onBlur,\n    value,\n    className,\n    message,\n    name,\n    isError\n}) {\n    if(type === \"textarea\") {\n        return (\n        <>\n            <textarea\n                name={name}\n                id={name}\n                className={className}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n        )\n    }\n    else return (\n    <>\n        <input\n            name={name}\n            className={className} \n            type={type}\n            placeholder={placeholder}\n            onChange={onChange}\n            onBlur={onBlur}\n            value={value}\n        />\n        {isError && (\n            <div className=\"message\">\n                <span className=\"message__error\">{message}</span>\n            </div>\n        )}\n    </>\n    )\n}\n\nexport default memo(Input) \n","import * as yup from 'yup';\n\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\n\nexport const validationFormLogin = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    password: yup.string('Enter your password').required('Password is required')\n})\n\nexport const validationFormRegister = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    accountName: yup.string('Enter your name').required('Name is required'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => password && confirmPassword === password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationProgram = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationProgramEdit = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationContent = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description').required('Content description is required'),\n    contents: yup.string('Enter the content description').required('Content description is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationContentEdit = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description').required('Content description is required'),\n    contents: yup.string('Enter the content description').required('Content description is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n})"],"sourceRoot":""}