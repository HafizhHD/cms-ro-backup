{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/UI/Input/Input.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","containers/CoBrand/Register/Register.js","helpers/validation/validation.js","../node_modules/webpack/buildin/module.js","assets/img/device2.png","components/UI/Help/LoginHelp/LoginHelp.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","TypeError","Input","placeholder","type","onChange","onBlur","value","className","message","name","min","disabled","isError","id","max","memo","_iterableToArray","iter","Symbol","iterator","Object","from","connect","state","isLoading","auth","dispatch","onRegister","email","accountName","cobrandName","thumbnail","phoneNumber","address","password","confirmPassword","history","registerAuth","useState","showHelp","setShowHelp","useHistory","onClick","src","Logo","alt","DeviceImage","to","initialValues","validationSchema","validationFormRegister","validateOnChange","onSubmit","values","handleChange","handleBlur","handleSubmit","setFieldValue","touched","errors","Boolean","e","file","currentTarget","files","console","log","PhoneRegex","validationFormLogin","yup","required","test","img","includes","size","matches","when","schema","validationFormEdit","validationProgram","programName","programDescription","programThumbnail","startDate","validationProgramEdit","validationContent","contentName","contentDescription","contents","contentSource","contentThumbnail","endDate","isActive","topics","targetAudience","validationContentEdit","module","exports","webpackPolyfill","deprecate","paths","children","defineProperty","enumerable","get","l","i","LoginHelp","_classCallCheck","instance","Constructor","_defineProperties","target","props","length","descriptor","configurable","writable","key","_createClass","protoProps","staticProps","prototype"],"mappings":"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","file":"static/js/19.533268f6.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { memo } from 'react';\nimport './Input.scss';\n\nfunction Input({\n    placeholder,\n    type,\n    onChange,\n    onBlur,\n    value,\n    className,\n    message,\n    name,\n    min,\n    disabled,\n    isError\n}) {\n    if(type === \"textarea\") {\n        return (\n        <>\n            <textarea\n                name={name}\n                id={name}\n                className={className}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n        )\n    }\n    else if(type === 'date') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    placeholder={placeholder}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                    max={\"9999-12-31\"}\n                    disabled={disabled}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else return (\n        <>\n            <input\n                name={name}\n                className={className} \n                type={type}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default memo(Input) \n","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import React, { useState } from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport './Register.scss';\nimport Logo from './../../../assets/img/Logo_2.png'\nimport DeviceImage from './../../../assets/img/device2.png';\nimport InputComponent from '../../../components/UI/Input/Input';\nimport RKLoader from '../../../components/UI/RKLoader/RKLoader';\nimport { Formik } from 'formik';\nimport { validationFormRegister } from './../../../helpers/validation/validation';\nimport { connect } from 'react-redux';\nimport { registerAuth } from './../../../store/actions/auth';\nimport LoginHelp from '../../../components/UI/Help/LoginHelp/LoginHelp';\nimport { FiHelpCircle, FiXCircle } from 'react-icons/fi'\n\nfunction Register({\n    onRegister,\n    isLoading\n}) {\n    const [showHelp, setShowHelp] = useState(false);\n\n    const history = useHistory();\n\n    return (\n        <>\n            {showHelp ? <LoginHelp /> : null}\n            {showHelp ? (\n                <button \n                    className=\"CloseHelp\"\n                    onClick={() => {\n                    setShowHelp(false);\n                }}><FiXCircle/> </button>\n            ) : null}\n            <div className=\"RegisterBg\">\n            <div className=\"Register\">\n                <div className=\"Register-top\">\n                    <img src={Logo} className=\"Register-top-img\" alt=\"logo top\" />\n                </div>\n             \n                <div className=\"Register-middle\">\n                        <div className=\"Register-middle-left\">\n                            <img \n                                src={DeviceImage} \n                                alt=\"Device \" \n                                className=\"Register-middle-left-img\"\n                            />\n                            <NavLink\n                                to=\"/register\" \n                                className=\"Register-middle-left-help\"\n                                onClick={() => {\n                                setShowHelp(true);\n                            }}><FiHelpCircle/>  Bantuan</NavLink>\n                        </div>\n                        <div className=\"Register-middle-right\">\n                            <div className=\"Register-middle-right-heading mb-small\">\n                                <h1>Daftarkan Brand Anda.</h1>\n                            </div>\n                            <Formik\n                                initialValues= {{\n                                    email: '',\n                                    password: '',\n                                    confirmPassword: '',\n                                    accountName: '',\n                                    cobrandName: '',\n                                    phoneNumber: '',\n                                    address: '',\n                                    thumbnail: ''\n                                }}\n                                validationSchema = {validationFormRegister}\n                                validateOnChange = {true}\n                                onSubmit = {values => {\n                                    onRegister( values.email, values.accountName, values.cobrandName, values.thumbnail, values.phoneNumber,\n                                        values.address, values.password, values.confirmPassword, history)\n                                }}\n                            >\n                            {({handleChange, handleBlur, handleSubmit, setFieldValue, touched, values, errors}) => (\n                                <form className=\"Register-middle-right-form\" onSubmit={handleSubmit}>\n                                    <InputComponent \n                                        placeholder=\"Your E-mail (example@mail.com)\"\n                                        type=\"text\"\n                                        name=\"email\"\n                                        onChange={handleChange}\n                                        value={values.email}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.email && Boolean(errors.email) }\n                                        message={touched.email && errors.email}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Password\"\n                                        type=\"password\"\n                                        name=\"password\"\n                                        onChange={handleChange}\n                                        value={values.password}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.password && Boolean(errors.password) }\n                                        message={touched.password && errors.password}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Confirm Password\"\n                                        type=\"password\"\n                                        name=\"confirmPassword\"\n                                        onChange={handleChange}\n                                        value={values.confirmPassword}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.confirmPassword && Boolean(errors.confirmPassword) }\n                                        message={touched.confirmPassword && errors.confirmPassword}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Your Name\"\n                                        type=\"text\"\n                                        name=\"accountName\"\n                                        onChange={handleChange}\n                                        value={values.accountName}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.accountName && Boolean(errors.accountName) }\n                                        message={touched.accountName && errors.accountName}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Your Brand Name\"\n                                        type=\"text\"\n                                        name=\"cobrandName\"\n                                        onChange={handleChange}\n                                        value={values.cobrandName}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.cobrandName && Boolean(errors.cobrandName) }\n                                        message={touched.cobrandName && errors.cobrandName}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Phone Number\"\n                                        type=\"text\"\n                                        name=\"phoneNumber\"\n                                        onChange={handleChange}\n                                        value={values.phoneNumber}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.phoneNumber && Boolean(errors.phoneNumber) }\n                                        message={touched.phoneNumber && errors.phoneNumber}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Address\"\n                                        type=\"textarea\"\n                                        name=\"address\"\n                                        onChange={handleChange}\n                                        value={values.address}\n                                        className=\"Input-control Input-control-big Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.address && Boolean(errors.address) }\n                                        message={touched.address && errors.address}\n                                    />\n                                    <label>Photo</label>\n                                    <InputComponent \n                                        placeholder=\"Photo\"\n                                        type=\"file\"\n                                        name=\"thumbnail\"\n                                        onChange={(e) => {\n                                            let file = e.currentTarget.files[0];\n                                            if(file) {\n                                            console.log(\"File to upload: \", file);\n                                            setFieldValue(\"thumbnail\", file);\n                                            }\n                                        }}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.thumbnail && Boolean(errors.thumbnail) }\n                                        message={touched.thumbnail && errors.thumbnail}\n                                    />\n                                    <button\n                                        className=\"btn btn-register\"\n                                        type=\"submit\"\n                                    >\n                                        Sign up\n                                    </button>\n                                </form>\n                            )}\n                            </Formik>\n                            <p className=\"Register-middle-right-joinus\">Sudah punya akun? <NavLink to=\"/\">Klik untuk masuk</NavLink> </p>\n                        </div>\n                    </div> \n                \n                {isLoading && (\n                    <RKLoader />\n                )}\n                <div className=\"Register-bottom\"></div>\n            </div>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onRegister: ( email, accountName, cobrandName, thumbnail, phoneNumber, address, password, confirmPassword, history ) =>\n            dispatch( registerAuth( email, accountName, cobrandName, thumbnail, phoneNumber, address, password, confirmPassword, history )  )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Register)\n","import * as yup from 'yup';\n\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\n\nexport const validationFormLogin = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    password: yup.string('Enter your password').required('Password is required')\n})\n\nexport const validationFormRegister = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    accountName: yup.string('Enter your name').required('Name is required'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => password && confirmPassword === password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationFormEdit = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                (img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)) || (!img)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n        //buat nambahin misal upload background. apakah akan masuk kesini?\n        \n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => (password && confirmPassword === password) || !password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationProgram = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationProgramEdit = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationContent = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description').required('Content description is required'),\n    contents: yup.string('Enter the content description').required('Content description is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    endDate: yup.date('Insert end date').required('Date is required'),\n    isActive: yup.boolean(),\n    topics: yup.array().min(1),\n    targetAudience: yup.array().min(1)\n})\n\nexport const validationContentEdit = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description').required('Content description is required'),\n    contents: yup.string('Enter the content description').required('Content description is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n})","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","export default __webpack_public_path__ + \"static/media/device2.69f8ea4a.png\";","import React from 'react';\nimport './LoginHelp.scss';\n\nfunction LoginHelp() {\n    return (\n        <div className=\"HelpOverlay\">\n            <div className=\"HelpOverlay-content\">\n                <h1>Guide Co-Brand Ruang Ortu</h1>\n                <h2>Registrasi</h2>\n                <p>Pada halaman utama (Login), klik pada tulisan <span className=\"HelpOverlay-content-keyword\">Daftar Sekarang</span> untuk masuk ke halaman registrasi. Pada halaman registrasi, Anda harus mengisi delapan kolom yang disediakan, yaitu:</p>\n                <p><br/></p>\n                <ol>\n                    <li>E-Mail</li>\n                    <li>Password</li>\n                    <li>Confirm Password (isi harus sama dengan password)</li>\n                    <li>Your Name (Nama Anda)</li>\n                    <li>Your Brand Name (Nama Brand Anda)</li>\n                    <li>Phone Number (Nomor Telepon yang terhubung dengan Brand Anda)</li>\n                    <li>Address (Alamat Brand Anda)</li>\n                    <li>Photo (Foto atau Gambar Logo dari Brand Anda)</li>\n                </ol>\n                <p><br/></p>\n                <p>Setelah mengisi delapan kolom di atas, klik <span className=\"HelpOverlay-content-keyword\">Sign Up</span> untuk mendaftarkan Brand Anda. Jika berhasil, Anda akan dialihkan ke halaman <span className=\"HelpOverlay-content-keyword\">Login</span> untuk masuk.</p>\n                <p><br/></p>\n                <p><br/></p>\n                <h2>Login</h2>\n                <p>Pada halaman login, masukkan e-mail dan password yang telah dibuat pada saat registrasi. Lalu, klik tombol <span className=\"HelpOverlay-content-keyword\">Login</span>. Jika berhasil, Anda akan dialihkan ke halaman Dashboard.</p>   \n            </div>\n        </div>\n    )\n}\n\nexport default LoginHelp","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}"],"sourceRoot":""}