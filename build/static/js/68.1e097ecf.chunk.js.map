{"version":3,"sources":["components/UI/Input/Input.js","helpers/validation/validation.js","assets/img/Logo_2.png","assets/img/device2.png","containers/CoBrand/Register/Register.js","components/UI/Help/LoginHelp/LoginHelp.js"],"names":["Input","placeholder","type","onChange","onBlur","value","className","message","name","min","max","disabled","isError","id","memo","PhoneRegex","validationFormLogin","yup","userName","required","password","validationFormRegister","email","accountName","cobrandName","thumbnail","test","img","includes","size","phoneNumber","matches","address","confirmPassword","when","schema","validationFormEdit","validationProgram","programName","programDescription","programThumbnail","startDate","endDate","category","targetAudiance","contentPrograms","of","namaTahapan","contentName","contents","answerKey","is","then","otherwise","validationProgramEdit","validationStepEdit","validationContent","contentDescription","contentSource","contentThumbnail","isActive","topics","targetAudience","validationContentEdit","validationUserEdit","nameUser","emailUser","birdDate","validationNotification","destination","messageSubject","messageContent","scheduleTime","mediaType","validationAudience","audianceName","validationNotifCategory","description","validationProgCategory","validationStaff","phone","validationCommunity","cobrandComunityName","partComunityName","validationGroupMitraAsuh","groupMitraAsuhName","validationContentTopic","topicName","validationScreenTime","controlParameterName","controlParameterValue","connect","state","isLoading","auth","dispatch","onRegister","history","registerAuth","useState","showHelp","setShowHelp","useHistory","LoginHelp","onClick","src","Logo","alt","DeviceImage","to","initialValues","validationSchema","validateOnChange","onSubmit","values","handleChange","handleBlur","handleSubmit","setFieldValue","touched","errors","Boolean","e","file","currentTarget","files","RKLoader"],"mappings":"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","file":"static/js/68.1e097ecf.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport './Input.scss';\n\nfunction Input({\n    placeholder,\n    type,\n    onChange,\n    onBlur,\n    value,\n    className,\n    message,\n    name,\n    min,\n    max,\n    disabled,\n    isError\n}) {\n    if(type === \"textarea\") {\n        return (\n        <>\n            <textarea\n                name={name}\n                id={name}\n                className={className}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n        )\n    }\n    else if(type === 'date' || type === 'datetime-local') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    placeholder={placeholder}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                    max={\"9999-12-31\"}\n                    disabled={disabled}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else if(type === 'number') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                    max={max}\n                    disabled={disabled}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else return (\n        <>\n            <input\n                name={name}\n                className={className} \n                type={type}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default memo(Input) \n","import * as yup from 'yup';\n\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\nconst UserRegex = /^\\S*$/;\n\nexport const validationFormLogin = yup.object({\n    userName: yup.string('Enter your email').required('Email is required'),\n    password: yup.string('Enter your password').required('Password is required')\n})\n\nexport const validationFormRegister = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    accountName: yup.string('Enter your name').required('Name is required'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => password && confirmPassword === password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationFormEdit = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                (img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)) || (!img)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n        //buat nambahin misal upload background. apakah akan masuk kesini?\n        \n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => (password && confirmPassword === password) || !password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationProgram = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    endDate: yup.date('Insert end date').required('Date is required'),\n    category: yup.string(),\n    targetAudiance: yup.array().min(1, 'Pilih minimal 1'),\n    contentPrograms: yup.array().min(1).of(\n        yup.object({\n            namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\n            contentName: yup.string().required('Judul Tahapan harus diisi'),\n            contents: yup.string().required('Isi Tahapan harus diisi'),\n            startDate: yup.date('Insert start date').required('Date is required'),\n            endDate: yup.date('Insert end date').required('Date is required'),\n            answerKey: yup.string().when('category', {\n                is: 'Ujian',\n                then: yup.string().required('Kunci Jawaban harus diisi'),\n                otherwise: yup.string()\n            })\n        })\n    )\n})\n\nexport const validationProgramEdit = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n});\n\nexport const validationStepEdit = yup.object({\n    namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\n    contentName: yup.string().required('Judul Tahapan harus diisi'),\n    contents: yup.string().required('Isi Tahapan harus diisi'),\n});\n\nexport const validationContent = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description'),\n    contents: yup.string('Enter the content description').required('Content is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    endDate: yup.date('Insert end date').required('Date is required'),\n    isActive: yup.boolean(),\n    topics: yup.array().min(1),\n    targetAudience: yup.array().min(1)\n})\n\nexport const validationContentEdit = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description'),\n    contents: yup.string('Enter the content description').required('Content is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n});\n\nexport const validationUserEdit = yup.object({\n    nameUser: yup.string('Enter your content title').required('User name is required'),\n    emailUser: yup.string('Enter the content description').required('Email is required').email('Email not valid'),\n    birdDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationNotification = yup.object({\n    destination: yup.array().min(1),\n    messageSubject: yup.string('Enter the message subject').required('Message Subject is required'),\n    messageContent: yup.string('Enter the message content').required('Message Content is required'),\n    scheduleTime: yup.date('Insert start date').required('Date is required'),\n    mediaType: yup.string('Enter the media type').required('Media type is required'),\n    category: yup.string('Enter the category').required('Category is required')\n})\n\nexport const validationAudience = yup.object({\n    audianceName: yup.string('Enter your audience name').required('Audience Name is required')\n})\n\nexport const validationNotifCategory = yup.object({\n    category: yup.string('Enter category name').required('Category is required'),\n    description: yup.string('Enter description').required('Description is required')\n})\n\nexport const validationProgCategory = yup.object({\n    category: yup.string('Enter category name').required('Category is required'),\n    description: yup.string('Enter description').required('Description is required')\n})\n\nexport const validationStaff = yup.object({\n    emailUser: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    userName: yup.string('Enter your name').required('Name is required').matches(UserRegex, 'Invalid username format'),\n    phone: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more')\n})\n\nexport const validationCommunity = yup.object({\n    cobrandComunityName: yup.string('Enter your community name').required('Community name is required'),\n    partComunityName: yup.string('Enter your community name')\n})\n\nexport const validationGroupMitraAsuh = yup.object({\n    groupMitraAsuhName: yup.string('Enter your group name').required('Group name is required'),\n})\n\nexport const validationContentTopic = yup.object({\n    topicName: yup.string('Enter topic name').required('Topic Name is required')\n})\n\nexport const validationScreenTime = yup.object({\n    controlParameterName: yup.string('Enter category name').required('Category is required'),\n    controlParameterValue: yup.number().required('Number is required')\n})","export default __webpack_public_path__ + \"static/media/Logo_2.17216ad5.png\";","export default __webpack_public_path__ + \"static/media/device2.69f8ea4a.png\";","import React, { useState } from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport './Register.scss';\nimport Logo from './../../../assets/img/Logo_2.png'\nimport DeviceImage from './../../../assets/img/device2.png';\nimport InputComponent from '../../../components/UI/Input/Input';\nimport RKLoader from '../../../components/UI/RKLoader/RKLoader';\nimport { Formik } from 'formik';\nimport { validationFormRegister } from './../../../helpers/validation/validation';\nimport { connect } from 'react-redux';\nimport { registerAuth } from './../../../store/actions/auth';\nimport LoginHelp from '../../../components/UI/Help/LoginHelp/LoginHelp';\nimport { FiHelpCircle, FiXCircle } from 'react-icons/fi'\n\nfunction Register({\n    onRegister,\n    isLoading\n}) {\n    const [showHelp, setShowHelp] = useState(false);\n\n    const history = useHistory();\n\n    return (\n        <>\n            {showHelp ? <LoginHelp /> : null}\n            {showHelp ? (\n                <button \n                    className=\"CloseHelp\"\n                    onClick={() => {\n                    setShowHelp(false);\n                }}><FiXCircle/> </button>\n            ) : null}\n            <div className=\"RegisterBg\">\n            <div className=\"Register\">\n                <div className=\"Register-top\">\n                    <img src={Logo} className=\"Register-top-img\" alt=\"logo top\" />\n                </div>\n             \n                <div className=\"Register-middle\">\n                        <div className=\"Register-middle-left\">\n                            <img \n                                src={DeviceImage} \n                                alt=\"Device \" \n                                className=\"Register-middle-left-img\"\n                            />\n                            <NavLink\n                                to=\"/register\" \n                                className=\"Register-middle-left-help\"\n                                onClick={() => {\n                                setShowHelp(true);\n                            }}><FiHelpCircle/>  Bantuan</NavLink>\n                        </div>\n                        <div className=\"Register-middle-right\">\n                            <div className=\"Register-middle-right-heading mb-small\">\n                                <h1>Daftarkan Brand Anda.</h1>\n                            </div>\n                            <Formik\n                                initialValues= {{\n                                    email: '',\n                                    password: '',\n                                    confirmPassword: '',\n                                    accountName: '',\n                                    cobrandName: '',\n                                    phoneNumber: '',\n                                    address: '',\n                                    thumbnail: ''\n                                }}\n                                validationSchema = {validationFormRegister}\n                                validateOnChange = {true}\n                                onSubmit = {values => {\n                                    onRegister( values.email, values.accountName, values.cobrandName, values.thumbnail, values.phoneNumber,\n                                        values.address, values.password, values.confirmPassword, history)\n                                }}\n                            >\n                            {({handleChange, handleBlur, handleSubmit, setFieldValue, touched, values, errors}) => (\n                                <form className=\"Register-middle-right-form\" onSubmit={handleSubmit}>\n                                    <InputComponent \n                                        placeholder=\"Your E-mail (example@mail.com)\"\n                                        type=\"text\"\n                                        name=\"email\"\n                                        onChange={handleChange}\n                                        value={values.email}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.email && Boolean(errors.email) }\n                                        message={touched.email && errors.email}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Password\"\n                                        type=\"password\"\n                                        name=\"password\"\n                                        onChange={handleChange}\n                                        value={values.password}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.password && Boolean(errors.password) }\n                                        message={touched.password && errors.password}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Confirm Password\"\n                                        type=\"password\"\n                                        name=\"confirmPassword\"\n                                        onChange={handleChange}\n                                        value={values.confirmPassword}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.confirmPassword && Boolean(errors.confirmPassword) }\n                                        message={touched.confirmPassword && errors.confirmPassword}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Your Name\"\n                                        type=\"text\"\n                                        name=\"accountName\"\n                                        onChange={handleChange}\n                                        value={values.accountName}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.accountName && Boolean(errors.accountName) }\n                                        message={touched.accountName && errors.accountName}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Your Brand Name\"\n                                        type=\"text\"\n                                        name=\"cobrandName\"\n                                        onChange={handleChange}\n                                        value={values.cobrandName}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.cobrandName && Boolean(errors.cobrandName) }\n                                        message={touched.cobrandName && errors.cobrandName}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Phone Number\"\n                                        type=\"text\"\n                                        name=\"phoneNumber\"\n                                        onChange={handleChange}\n                                        value={values.phoneNumber}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.phoneNumber && Boolean(errors.phoneNumber) }\n                                        message={touched.phoneNumber && errors.phoneNumber}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Address\"\n                                        type=\"textarea\"\n                                        name=\"address\"\n                                        onChange={handleChange}\n                                        value={values.address}\n                                        className=\"Input-control Input-control-big Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.address && Boolean(errors.address) }\n                                        message={touched.address && errors.address}\n                                    />\n                                    <label>Photo</label>\n                                    <InputComponent \n                                        placeholder=\"Photo\"\n                                        type=\"file\"\n                                        name=\"thumbnail\"\n                                        onChange={(e) => {\n                                            let file = e.currentTarget.files[0];\n                                            if(file) {\n                                            // console.log(\"File to upload: \", file);\n                                            setFieldValue(\"thumbnail\", file);\n                                            }\n                                        }}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.thumbnail && Boolean(errors.thumbnail) }\n                                        message={touched.thumbnail && errors.thumbnail}\n                                    />\n                                    <button\n                                        className=\"btn btn-register\"\n                                        type=\"submit\"\n                                    >\n                                        Sign up\n                                    </button>\n                                </form>\n                            )}\n                            </Formik>\n                            <p className=\"Register-middle-right-joinus\">Sudah punya akun? <NavLink to=\"/\">Klik untuk masuk</NavLink> </p>\n                        </div>\n                    </div> \n                \n                {isLoading && (\n                    <RKLoader />\n                )}\n                <div className=\"Register-bottom\"></div>\n            </div>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onRegister: ( email, accountName, cobrandName, thumbnail, phoneNumber, address, password, confirmPassword, history ) =>\n            dispatch( registerAuth( email, accountName, cobrandName, thumbnail, phoneNumber, address, password, confirmPassword, history )  )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Register)\n","import React from 'react';\nimport './LoginHelp.scss';\n\nfunction LoginHelp() {\n    return (\n        <div className=\"HelpOverlay\">\n            <div className=\"HelpOverlay-content\">\n                <h1>Guide Co-Brand Ruang Ortu</h1>\n                <h2>Registrasi</h2>\n                <p>Pada halaman utama (Login), klik pada tulisan <span className=\"HelpOverlay-content-keyword\">Daftar Sekarang</span> untuk masuk ke halaman registrasi. Pada halaman registrasi, Anda harus mengisi delapan kolom yang disediakan, yaitu:</p>\n                <p><br/></p>\n                <ol>\n                    <li>E-Mail</li>\n                    <li>Password</li>\n                    <li>Confirm Password (isi harus sama dengan password)</li>\n                    <li>Your Name (Nama Anda)</li>\n                    <li>Your Brand Name (Nama Brand Anda)</li>\n                    <li>Phone Number (Nomor Telepon yang terhubung dengan Brand Anda)</li>\n                    <li>Address (Alamat Brand Anda)</li>\n                    <li>Photo (Foto atau Gambar Logo dari Brand Anda)</li>\n                </ol>\n                <p><br/></p>\n                <p>Setelah mengisi delapan kolom di atas, klik <span className=\"HelpOverlay-content-keyword\">Sign Up</span> untuk mendaftarkan Brand Anda. Jika berhasil, Anda akan dialihkan ke halaman <span className=\"HelpOverlay-content-keyword\">Login</span> untuk masuk.</p>\n                <p><br/></p>\n                <p><br/></p>\n                <h2>Login</h2>\n                <p>Pada halaman login, masukkan e-mail dan password yang telah dibuat pada saat registrasi. Lalu, klik tombol <span className=\"HelpOverlay-content-keyword\">Login</span>. Jika berhasil, Anda akan dialihkan ke halaman Dashboard.</p>   \n            </div>\n        </div>\n    )\n}\n\nexport default LoginHelp"],"sourceRoot":""}