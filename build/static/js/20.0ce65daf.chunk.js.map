{"version":3,"sources":["containers/CoBrand/Content/AddContent/AddContent.js"],"names":["connect","state","console","log","auth","isLoading","dispatch","onAddContent","cobrandEmail","programId","contentName","contentDescription","contentType","contentSource","contentThumbnail","contents","startDate","isActive","history","addContent","useState","isPageLoading","setPageLoading","programList","setProgramList","valueRadio","setRadio","RichTextEditor","createEmptyValue","textValue","setTextValue","toolbarConfig","display","INLINE_STYLE_BUTTONS","label","style","BLOCK_TYPE_DROPDOWN","BLOCK_TYPE_BUTTONS","useHistory","JSON","parse","localStorage","getItem","email","params","whereKeyValues","useEffect","axios","method","url","data","headers","then","response","programs","catch","error","headingName","routes","path","name","initialValues","Date","toISOString","split","validationSchema","validationContent","validateOnChange","onSubmit","values","window","scrollTo","handleChange","handleSubmit","handleBlur","setFieldValue","errors","touched","className","value","onChange","e","currentTarget","disabled","map","program","_id","programName","type","placeholder","onBlur","toString","file","files","id","onClick","for","min","defaultChecked"],"mappings":"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","file":"static/js/20.0ce65daf.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Heading from '../../../../components/UI/Heading/Heading';\nimport './AddContent.scss';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport { addContent, loadingStart } from '../../../../store/actions/dashboard';\nimport RKLoader from '../../../../components/UI/RKLoaderInner/RKLoader';\nimport { connect } from 'react-redux';\nimport { validationContent } from '../../../../helpers/validation/validation';\nimport InputComponent from '../../../../components/UI/Input/Input';\nimport axios from 'axios';\nimport RichTextEditor from 'react-rte';\nimport { toBase64 } from '../../../../helpers/fileHelper/fileHelper'\n// import {PDFDownloadLink, Document, Page} from '@react-pdf/renderer'\n// import Pdf2 from '../pdf2/pdf2'\n\n\nfunction AddContent({\n    onAddContent,\n    isLoading\n}) {\n\n    const [isPageLoading, setPageLoading] = useState(true);\n    const [programList, setProgramList] = useState();\n    const [valueRadio, setRadio] = useState('');\n\n    const [textValue, setTextValue] = useState(RichTextEditor.createEmptyValue());\n    const toolbarConfig = {\n        // Optionally specify the groups to display (displayed in the order listed).\n        display: ['INLINE_STYLE_BUTTONS', 'BLOCK_TYPE_BUTTONS', 'BLOCK_TYPE_DROPDOWN', 'HISTORY_BUTTONS'],\n        INLINE_STYLE_BUTTONS: [\n            { label: 'Bold', style: 'BOLD' },\n            { label: 'Italic', style: 'ITALIC' },\n            { label: 'Underline', style: 'UNDERLINE' },\n            { label: 'Strikethrough', style: 'STRIKETHROUGH' }\n        ],\n        BLOCK_TYPE_DROPDOWN: [\n            { label: 'Normal', style: 'unstyled' },\n            { label: 'Heading Large', style: 'header-one' },\n            { label: 'Heading Medium', style: 'header-two' },\n            { label: 'Heading Small', style: 'header-three' }\n        ],\n        BLOCK_TYPE_BUTTONS: [\n            { label: 'Unordered List', style: 'unordered-list-item' },\n            { label: 'Ordered List', style: 'ordered-list-item' },\n            { label: 'Blockquote', style: 'blockquote' }\n        ]\n    };\n\n    const history = useHistory();\n    const cobrandEmail = JSON.parse(localStorage.getItem('userData')).email;\n\n    const params = {\n        whereKeyValues: {\n            cobrandEmail: cobrandEmail\n        }\n    };\n\n    useEffect(() => {\n        axios({\n            method: 'post',\n            url: 'https://rk.defghi.biz.id:8080/api/cobrand/programFilter',\n            data: params,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n            .then(response => {\n                console.log(\"Program list: \", response.data);\n                setProgramList(response.data.programs);\n                setPageLoading(false);\n            })\n            .catch(error => {\n                console.log(error);\n                setPageLoading(false);\n            });\n    }, []);\n\n    if (isPageLoading) {\n        return <RKLoader />\n    }\n\n    return (\n        <>\n            <Heading headingName=\"Content\" routes={[\n                { path: '/content', name: 'Content' },\n                { path: '/content/add', name: 'Create new content' }\n            ]} />\n            <Formik\n                initialValues={{\n                    programId: '-1',\n                    contentName: '',\n                    contentDescription: '',\n                    contentType: '',\n                    contentSource: '',\n                    contentThumbnail: '',\n                    contents: '',\n                    startDate: new Date().toISOString().split('T')[0],\n                    isActive: true\n                }}\n                validationSchema={validationContent}\n                validateOnChange={true}\n                onSubmit={values => {\n                    window.scrollTo(0, 0);\n                    onAddContent(cobrandEmail, values.programId, values.contentName, values.contentDescription,\n                        values.contentType, values.contentSource, values.contentThumbnail, values.contents,\n                        values.startDate, values.isActive, history)\n                }}\n            >\n                {({ handleChange, handleSubmit, handleBlur, setFieldValue, values, errors, touched }) => (\n                    <form onSubmit={handleSubmit}>\n                        <div className=\"AddContent\">\n                            <h1 className=\"AddContent_title\">Create New Content</h1>\n                            <div className=\"form-group\">\n                                <label>Content Type</label>\n                                <select\n                                    name=\"contentType\"\n                                    value={values.contentType}\n                                    onChange={(e) => {\n                                        setFieldValue(\"contentType\", e.currentTarget.value);\n                                        setFieldValue(\"contents\", '');\n                                    }}\n                                >\n                                    <option value=\"\" disabled>Select Content Type</option>\n                                    <option value=\"Artikel\">Artikel</option>\n                                    <option value=\"Image\">Image</option>\n                                    <option value=\"Video\">Video</option>\n                                    <option value=\"Pdf\">File Pdf</option>\n                                </select>\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Program Name</label>\n                                <select\n                                    name=\"programId\"\n                                    value={values.programId}\n                                    onChange={handleChange}\n                                >\n                                    <option value=\"-1\" disabled>Select Program</option>\n                                    {/* <option value=\"\">(Tanpa Program)</option> */}\n                                    {\n                                        programList.map((program) => {\n                                            return (\n                                                <option value={program._id}>{program.programName}</option>\n                                            )\n                                        })\n                                    }\n                                </select>\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Title</label>\n                                <InputComponent\n                                    type=\"text\"\n                                    name=\"contentName\"\n                                    className=\"form-group__input form-group__input--fullwidth\"\n                                    placeholder=\"Example\"\n                                    value={values.contentName}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                                {touched.contentName && <span className=\"message__error\">{errors.contentName}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Description</label>\n                                <RichTextEditor\n                                    name=\"contentDescription\"\n                                    placeholder=\"Type your description here...\"\n                                    className=\"form-group_rte\"\n                                    // value={values.contentDescription}\n                                    value={textValue}\n                                    toolbarConfig={toolbarConfig}\n                                    onBlur={handleBlur}\n                                    onChange={(e) => {\n                                        setTextValue(e);\n                                        setFieldValue(\"contentDescription\", e.toString(\"html\"));\n                                        console.log(values.contentDescription);\n                                    }}\n                                />\n                                {/* <InputComponent\n                                    type=\"textarea\"\n                                    name=\"contentDescription\"\n                                    placeholder=\"Type Something...\"\n                                    value={values.contentDescription}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                /> */}\n                                {touched.contentDescription && <span className=\"message__error\">{errors.contentDescription}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Source</label>\n                                <InputComponent\n                                    type=\"text\"\n                                    name=\"contentSource\"\n                                    className=\"form-group__input form-group__input--fullwidth\"\n                                    placeholder=\"Example\"\n                                    value={values.contentSource}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                                {touched.contentSource && <span className=\"message__error\">{errors.contentSource}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Photo</label>\n                                <InputComponent\n                                    type=\"file\"\n                                    className=\"form-group__input\"\n                                    name=\"contentThumbnail\"\n                                    onBlur={handleBlur}\n                                    onChange={(e) => {\n                                        let file = e.currentTarget.files[0];\n                                        if (file) {\n                                            console.log(\"File to upload: \", file);\n                                            setFieldValue(\"contentThumbnail\", file);\n                                        }\n                                    }}\n                                />\n                                {touched.contentThumbnail && <span className=\"message__error\">{errors.contentThumbnail}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Contents</label>\n                                {values.contentType === \"Artikel\" ? (\n                                    /*<InputComponent\n                                        type=\"textarea\"\n                                        name=\"contents\"\n                                        placeholder=\"Type Something...\"\n                                        value={values.contents}\n                                        onChange={handleChange}\n                                    />*/\n\n                                    <RichTextEditor\n                                        name=\"contents\"\n                                        placeholder=\"Type your contents here...\"\n                                        className=\"form-group_rte\"\n                                        value={textValue}\n                                        toolbarConfig={toolbarConfig}\n                                        onBlur={handleBlur}\n                                        onChange={(e) => {\n                                            setTextValue(e);\n                                            setFieldValue(\"contents\", e.toString(\"html\"));\n                                            console.log(values.contents);\n                                        }}\n                                    />\n                                ) : null}\n                                {values.contentType === \"Image\" ? (\n                                    <div>\n                                        <p>Pilih media yang ingin di upload :</p>\n                                        <form>\n                                            <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'internal'}\n                                                onClick={() => { setRadio('internal') }}\n                                            />\n                                            <label for=\"internal\" >Media Internal Komputer</label>\n                                            <br></br>\n                                            <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'url'}\n                                                onClick={() => setRadio('url')}\n                                            />\n                                            <label for=\"url\" >Alamat URL</label>\n                                            <br></br>\n                                        </form>\n\n                                        {valueRadio === 'internal' ?\n                                            <InputComponent\n                                                type=\"file\"\n                                                className=\"form-group__input\"\n                                                name=\"contents\"\n                                                onBlur={handleBlur}\n                                                //   value={values.contents}\n                                                //   onChange={handleChange}\n                                                onChange={(e) => {\n                                                    let file = e.currentTarget.files[0];\n                                                    if (file) {\n                                                        console.log(\"File to upload: \", file);\n                                                        setFieldValue(\"contents\", file);\n                                                    }\n                                                }}\n                                            />\n                                            :\n                                            <InputComponent\n                                                type=\"text\"\n                                                name=\"contents\"\n                                                className=\"form-group__input form-group__input--fullwidth\"\n                                                placeholder=\"Type Image URL... (https://example.com/something/something.jpg)\"\n                                                value={values.contents}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                            />\n                                        }\n\n                                    </div>\n\n                                ) : null}\n                                {values.contentType === \"Video\" ?\n                                    // (\n                                    //     <div>\n                                    //         <p>Pilih media yang ingin di upload :</p>\n                                    //         <form>\n                                    //             <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'internal'}\n                                    //             onClick={() => {setRadio('internal')}}\n                                    //             />\n                                    //             <label for=\"internal\" >Media Internal Komputer</label>\n                                    //             <br></br>\n                                    //             <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'url'}\n                                    //             onClick={() =>setRadio('url')}\n                                    //             />\n                                    //             <label for=\"url\" >Alamat URL</label>\n                                    //             <br></br>\n                                    //         </form>\n\n                                    //         {valueRadio === 'internal' ? \n                                    //         <InputComponent\n                                    //         type=\"file\"\n                                    //         className=\"form-group__input\"\n                                    //         name=\"contents\"\n                                    //         onBlur={handleBlur}\n                                    //         //   value={values.contents}\n                                    //         //   onChange={handleChange}\n                                    //         onChange={(e) => {\n                                    //             let file = e.currentTarget.files[0];\n                                    //             if (file) {\n                                    //                 console.log(\"File to upload: \", file);\n                                    //                 setFieldValue(\"contents\", file);\n                                    //             }\n                                    //         }}\n                                    //         />\n                                    //         : \n                                    //         <InputComponent\n                                    //         type=\"text\"\n                                    //         name=\"contents\"\n                                    //         className=\"form-group__input form-group__input--fullwidth\"\n                                    //         placeholder=\"Type Video URL... (Youtube/Vimeo/Dailymotion/etc)\"\n                                    //         value={values.contents}\n                                    //         onChange={handleChange}\n                                    //         onBlur={handleBlur}\n                                    //         />\n                                    //         }\n                                    //     </div>\n\n                                    // ) \n                                    <InputComponent\n                                        type=\"text\"\n                                        name=\"contents\"\n                                        className=\"form-group__input form-group__input--fullwidth\"\n                                        placeholder=\"Type Video URL... (Youtube/Vimeo/Dailymotion/etc)\"\n                                        value={values.contents}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                    />\n                                    : null}\n                                {values.contentType === \"Pdf\" ? (\n                                    <div>\n                                        <p>Pilih media yang ingin di upload :</p>\n                                        <form>\n                                            <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'internal'}\n                                                onClick={() => { setRadio('internal') }}\n                                            />\n                                            <label for=\"internal\" >Media Internal - Maks 300kb</label>\n                                            <br></br>\n                                            <input type=\"radio\" id=\"html\" name=\"fav_language\" value={'url'}\n                                                onClick={() => setRadio('url')}\n                                            />\n                                            <label for=\"url\" >Alamat URL</label>\n                                            <br></br>\n                                        </form>\n\n                                        {valueRadio === 'internal' ?\n                                            <InputComponent\n                                                type=\"file\"\n                                                className=\"form-group__input\"\n                                                name=\"contents\"\n                                                onBlur={handleBlur}\n                                                //   value={values.contents}\n                                                //   onChange={handleChange}\n                                                onChange={(e) => {\n                                                    let file = e.currentTarget.files[0];\n                                                    if (file) {\n                                                        console.log(\"File to upload: \", file);\n                                                        setFieldValue(\"contents\", file);\n                                                    }\n                                                }}\n                                            />\n                                            :\n                                            <InputComponent\n                                                type=\"text\"\n                                                name=\"contents\"\n                                                className=\"form-group__input form-group__input--fullwidth\"\n                                                placeholder=\"Type Pdf URL... (Pdf file)\"\n                                                value={values.contents}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                            />\n                                        }\n                                    </div>\n\n                                ) : null}\n                                {touched.contents && <span className=\"message__error\">{errors.contents}</span>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Set Schedule</label>\n                                <InputComponent\n                                    type=\"date\"\n                                    className=\"form-group__input\"\n                                    name=\"startDate\"\n                                    value={values.startDate}\n                                    min={new Date().toISOString().split('T')[0]}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                                {touched.startDate && <span className=\"message__error\">{errors.startDate}</span>}\n                            </div>\n                            {/* end date */}\n                            {/* <div className=\"form-group\">\n                                <label>End Date</label>\n                                <InputComponent\n                                    type=\"date\"\n                                    className=\"form-group__input\"\n                                    name=\"startDate\"\n                                    value={values.startDate}\n                                    max={new Date().toISOString().split('T')[0]}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                                {touched.startDate && <span className=\"message__error\">{errors.startDate}</span>}\n                            </div> */}\n                            <div className=\"form-group\">\n                                <div className=\"form-group_switch\">\n                                    <p className=\"form-group_switch_status\">Status:</p>\n                                    <p className=\"form-group_switch_inactive\">Inactive</p>\n                                    <label className=\"form-group_switch_switch\">\n                                        <input type=\"checkbox\" className=\"form-group_switch_switch_checkbox\"\n                                            name=\"isActive\"\n                                            defaultChecked={values.isActive}\n                                            onChange={() => {\n                                                values.isActive = !values.isActive;\n                                                console.log(values.isActive);\n                                            }}></input>\n                                        <span className=\"form-group_switch_switch_slider\"></span>\n                                    </label>\n                                    <p className=\"form-group_switch_active\">Active</p>\n                                </div>\n                            </div>\n                            <div>\n                                <button className=\"btn btn-submit\" type=\"submit\">\n                                    Post Content\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                )}\n            </Formik>\n            {console.log(isLoading)}\n            {isLoading ? <RKLoader /> : null}\n        </>\n    )\n\n}\n\n\n\n// 1- install pdfjs library | npm install pdfjs-dist@2.6.347\n// 2- install the core package | npm install @react-pdf-viewer/core@2.4.1   ok\n// 3- install pdf viewer default layout | npm install @react-pdf-viewer/default-layout  ok\n\n// its so loadingStart, i am very tired n feell sleepy, well will be ok rgight, \n\nconst mapStateToProps = state => {\n    console.log(state.auth.isLoading);\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAddContent: (cobrandEmail, programId, contentName, contentDescription, contentType, contentSource, contentThumbnail, contents, startDate, isActive, history) =>\n            dispatch(addContent(cobrandEmail, programId, contentName, contentDescription, contentType, contentSource, contentThumbnail, contents, startDate, isActive, history))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddContent)\n"],"sourceRoot":""}