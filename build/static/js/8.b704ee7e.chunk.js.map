{"version":3,"sources":["store/actions/webMainUtils.js","containers/CoBrand/Program/AddProgram/AddProgram.js","components/UI/Heading/Heading.js","components/UI/Input/Input.js","helpers/validation/validation.js"],"names":["authStart","type","AUTH_START","authFailed","AUTH_FAILED","addProgram","cobrandEmail","programName","ProgramDescription","photo","startDate","history","dispatch","toBase64","then","result","console","log","programthumnail","setTimeout","data","axios","method","url","headers","response","push","catch","error","addContent","programId","contentName","contentDescription","contentType","contentSource","contents","contentThumbnail","connect","state","auth","isLoading","onAddProgram","programDescription","programThumbnail","useHistory","JSON","parse","localStorage","getItem","email","headingName","routes","path","name","initialValues","validationSchema","validationProgram","validateOnChange","onSubmit","values","handleChange","handleSubmit","setFieldValue","errors","className","placeholder","value","onChange","e","file","currentTarget","files","Heading","length","map","item","i","exact","to","Input","onBlur","message","isError","id","memo","validationFormLogin","yup","required","password","validationFormRegister","accountName","cobrandName","thumbnail","test","img","includes","size","phoneNumber","matches","address","min","confirmPassword","when","schema","validationContent"],"mappings":"kIAAA,yGASaA,EAAY,iBAAO,CAAEC,KAAMC,MAC3BC,EAAa,iBAAO,CAAEF,KAAMG,MAG5BC,EAAa,SAAEC,EAAcC,EAAaC,EAAoBC,EAAOC,EAAWC,GACzF,OAAO,SAAAC,GACHA,EAAUZ,KAEMa,YAASJ,GACjBK,MAAK,SAACC,GACVC,QAAQC,WAAWF,GACnB,IAAMG,EAAkBH,EAExBI,YAAY,WACR,IAAIC,EAAO,CACPd,eACAC,cACAC,qBACAU,kBACAR,aAGJM,QAAQC,IAAIG,GAGZC,IAAM,CACFC,OAAQ,OACRC,IAAK,uDACLH,KAAMA,EACNI,QAAS,CACL,eAAgB,sBAGvBV,MAAK,SAAAW,GACFT,QAAQC,IAAI,WAAYQ,EAASL,MACjCT,EAAQe,KAAK,eAEhBC,OAAM,SAACC,GACJZ,QAAQY,MAAM,SAAUA,MAE5BZ,QAAQC,IAAIG,GACZR,EAAST,OACX,UAMD0B,EAAa,SAAEvB,EAAcwB,EAAWC,EAAaC,EAAoBC,EAAaC,EAAezB,EAAO0B,EAAUzB,EAAWC,GAC1I,OAAO,SAAAC,GACHA,EAAUZ,KAEMa,YAASJ,GACjBK,MAAK,SAACC,GACVC,QAAQC,WAAWF,GACnB,IAAMqB,EAAmBrB,EAEzBI,YAAY,WACR,IAAIC,EAAO,CACPd,eACAwB,YACAC,cACAC,qBACAC,cACAC,gBACAE,mBACAD,WACAzB,aAGJM,QAAQC,IAAIG,GAGZC,IAAM,CACFC,OAAQ,OACRC,IAAK,uDACLH,KAAMA,EACNI,QAAS,CACL,eAAgB,sBAGvBV,MAAK,SAAAW,GACFT,QAAQC,IAAI,WAAYQ,EAASL,MACjCT,EAAQe,KAAK,eAEhBC,OAAM,SAACC,GACJZ,QAAQY,MAAM,SAAUA,MAE5BZ,QAAQC,IAAIG,GACZR,EAAST,OACX,W,uDCnGd,iGAyHekC,uBAdS,SAAAC,GAEpB,OADAtB,QAAQC,IAAIqB,EAAMC,KAAKC,WAChB,CACHA,UAAWF,EAAMC,KAAKC,cAIH,SAAC5B,GACxB,MAAO,CACH6B,aAAc,SAAEnC,EAAcC,EAAamC,EAAoBC,EAAkBjC,EAAWC,GAA9E,OACVC,EAASP,YAAYC,EAAcC,EAAamC,EAAoBC,EAAkBjC,EAAWC,QAI9F0B,EA9Gf,YAGI,IAFAI,EAED,EAFCA,aACAD,EACD,EADCA,UAGM7B,EAAUiC,cACVtC,EAAeuC,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,MAElE,OACI,qCACI,cAAC,IAAD,CAASC,YAAY,UAAUC,OAAQ,CACnC,CAAEC,KAAM,WAAYC,KAAM,oBAC1B,CAAED,KAAM,eAAgBC,KAAM,yBAElC,cAAC,IAAD,CACIC,cAAgB,CACZ/C,YAAa,GACbmC,mBAAoB,GACpBC,iBAAkB,GAClBjC,UAAW,IAEf6C,iBAAoBC,IACpBC,kBAAoB,EACpBC,SAAa,SAAAC,GACTlB,EAAcnC,EAAcqD,EAAOpD,YAAaoD,EAAOjB,mBAAoBiB,EAAOhB,iBAAkBgB,EAAOjD,UAAWC,IAV9H,SAaC,gBAAEiD,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,aAAcC,EAA9B,EAA8BA,cAAeH,EAA7C,EAA6CA,OAAQI,EAArD,EAAqDA,OAArD,OACG,sBAAML,SAAUG,EAAhB,SACI,sBAAKG,UAAU,aAAf,UACI,oDACA,sBAAKA,UAAU,aAAf,UACI,0CACA,cAAC,IAAD,CACI/D,KAAK,OACLoD,KAAK,cACLW,UAAU,iDACVC,YAAY,UACZC,MAAOP,EAAOpD,YACd4D,SAAUP,IAEd,sBAAMI,UAAU,iBAAhB,SAAkCD,EAAOxD,iBAE7C,sBAAKyD,UAAU,aAAf,UACI,gDACA,cAAC,IAAD,CACI/D,KAAK,WACLoD,KAAK,qBACLY,YAAY,oBACZC,MAAOP,EAAOjB,mBACdyB,SAAUP,IAEd,sBAAMI,UAAU,iBAAhB,SAAkCD,EAAOrB,wBAE7C,sBAAKsB,UAAU,aAAf,UACI,0CACA,cAAC,IAAD,CACI/D,KAAK,OACL+D,UAAU,oBACVX,KAAK,mBACLc,SAAU,SAACC,GACP,IAAIC,EAAOD,EAAEE,cAAcC,MAAM,GAC9BF,IACCrD,QAAQC,IAAI,mBAAoBoD,GAChCP,EAAc,mBAAoBO,OAI9C,sBAAML,UAAU,iBAAhB,SAAkCD,EAAOpB,sBAE7C,sBAAKqB,UAAU,aAAf,UACI,iDACA,cAAC,IAAD,CACI/D,KAAK,OACL+D,UAAU,oBACVX,KAAK,YACLa,MAAOP,EAAOjD,UACdyD,SAAUP,IAEd,sBAAMI,UAAU,iBAAhB,SAAkCD,EAAOrD,eAE7C,8BACI,wBAAQsD,UAAU,MAAM/D,KAAK,SAA7B,oCAQfe,QAAQC,IAAIuB,GACZA,EAAY,cAAC,IAAD,IAAc,Y,gCCtGvC,+BAsBegC,IAlBf,YAAgD,IAA7BtB,EAA4B,EAA5BA,YAA4B,IAAfC,cAAe,MAAN,GAAM,EAE3C,OACI,sBAAKa,UAAU,UAAf,UACI,6BAAKd,IACL,oBAAIc,UAAU,qBAAd,SACKb,EAAOsB,OAAS,GAAKtB,EAAOuB,KAAI,SAACC,EAAMC,GACpC,OAAGD,EAAKvB,KACG,qBAAIY,UAAU,0BAAd,UAAgD,cAAC,IAAD,CAASa,OAAK,EAACC,GAAIH,EAAKvB,KAAxB,SAA+BuB,EAAKtB,OAApF,MAA6CuB,GAE7C,qBAAIZ,UAAU,0BAAd,cAAiD,+BAAOW,EAAKtB,OAA7D,MAA6CuB,a,qDCd5E,0BAGA,SAASG,EAAT,GAUI,IATAd,EASD,EATCA,YACAhE,EAQD,EARCA,KACAkE,EAOD,EAPCA,SACAa,EAMD,EANCA,OACAd,EAKD,EALCA,MACAF,EAID,EAJCA,UACAiB,EAGD,EAHCA,QACA5B,EAED,EAFCA,KACA6B,EACD,EADCA,QAEA,MAAY,aAATjF,EAEC,qCACI,0BACIoD,KAAMA,EACN8B,GAAI9B,EACJW,UAAWA,EACXC,YAAaA,EACbE,SAAUA,EACVa,OAAQA,EACRd,MAAOA,IAEVgB,GACG,qBAAKlB,UAAU,UAAf,SACI,sBAAMA,UAAU,iBAAhB,SAAkCiB,SAOlD,qCACI,uBACI5B,KAAMA,EACNW,UAAWA,EACX/D,KAAMA,EACNgE,YAAaA,EACbE,SAAUA,EACVa,OAAQA,EACRd,MAAOA,IAEVgB,GACG,qBAAKlB,UAAU,UAAf,SACI,sBAAMA,UAAU,iBAAhB,SAAkCiB,SAOnCG,mBAAKL,I,qDCtDpB,qJAIaM,EAAsBC,IAAW,CAC1CrC,MAAOqC,IAAW,oBAAoBC,SAAS,qBAAqBtC,MAAM,mBAC1EuC,SAAUF,IAAW,uBAAuBC,SAAS,0BAG5CE,EAAyBH,IAAW,CAC7CrC,MAAOqC,IAAW,oBAAoBC,SAAS,qBAAqBtC,MAAM,mBAC1EyC,YAAaJ,IAAW,mBAAmBC,SAAS,oBACpDI,YAAaL,IAAW,yBAAyBC,SAAS,0BAC1DK,UAAWN,IAAU,+BAA+BC,SAAS,qBACxDM,KACG,YAAa,0DACb,SAACC,GAAD,OACIA,GAAO,CAAC,YAAa,YAAa,cAAcC,SAASD,EAAI7F,SAEpE4F,KACG,YAAa,0DACb,SAACC,GACG,OAAGA,GACQA,EAAIE,MAAQ,WAOnCC,YAAaX,IAAW,2BAA2BC,SAAS,4BAA4BW,QA5BzE,6FA4B6F,+BAC5GC,QAASb,IAAW,sBAAsBC,SAAS,uBACnDC,SAAUF,IAAW,uBAAuBC,SAAS,wBAAwBa,IAAI,EAAG,2CACpFC,gBAAiBf,IAAW,yBAAyBC,SAAS,wBACzDe,KAAK,YAAY,SAACd,EAAUe,GACzB,OAAOA,EAAOV,KAAK,CACfA,KAAM,SAAAQ,GAAe,OAAIb,GAAYa,IAAoBb,GACzDP,QAAS,gCAKZzB,EAAoB8B,IAAW,CACxC/E,YAAa+E,IAAW,4BAA4BC,SAAS,6BAC7D7C,mBAAoB4C,IAAW,iCAAiCC,SAAS,mCACzE5C,iBAAkB2C,IAAU,+BAA+BC,SAAS,qBAC/DM,KACG,YAAa,0DACb,SAACC,GAAD,OACIA,GAAO,CAAC,YAAa,YAAa,cAAcC,SAASD,EAAI7F,SAEpE4F,KACG,YAAa,0DACb,SAACC,GACG,OAAGA,GACQA,EAAIE,MAAQ,WAOnCtF,UAAW4E,IAAS,qBAAqBC,SAAS,sBAGzCiB,EAAoBlB,IAAW,CACxCvD,YAAauD,IAAW,4BAA4BC,SAAS,6BAC7DvD,mBAAoBsD,IAAW,iCAAiCC,SAAS,mCACzEpD,SAAUmD,IAAW,iCAAiCC,SAAS,mCAC/DrD,cAAeoD,IAAW,4BAA4BC,SAAS,8BAC/DnD,iBAAkBkD,IAAU,+BAA+BC,SAAS,qBAC/DM,KACG,YAAa,0DACb,SAACC,GAAD,OACIA,GAAO,CAAC,YAAa,YAAa,cAAcC,SAASD,EAAI7F,SAEpE4F,KACG,YAAa,0DACb,SAACC,GACG,OAAGA,GACQA,EAAIE,MAAQ,WAOnCtF,UAAW4E,IAAS,qBAAqBC,SAAS","file":"static/js/8.b704ee7e.chunk.js","sourcesContent":["import {\n    AUTH_SUCCESS,\n    AUTH_START,\n    AUTH_FAILED,\n    AUTH_LOGOUT\n} from './actionTypes';\nimport axios from 'axios';\nimport { toBase64 } from '../../helpers/fileHelper/fileHelper';\n\nexport const authStart = () => ({ type: AUTH_START });\nexport const authFailed = () => ({ type: AUTH_FAILED });\nexport const authSuccess = () => ({ type: AUTH_SUCCESS })\n\nexport const addProgram = ( cobrandEmail, programName, ProgramDescription, photo, startDate, history ) => {\n    return dispatch => {\n        dispatch( authStart() );\n\n        const promise = toBase64(photo);\n        promise.then((result) => {\n            console.log(typeof result);\n            const programthumnail = result;\n\n            setTimeout( () => {\n                let data = {\n                    cobrandEmail,\n                    programName,\n                    ProgramDescription,\n                    programthumnail,\n                    startDate\n                };\n\n                console.log(data);\n                //Call API ....\n                \n                axios({\n                    method: 'post',\n                    url: 'https://rk.defghi.biz.id:8080/api/cobrand/programAdd',\n                    data: data,\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                })\n                .then(response => {\n                    console.log('Success:', response.data);\n                    history.push('/program');\n                })\n                .catch((error) => {\n                    console.error('Error:', error);\n                });\n                console.log(data);\n                dispatch(authFailed());\n            },2000)\n        });\n    }\n\n}\n\nexport const addContent = ( cobrandEmail, programId, contentName, contentDescription, contentType, contentSource, photo, contents, startDate, history ) => {\n    return dispatch => {\n        dispatch( authStart() );\n\n        const promise = toBase64(photo);\n        promise.then((result) => {\n            console.log(typeof result);\n            const contentThumbnail = result;\n\n            setTimeout( () => {\n                let data = {\n                    cobrandEmail,\n                    programId,\n                    contentName,\n                    contentDescription,\n                    contentType,\n                    contentSource,\n                    contentThumbnail,\n                    contents,\n                    startDate\n                };\n\n                console.log(data);\n                //Call API ....\n                \n                axios({\n                    method: 'post',\n                    url: 'https://rk.defghi.biz.id:8080/api/cobrand/contentAdd',\n                    data: data,\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                })\n                .then(response => {\n                    console.log('Success:', response.data);\n                    history.push('/content');\n                })\n                .catch((error) => {\n                    console.error('Error:', error);\n                });\n                console.log(data);\n                dispatch(authFailed());\n            },2000)\n        });\n    }\n\n}","import React from 'react';\nimport Heading from '../../../../components/UI/Heading/Heading';\nimport './AddProgram.scss';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport { addProgram } from '../../../../store/actions/webMainUtils';\nimport RKLoader from '../../../../components/UI/RKLoader/RKLoader';\nimport { connect } from 'react-redux';\nimport { validationProgram } from '../../../../helpers/validation/validation';\nimport InputComponent from '../../../../components/UI/Input/Input';\n\nfunction AddProgram({\n    onAddProgram,\n    isLoading\n}) {\n\n    const history = useHistory();\n    const cobrandEmail = JSON.parse(localStorage.getItem('userData')).email;\n\n    return (\n        <>\n            <Heading headingName=\"Program\" routes={[\n                { path: '/program', name: 'On Going Program' },\n                { path: '/program/add', name: 'Create new Program' }\n            ]} />\n            <Formik\n                initialValues= {{\n                    programName: '',\n                    programDescription: '',\n                    programThumbnail: '',\n                    startDate: ''\n                }}\n                validationSchema = {validationProgram}\n                validateOnChange = {true}\n                onSubmit = { values => {\n                    onAddProgram( cobrandEmail, values.programName, values.programDescription, values.programThumbnail, values.startDate, history)\n                }}\n            >\n            {({handleChange, handleSubmit, setFieldValue, values, errors}) => (\n                <form onSubmit={handleSubmit}>\n                    <div className=\"AddProgram\">\n                        <h1>Create New Program</h1>\n                        <div className=\"form-group\">\n                            <label>Title</label>\n                            <InputComponent \n                                type=\"text\"\n                                name=\"programName\"\n                                className=\"form-group__input form-group__input--fullwidth\" \n                                placeholder=\"Example\"\n                                value={values.programName}\n                                onChange={handleChange}\n                            />\n                            <span className=\"message__error\">{errors.programName}</span>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Description</label>\n                            <InputComponent\n                                type=\"textarea\"\n                                name=\"programDescription\"\n                                placeholder=\"Type Something...\"\n                                value={values.programDescription}\n                                onChange={handleChange}\n                            />\n                            <span className=\"message__error\">{errors.programDescription}</span>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Photo</label>\n                            <InputComponent\n                                type=\"file\"\n                                className=\"form-group__input\"\n                                name=\"programThumbnail\"\n                                onChange={(e) => {\n                                    let file = e.currentTarget.files[0];\n                                    if(file) {\n                                        console.log(\"File to upload: \", file);\n                                        setFieldValue(\"programThumbnail\", file);\n                                    }\n                                }}\n                            />\n                            <span className=\"message__error\">{errors.programThumbnail}</span>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Set Schedule</label>\n                            <InputComponent\n                                type=\"date\"\n                                className=\"form-group__input\"\n                                name=\"startDate\"\n                                value={values.startDate}\n                                onChange={handleChange}\n                            />\n                            <span className=\"message__error\">{errors.startDate}</span>\n                        </div>\n                        <div>\n                            <button className=\"btn\" type=\"submit\">\n                                Post Program\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            )}\n            </Formik>\n            {console.log(isLoading)}\n            {isLoading ? <RKLoader/> : null}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    console.log(state.auth.isLoading);\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAddProgram: ( cobrandEmail, programName, programDescription, programThumbnail, startDate, history ) =>\n            dispatch(addProgram( cobrandEmail, programName, programDescription, programThumbnail, startDate, history ))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (AddProgram)\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Heading.scss';\n\nfunction Heading({ headingName, routes = [] }) {\n    \n    return (\n        <div className=\"Heading\">\n            <h1>{headingName}</h1>\n            <ul className=\"Heading__breadcumb\">\n                {routes.length > 0 && routes.map((item, i) => {\n                    if(item.path){\n                        return <li className=\"Heading__breadcumb-item\" key={i}><NavLink exact to={item.path}>{item.name}</NavLink> </li>\n                    }else{\n                        return <li className=\"Heading__breadcumb-item\" key={i}> <span>{item.name}</span> </li>\n                    }\n                })}\n            </ul>\n        </div>\n    )\n}\n\nexport default Heading\n","import React, { memo } from 'react';\nimport './Input.scss';\n\nfunction Input({\n    placeholder,\n    type,\n    onChange,\n    onBlur,\n    value,\n    className,\n    message,\n    name,\n    isError\n}) {\n    if(type === \"textarea\") {\n        return (\n        <>\n            <textarea\n                name={name}\n                id={name}\n                className={className}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n        )\n    }\n    else return (\n    <>\n        <input\n            name={name}\n            className={className} \n            type={type}\n            placeholder={placeholder}\n            onChange={onChange}\n            onBlur={onBlur}\n            value={value}\n        />\n        {isError && (\n            <div className=\"message\">\n                <span className=\"message__error\">{message}</span>\n            </div>\n        )}\n    </>\n    )\n}\n\nexport default memo(Input) \n","import * as yup from 'yup';\n\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\n\nexport const validationFormLogin = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    password: yup.string('Enter your password').required('Password is required')\n})\n\nexport const validationFormRegister = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    accountName: yup.string('Enter your name').required('Name is required'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => password && confirmPassword === password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationProgram = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationContent = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description').required('Content description is required'),\n    contents: yup.string('Enter the content description').required('Content description is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required')\n})"],"sourceRoot":""}