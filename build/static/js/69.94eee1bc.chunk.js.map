{"version":3,"sources":["components/UI/Input/Input.js","helpers/validation/validation.js","containers/CoBrand/RequestDeleteUser/RequestDeleteUser.js","assets/img/device3.png","components/UI/Help/LoginHelp/LoginHelp.js"],"names":["Input","placeholder","type","onChange","onBlur","value","className","message","name","min","max","disabled","isError","id","memo","PhoneRegex","UserRegex","validationFormLogin","yup","userName","required","password","validationFormEdit","email","accountName","cobrandName","thumbnail","test","img","includes","size","phoneNumber","matches","address","confirmPassword","when","schema","validationProgram","programName","programDescription","programThumbnail","startDate","endDate","category","targetAudiance","contentPrograms","of","namaTahapan","contentName","contents","answerKey","is","then","otherwise","validationProgramEdit","validationStepEdit","validationContent","contentDescription","contentSource","contentThumbnail","isActive","topics","targetAudience","validationContentEdit","validationUserEdit","nameUser","emailUser","birdDate","validationNotification","destination","messageSubject","messageContent","scheduleTime","mediaType","validationAudience","audianceName","validationNotifCategory","description","validationProgCategory","validationStaff","phone","userType","userLevel","groupMitraAsuhId","sekolah","validationRegistration","nama","alamat","nik","ktp","validationCommunity","cobrandComunityName","partComunityName","validationGroupMitraAsuh","groupMitraAsuhName","validationContentTopic","topicName","validationScreenTime","controlParameterName","controlParameterValue","connect","state","isLoading","auth","dispatch","onDeleteUser","logout","setToken","setProfile","setRoProfile","deleteAppUser","useState","profile","token","isProfileFound","setProfileFound","deleteUser","setDeleteUser","roProfile","useHistory","useEffect","prof","JSON","parse","Buffer","from","split","toString","console","log","param","whereKeyValues","getUserList","response","data","users","length","_id","googleLogout","clientId","src","Logo","alt","DeviceImage","to","onClick","gender","onSuccess","credentialResponse","credential","onError","LoginHelp"],"mappings":"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","file":"static/js/69.94eee1bc.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport './Input.scss';\n\nfunction Input({\n    placeholder,\n    type,\n    onChange,\n    onBlur,\n    value,\n    className,\n    message,\n    name,\n    min,\n    max,\n    disabled,\n    isError\n}) {\n    if(type === \"textarea\") {\n        return (\n        <>\n            <textarea\n                name={name}\n                id={name}\n                className={className}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n        )\n    }\n    else if(type === 'date' || type === 'datetime-local') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    placeholder={placeholder}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                    max={\"9999-12-31\"}\n                    disabled={disabled}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else if(type === 'number') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                    max={max}\n                    disabled={disabled}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else return (\n        <>\n            <input\n                name={name}\n                className={className} \n                type={type}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default memo(Input) \n","import * as yup from 'yup';\n\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\nconst UserRegex = /^\\S*$/;\n\nexport const validationFormLogin = yup.object({\n    userName: yup.string('Enter your email').required('Email is required'),\n    password: yup.string('Enter your password').required('Password is required')\n})\n\nexport const validationFormRegister = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    accountName: yup.string('Enter your name').required('Name is required'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => password && confirmPassword === password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationFormEdit = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                (img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)) || (!img)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n        //buat nambahin misal upload background. apakah akan masuk kesini?\n        \n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => (password && confirmPassword === password) || !password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationProgram = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    endDate: yup.date('Insert end date').required('Date is required'),\n    category: yup.string(),\n    targetAudiance: yup.array().min(1, 'Pilih minimal 1'),\n    contentPrograms: yup.array().min(1).of(\n        yup.object({\n            namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\n            contentName: yup.string().required('Judul Tahapan harus diisi'),\n            contents: yup.string().required('Isi Tahapan harus diisi'),\n            startDate: yup.date('Insert start date').required('Date is required'),\n            endDate: yup.date('Insert end date').required('Date is required'),\n            answerKey: yup.string().when('category', {\n                is: 'Ujian',\n                then: yup.string().required('Kunci Jawaban harus diisi'),\n                otherwise: yup.string()\n            })\n        })\n    )\n})\n\nexport const validationProgramEdit = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n});\n\nexport const validationStepEdit = yup.object({\n    namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\n    contentName: yup.string().required('Judul Tahapan harus diisi'),\n    contents: yup.string().required('Isi Tahapan harus diisi'),\n});\n\nexport const validationContent = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description'),\n    contents: yup.string('Enter the content description').required('Content is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    endDate: yup.date('Insert end date').required('Date is required'),\n    isActive: yup.boolean(),\n    topics: yup.array().min(1),\n    targetAudience: yup.array().min(1)\n})\n\nexport const validationContentEdit = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description'),\n    contents: yup.string('Enter the content description').required('Content is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n});\n\nexport const validationUserEdit = yup.object({\n    nameUser: yup.string('Enter your content title').required('User name is required'),\n    emailUser: yup.string('Enter the content description').required('Email is required').email('Email not valid'),\n    birdDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationNotification = yup.object({\n    destination: yup.array().min(1),\n    messageSubject: yup.string('Enter the message subject').required('Message Subject is required'),\n    messageContent: yup.string('Enter the message content').required('Message Content is required'),\n    scheduleTime: yup.date('Insert start date').required('Date is required'),\n    mediaType: yup.string('Enter the media type').required('Media type is required'),\n    category: yup.string('Enter the category').required('Category is required')\n})\n\nexport const validationAudience = yup.object({\n    audianceName: yup.string('Enter your audience name').required('Audience Name is required')\n})\n\nexport const validationNotifCategory = yup.object({\n    category: yup.string('Enter category name').required('Category is required'),\n    description: yup.string('Enter description').required('Description is required')\n})\n\nexport const validationProgCategory = yup.object({\n    category: yup.string('Enter category name').required('Category is required'),\n    description: yup.string('Enter description').required('Description is required')\n})\n\nexport const validationStaff = yup.object({\n    emailUser: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    userName: yup.string('Enter your name').required('Name is required').matches(UserRegex, 'Invalid username format'),\n    phone: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    userType: yup.string(),\n    userLevel: yup.string(),\n    groupMitraAsuhId: yup.string().when('userType', {\n        is: 'Co-Brand-Group',\n        then: yup.string().required('Grup Mitra Asuh harus diisi'),\n        otherwise: yup.string()\n    }),\n    sekolah: yup.string().when('userType', {\n        is: 'Operator-Sekolah',\n        then: yup.string().required('Sekolah harus diisi'),\n        otherwise: yup.string()\n    }),\n});\n\nexport const validationRegistration = yup.object({\n    nama: yup.string('Enter your name').required('Name is required'),\n    alamat: yup.string('Enter your address').required('Address is required'),\n    nik: yup.string('Enter your NIK').required('NIK is required').matches(PhoneRegex, 'Invalid NIK format').min(16, 'NIK should consist of 16 numbers').max(16, 'NIK should consist of 16 numbers'),\n    ktp: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    emailUser: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    userName: yup.string('Enter your username').required('Username is required').matches(UserRegex, 'Invalid username format'),\n    phone: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    userType: yup.string(),\n    userLevel: yup.string(),\n    groupMitraAsuhId: yup.string().when('userType', {\n        is: 'Co-Brand-Group',\n        then: yup.string().required('Grup Mitra Asuh harus diisi'),\n        otherwise: yup.string()\n    }),\n    sekolah: yup.string().when('userType', {\n        is: 'Operator-Sekolah',\n        then: yup.string().required('Sekolah harus diisi'),\n        otherwise: yup.string()\n    }),\n})\n\nexport const validationCommunity = yup.object({\n    cobrandComunityName: yup.string('Enter your community name').required('Community name is required'),\n    partComunityName: yup.string('Enter your community name')\n})\n\nexport const validationGroupMitraAsuh = yup.object({\n    groupMitraAsuhName: yup.string('Enter your group name').required('Group name is required'),\n})\n\nexport const validationContentTopic = yup.object({\n    topicName: yup.string('Enter topic name').required('Topic Name is required')\n})\n\nexport const validationScreenTime = yup.object({\n    controlParameterName: yup.string('Enter category name').required('Category is required'),\n    controlParameterValue: yup.number().required('Number is required')\n})","import React, {useState, useEffect} from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport './RequestDeleteUser.scss';\nimport Logo from './../../../assets/img/Logo_4.png'\nimport DeviceImage from './../../../assets/img/device3.png';\nimport InputComponent from '../../../components/UI/Input/Input';\nimport RKLoader from '../../../components/UI/RKLoader/RKLoader';\nimport { useFormik } from 'formik';\nimport { validationFormLogin } from './../../../helpers/validation/validation';\nimport { connect } from 'react-redux';\nimport { auth } from './../../../store/actions/auth';\nimport { FiHelpCircle, FiXCircle } from 'react-icons/fi'\nimport LoginHelp from '../../../components/UI/Help/LoginHelp/LoginHelp';\nimport { GoogleOAuthProvider, GoogleLogin, googleLogout } from '@react-oauth/google';\nimport { getUserList } from '../../../components/API/filterPublic';\nimport { deleteAppUser } from '../../../store/actions/dashboard';\n\nfunction RequestDeleteUser({\n    onDeleteUser,\n    isLoading\n}) {\n    const [profile, setProfile] = useState(null);\n    const [token, setToken] = useState(null);\n    const [isProfileFound, setProfileFound] = useState(false);\n    const [deleteUser, setDeleteUser] = useState(false);\n    const [roProfile, setRoProfile] = useState(null);\n\n    const history = useHistory();\n\n    // function parseJwt (token) {\n    //     return JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());\n    // }\n\n    useEffect(() => {\n        if(token) {\n            const prof = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());\n            console.log(prof);\n            setProfile(prof);\n            var param = {\n                whereKeyValues: {\n                    emailUser: prof.email\n                }\n            }\n            getUserList(param)\n            .then(response => {\n                console.log(response);\n                if(response.data.users.length > 0) {\n                    setProfileFound(true);\n                    setRoProfile(response.data.users[0]);\n                }\n            })\n        }\n        // if(localStorage.getItem('loginMessage')) {\n        //     setLoginMessage(localStorage.getItem('loginMessage'));\n        //     localStorage.removeItem('loginMessage');\n        // }\n    }, [token])\n\n    useEffect(() => {\n        if(deleteUser){\n            onDeleteUser(roProfile._id, roProfile.emailUser, googleLogout, setToken, setProfile, setRoProfile)\n        }\n    }, [deleteUser])\n\n    return (\n        <GoogleOAuthProvider clientId=\"587712446487-j1ms2ukfm0evgqpps9rgusum45l2fgil.apps.googleusercontent.com\">\n            {/* {showHelp ? <LoginHelp /> : null}\n            {showHelp ? (\n                <button \n                    className=\"CloseHelp\"\n                    onClick={() => {\n                    setShowHelp(false);\n                }}><FiXCircle/> </button>\n            ) : null} */}\n            <div className=\"LoginBg\">\n            <div className=\"Login\">\n                <div className=\"Login-top\">\n                    <img src={Logo} className=\"Login-top-img\" alt=\"logo top\" />\n                </div>\n             \n                <div className=\"Login-middle\">\n                        <div className=\"Login-middle-left\">\n                            <img \n                                src={DeviceImage} \n                                alt=\"Device \" \n                                className=\"Login-middle-left-img\"\n                            />\n                            <NavLink\n                                to=\"/\" \n                                className=\"Login-middle-left-help\"\n                                onClick={() => {\n                                // setShowHelp(true);\n                            }}><FiHelpCircle/>  Bantuan</NavLink>\n                        </div>\n                        <div className=\"Login-middle-right\">\n                            {!profile ? <div className=\"Login-middle-right-heading mb-small\">\n                                <h1>Silakan login dengan akun Google Anda yang dipakai pada aplikasi untuk menghapus akun.</h1>\n                                <GoogleLogin\n                                    onSuccess={credentialResponse => {\n                                        setToken(credentialResponse.credential);\n                                        console.log(credentialResponse);\n                                    }}\n                                    onError={() => {\n                                        console.log('Login Failed');\n                                    }}\n                                />;\n                            </div> : <div className=\"Login-middle-right-heading mb-small\">\n                                {isProfileFound && roProfile ? <>\n                                    <h3>Data Akun Anda:</h3>\n                                    <h4>Nama: {roProfile.nameUser}</h4>\n                                    <h4>Tanggal Lahir: {roProfile.birdDate}</h4>\n                                    <h4>Tipe Pengguna: {roProfile.userType}</h4>\n                                    <h4>Jenis Kelamin: {roProfile.gender}</h4>\n                                    <br/>\n                                    <h5>Apakah Anda yakin ingin menghapus akun ini? Akun tidak dapat dipulihkan kembali setelah dihapus!</h5>\n                                    <button onClick={() => {\n                                        setDeleteUser(true)\n                                    }}>Hapus Pengguna!</button>\n                                </> : \n                                <h2>Data Anda tidak ditemukan! Silakan logout lalu login kembali dengan akun Google yang terhubung dengan aplikasi.</h2>}\n                                <button onClick={() => {\n                                    googleLogout();\n                                    setRoProfile(null);\n                                    setToken(null);\n                                    setProfile(null);\n                                }}>\n                                    Logout\n                                </button>\n                            </div> }\n                            <p className=\"Login-middle-right-joinus\">Ingin bermitra dengan kami? <NavLink to=\"/register\">Daftar Sekarang</NavLink> </p>\n                        </div>\n                    </div> \n                \n                {isLoading && (\n                    <RKLoader />\n                )}\n                <div className=\"Login-bottom\"></div>\n            </div>\n            </div>\n        </GoogleOAuthProvider>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onDeleteUser: (id, email, logout, setToken, setProfile, setRoProfile) => dispatch( deleteAppUser( id, email, logout, setToken, setProfile, setRoProfile )  )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (RequestDeleteUser)\n","export default __webpack_public_path__ + \"static/media/device3.0867323d.png\";","import React from 'react';\nimport './LoginHelp.scss';\n\nfunction LoginHelp() {\n    return (\n        <div className=\"HelpOverlay\">\n            <div className=\"HelpOverlay-content\">\n                <h1>Guide Co-Brand Ruang Ortu</h1>\n                <h2>Registrasi</h2>\n                <p>Pada halaman utama (Login), klik pada tulisan <span className=\"HelpOverlay-content-keyword\">Daftar Sekarang</span> untuk masuk ke halaman registrasi. Pada halaman registrasi, Anda harus mengisi delapan kolom yang disediakan, yaitu:</p>\n                <p><br/></p>\n                <ol>\n                    <li>E-Mail</li>\n                    <li>Password</li>\n                    <li>Confirm Password (isi harus sama dengan password)</li>\n                    <li>Your Name (Nama Anda)</li>\n                    <li>Your Brand Name (Nama Brand Anda)</li>\n                    <li>Phone Number (Nomor Telepon yang terhubung dengan Brand Anda)</li>\n                    <li>Address (Alamat Brand Anda)</li>\n                    <li>Photo (Foto atau Gambar Logo dari Brand Anda)</li>\n                </ol>\n                <p><br/></p>\n                <p>Setelah mengisi delapan kolom di atas, klik <span className=\"HelpOverlay-content-keyword\">Sign Up</span> untuk mendaftarkan Brand Anda. Jika berhasil, Anda akan dialihkan ke halaman <span className=\"HelpOverlay-content-keyword\">Login</span> untuk masuk.</p>\n                <p><br/></p>\n                <p><br/></p>\n                <h2>Login</h2>\n                <p>Pada halaman login, masukkan e-mail dan password yang telah dibuat pada saat registrasi. Lalu, klik tombol <span className=\"HelpOverlay-content-keyword\">Login</span>. Jika berhasil, Anda akan dialihkan ke halaman Dashboard.</p>   \n            </div>\n        </div>\n    )\n}\n\nexport default LoginHelp"],"sourceRoot":""}