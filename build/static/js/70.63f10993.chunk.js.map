{"version":3,"sources":["components/UI/Input/Input.js","helpers/validation/validation.js","containers/CoBrand/Message/AddNotification/AddNotification.js","components/UI/Heading/Heading.js"],"names":["Input","placeholder","type","onChange","onBlur","value","className","message","name","min","max","disabled","isError","id","memo","PhoneRegex","UserRegex","validationFormLogin","yup","userName","required","password","validationFormEdit","email","accountName","cobrandName","thumbnail","test","img","includes","size","phoneNumber","matches","address","confirmPassword","when","schema","validationProgram","programName","programDescription","programThumbnail","startDate","endDate","category","targetAudiance","contentPrograms","of","namaTahapan","contentName","contents","answerKey","is","then","otherwise","validationProgramEdit","validationStepEdit","validationContent","contentDescription","contentSource","contentThumbnail","isActive","topics","targetAudience","validationContentEdit","validationUserEdit","nameUser","emailUser","birdDate","validationNotification","destination","messageSubject","messageContent","scheduleTime","mediaType","validationAudience","audianceName","validationNotifCategory","description","validationProgCategory","validationStaff","phone","userType","userLevel","groupMitraAsuhId","sekolah","validationRegistration","nama","alamat","nik","ktp","validationCommunity","cobrandComunityName","partComunityName","validationGroupMitraAsuh","groupMitraAsuhName","validationContentTopic","topicName","validationScreenTime","controlParameterName","controlParameterValue","connect","state","isLoading","auth","dispatch","onAddNotification","cobrandEmail","useSchedule","cobrandComunityId","history","addNotification","useHistory","useState","Date","sche","setSche","JSON","parse","localStorage","getItem","cobrandComId","emailList","setEmailList","notifContext","setNotifContext","isTargetChecked","setTargetChecked","isScheduleChecked","setScheduleChecked","targetList","setTargetList","categoryList","setCategoryList","isPageLoading","setPageLoading","useEffect","x","setTime","getTime","split","removeItem","params","promiseAudience","getAudienceList","promiseCategory","getNotificationCategoryList","Promise","all","response","data","Data","headingName","routes","path","initialValues","toISOString","slice","validationSchema","validateOnChange","onSubmit","values","handleChange","handleSubmit","handleBlur","setFieldValue","errors","touched","onClick","e","currentTarget","checked","map","event","push","y","indexOf","splice","emails","_emails","getLabel","index","removeEmail","data-tag","data-tag-handle","Heading","length","item","i","exact","to"],"mappings":"mIAAA,2BAGA,SAASA,EAAT,GAaI,IAZAC,EAYD,EAZCA,YACAC,EAWD,EAXCA,KACAC,EAUD,EAVCA,SACAC,EASD,EATCA,OACAC,EAQD,EARCA,MACAC,EAOD,EAPCA,UACAC,EAMD,EANCA,QACAC,EAKD,EALCA,KACAC,EAID,EAJCA,IACAC,EAGD,EAHCA,IACAC,EAED,EAFCA,SACAC,EACD,EADCA,QAEA,MAAY,aAATV,EAEC,qCACI,0BACIM,KAAMA,EACNK,GAAIL,EACJF,UAAWA,EACXL,YAAaA,EACbE,SAAUA,EACVC,OAAQA,EACRC,MAAOA,EACPM,SAAUA,IAEbC,GACG,qBAAKN,UAAU,UAAf,SACI,sBAAMA,UAAU,iBAAhB,SAAkCC,SAMjC,SAATL,GAA4B,mBAATA,EAEnB,qCACI,uBACIM,KAAMA,EACNF,UAAWA,EACXJ,KAAMA,EACND,YAAaA,EACbE,SAAUA,EACVC,OAAQA,EACRC,MAAOA,EACPI,IAAKA,EACLC,IAAK,aACLC,SAAUA,IAEbC,GACG,qBAAKN,UAAU,UAAf,SACI,sBAAMA,UAAU,iBAAhB,SAAkCC,SAMrC,WAATL,EAEA,qCACI,uBACIM,KAAMA,EACNF,UAAWA,EACXJ,KAAMA,EACNC,SAAUA,EACVC,OAAQA,EACRC,MAAOA,EACPI,IAAKA,EACLC,IAAKA,EACLC,SAAUA,IAEbC,GACG,qBAAKN,UAAU,UAAf,SACI,sBAAMA,UAAU,iBAAhB,SAAkCC,SAOlD,qCACI,uBACIC,KAAMA,EACNF,UAAWA,EACXJ,KAAMA,EACND,YAAaA,EACbE,SAAUA,EACVC,OAAQA,EACRC,MAAOA,EACPM,SAAUA,IAEbC,GACG,qBAAKN,UAAU,UAAf,SACI,sBAAMA,UAAU,iBAAhB,SAAkCC,SAOvCO,mBAAKd,I,uDCxGpB,inBAEMe,EAAa,6FACbC,EAAY,QAELC,EAAsBC,IAAW,CAC1CC,SAAUD,IAAW,oBAAoBE,SAAS,qBAClDC,SAAUH,IAAW,uBAAuBE,SAAS,0BAoC5CE,GAjCyBJ,IAAW,CAC7CK,MAAOL,IAAW,oBAAoBE,SAAS,qBAAqBG,MAAM,mBAC1EC,YAAaN,IAAW,mBAAmBE,SAAS,oBACpDK,YAAaP,IAAW,yBAAyBE,SAAS,0BAC1DM,UAAWR,IAAU,+BAA+BE,SAAS,qBACxDO,KACG,YAAa,0DACb,SAACC,GAAD,OACIA,GAAO,CAAC,YAAa,YAAa,cAAcC,SAASD,EAAI1B,SAEpEyB,KACG,YAAa,0DACb,SAACC,GACG,OAAGA,GACQA,EAAIE,MAAQ,WAOnCC,YAAab,IAAW,2BAA2BE,SAAS,4BAA4BY,QAAQjB,EAAY,+BAC5GkB,QAASf,IAAW,sBAAsBE,SAAS,uBACnDC,SAAUH,IAAW,uBAAuBE,SAAS,wBAAwBX,IAAI,EAAG,2CACpFyB,gBAAiBhB,IAAW,yBAAyBE,SAAS,wBACzDe,KAAK,YAAY,SAACd,EAAUe,GACzB,OAAOA,EAAOT,KAAK,CACfA,KAAM,SAAAO,GAAe,OAAIb,GAAYa,IAAoBb,GACzDd,QAAS,gCAKSW,IAAW,CACzCK,MAAOL,IAAW,oBAAoBE,SAAS,qBAAqBG,MAAM,mBAC1EE,YAAaP,IAAW,yBAAyBE,SAAS,0BAC1DM,UAAWR,IAAU,+BAChBS,KACG,YAAa,0DACb,SAACC,GAAD,OACKA,GAAO,CAAC,YAAa,YAAa,cAAcC,SAASD,EAAI1B,QAAY0B,KAEjFD,KACG,YAAa,0DACb,SAACC,GACG,OAAGA,GACQA,EAAIE,MAAQ,WASnCC,YAAab,IAAW,2BAA2BE,SAAS,4BAA4BY,QAAQjB,EAAY,+BAC5GkB,QAASf,IAAW,sBAAsBE,SAAS,uBACnDC,SAAUH,IAAW,uBAAuBT,IAAI,EAAG,2CACnDyB,gBAAiBhB,IAAW,yBACvBiB,KAAK,YAAY,SAACd,EAAUe,GACzB,OAAOA,EAAOT,KAAK,CACfA,KAAM,SAAAO,GAAe,OAAKb,GAAYa,IAAoBb,IAAcA,GACxEd,QAAS,iCAKZ8B,EAAoBnB,IAAW,CACxCoB,YAAapB,IAAW,4BAA4BE,SAAS,6BAC7DmB,mBAAoBrB,IAAW,iCAAiCE,SAAS,mCACzEoB,iBAAkBtB,IAAU,+BAA+BE,SAAS,qBAC/DO,KACG,YAAa,0DACb,SAACC,GAAD,OACIA,GAAO,CAAC,YAAa,YAAa,cAAcC,SAASD,EAAI1B,SAEpEyB,KACG,YAAa,0DACb,SAACC,GACG,OAAGA,GACQA,EAAIE,MAAQ,WAOnCW,UAAWvB,IAAS,qBAAqBE,SAAS,oBAClDsB,QAASxB,IAAS,mBAAmBE,SAAS,oBAC9CuB,SAAUzB,MACV0B,eAAgB1B,MAAYT,IAAI,EAAG,mBACnCoC,gBAAiB3B,MAAYT,IAAI,GAAGqC,GAChC5B,IAAW,CACP6B,YAAa7B,MAAaE,SAAS,4BACnC4B,YAAa9B,MAAaE,SAAS,6BACnC6B,SAAU/B,MAAaE,SAAS,2BAChCqB,UAAWvB,IAAS,qBAAqBE,SAAS,oBAClDsB,QAASxB,IAAS,mBAAmBE,SAAS,oBAC9C8B,UAAWhC,MAAaiB,KAAK,WAAY,CACrCgB,GAAI,QACJC,KAAMlC,MAAaE,SAAS,6BAC5BiC,UAAWnC,aAMdoC,EAAwBpC,IAAW,CAC5CoB,YAAapB,IAAW,4BAA4BE,SAAS,6BAC7DmB,mBAAoBrB,IAAW,iCAAiCE,SAAS,mCACzEqB,UAAWvB,IAAS,qBAAqBE,SAAS,sBAGzCmC,EAAqBrC,IAAW,CACzC6B,YAAa7B,MAAaE,SAAS,4BACnC4B,YAAa9B,MAAaE,SAAS,6BACnC6B,SAAU/B,MAAaE,SAAS,6BAGvBoC,EAAoBtC,IAAW,CACxC8B,YAAa9B,IAAW,4BAA4BE,SAAS,6BAC7DqC,mBAAoBvC,IAAW,iCAC/B+B,SAAU/B,IAAW,iCAAiCE,SAAS,uBAC/DsC,cAAexC,IAAW,4BAA4BE,SAAS,8BAC/DuC,iBAAkBzC,IAAU,+BAA+BE,SAAS,qBAC/DO,KACG,YAAa,0DACb,SAACC,GAAD,OACIA,GAAO,CAAC,YAAa,YAAa,cAAcC,SAASD,EAAI1B,SAEpEyB,KACG,YAAa,0DACb,SAACC,GACG,OAAGA,GACQA,EAAIE,MAAQ,WAOnCW,UAAWvB,IAAS,qBAAqBE,SAAS,oBAClDsB,QAASxB,IAAS,mBAAmBE,SAAS,oBAC9CwC,SAAU1C,MACV2C,OAAQ3C,MAAYT,IAAI,GACxBqD,eAAgB5C,MAAYT,IAAI,KAGvBsD,EAAwB7C,IAAW,CAC5C8B,YAAa9B,IAAW,4BAA4BE,SAAS,6BAC7DqC,mBAAoBvC,IAAW,iCAC/B+B,SAAU/B,IAAW,iCAAiCE,SAAS,uBAC/DsC,cAAexC,IAAW,4BAA4BE,SAAS,8BAC/DqB,UAAWvB,IAAS,qBAAqBE,SAAS,sBAGzC4C,EAAqB9C,IAAW,CACzC+C,SAAU/C,IAAW,4BAA4BE,SAAS,yBAC1D8C,UAAWhD,IAAW,iCAAiCE,SAAS,qBAAqBG,MAAM,mBAC3F4C,SAAUjD,IAAS,qBAAqBE,SAAS,sBAGxCgD,EAAyBlD,IAAW,CAC7CmD,YAAanD,MAAYT,IAAI,GAC7B6D,eAAgBpD,IAAW,6BAA6BE,SAAS,+BACjEmD,eAAgBrD,IAAW,6BAA6BE,SAAS,+BACjEoD,aAActD,IAAS,qBAAqBE,SAAS,oBACrDqD,UAAWvD,IAAW,wBAAwBE,SAAS,0BACvDuB,SAAUzB,IAAW,sBAAsBE,SAAS,0BAG3CsD,EAAqBxD,IAAW,CACzCyD,aAAczD,IAAW,4BAA4BE,SAAS,+BAGrDwD,EAA0B1D,IAAW,CAC9CyB,SAAUzB,IAAW,uBAAuBE,SAAS,wBACrDyD,YAAa3D,IAAW,qBAAqBE,SAAS,6BAG7C0D,EAAyB5D,IAAW,CAC7CyB,SAAUzB,IAAW,uBAAuBE,SAAS,wBACrDyD,YAAa3D,IAAW,qBAAqBE,SAAS,6BAG7C2D,EAAkB7D,IAAW,CACtCgD,UAAWhD,IAAW,oBAAoBE,SAAS,qBAAqBG,MAAM,mBAC9EJ,SAAUD,IAAW,mBAAmBE,SAAS,oBAAoBY,QAAQhB,EAAW,2BACxFgE,MAAO9D,IAAW,2BAA2BE,SAAS,4BAA4BY,QAAQjB,EAAY,+BACtGM,SAAUH,IAAW,uBAAuBE,SAAS,wBAAwBX,IAAI,EAAG,2CACpFwE,SAAU/D,MACVgE,UAAWhE,MACXiE,iBAAkBjE,MAAaiB,KAAK,WAAY,CAC5CgB,GAAI,iBACJC,KAAMlC,MAAaE,SAAS,+BAC5BiC,UAAWnC,QAEfkE,QAASlE,MAAaiB,KAAK,WAAY,CACnCgB,GAAI,mBACJC,KAAMlC,MAAaE,SAAS,uBAC5BiC,UAAWnC,UAINmE,EAAyBnE,IAAW,CAC7CoE,KAAMpE,IAAW,mBAAmBE,SAAS,oBAC7CmE,OAAQrE,IAAW,sBAAsBE,SAAS,uBAClDoE,IAAKtE,IAAW,kBAAkBE,SAAS,mBAAmBY,QAAQjB,EAAY,sBAAsBN,IAAI,GAAI,oCAAoCC,IAAI,GAAI,oCAC5J+E,IAAKvE,IAAU,+BAA+BE,SAAS,qBAClDO,KACG,YAAa,0DACb,SAACC,GAAD,OACIA,GAAO,CAAC,YAAa,YAAa,cAAcC,SAASD,EAAI1B,SAEpEyB,KACG,YAAa,0DACb,SAACC,GACG,OAAGA,GACQA,EAAIE,MAAQ,WAOnCoC,UAAWhD,IAAW,oBAAoBE,SAAS,qBAAqBG,MAAM,mBAC9EJ,SAAUD,IAAW,uBAAuBE,SAAS,wBAAwBY,QAAQhB,EAAW,2BAChGgE,MAAO9D,IAAW,2BAA2BE,SAAS,4BAA4BY,QAAQjB,EAAY,+BACtGM,SAAUH,IAAW,uBAAuBE,SAAS,wBAAwBX,IAAI,EAAG,2CACpFwE,SAAU/D,MACVgE,UAAWhE,MACXiE,iBAAkBjE,MAAaiB,KAAK,WAAY,CAC5CgB,GAAI,iBACJC,KAAMlC,MAAaE,SAAS,+BAC5BiC,UAAWnC,QAEfkE,QAASlE,MAAaiB,KAAK,WAAY,CACnCgB,GAAI,mBACJC,KAAMlC,MAAaE,SAAS,uBAC5BiC,UAAWnC,UAINwE,EAAsBxE,IAAW,CAC1CyE,oBAAqBzE,IAAW,6BAA6BE,SAAS,8BACtEwE,iBAAkB1E,IAAW,+BAGpB2E,EAA2B3E,IAAW,CAC/C4E,mBAAoB5E,IAAW,yBAAyBE,SAAS,4BAGxD2E,EAAyB7E,IAAW,CAC7C8E,UAAW9E,IAAW,oBAAoBE,SAAS,4BAG1C6E,EAAuB/E,IAAW,CAC3CgF,qBAAsBhF,IAAW,uBAAuBE,SAAS,wBACjE+E,sBAAuBjF,MAAaE,SAAS,yB,kMCFlCgF,uBAdS,SAAAC,GAEpB,MAAO,CACHC,UAAWD,EAAME,KAAKD,cAIH,SAACE,GACxB,MAAO,CACHC,kBAAmB,SAAEC,EAAcrC,EAAaC,EAAgBC,EAAgBoC,EAAanC,EAAcC,EAAW9B,EAAUiE,EAAmBC,GAAhI,OACfL,EAASM,YAAiBJ,EAAcrC,EAAaC,EAAgBC,EAAgBoC,EAAanC,EAAcC,EAAW9B,EAAUiE,EAAmBC,QAIrJT,EA3Pf,YAGI,IAFAK,EAED,EAFCA,kBACAH,EACD,EADCA,UAGMO,EAAUE,cAChB,EAAwBC,mBAAS,IAAIC,MAArC,mBAAOC,EAAP,KAAaC,EAAb,KACMT,EAAeU,KAAKC,MAAMC,aAAaC,QAAQ,aAAab,aAC5Dc,EAAeJ,KAAKC,MAAMC,aAAaC,QAAQ,aAAaX,kBAClE,EAAkCI,mBAAS,IAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KACA,EAAwCV,mBAAS,IAAjD,mBAAOW,EAAP,KAAqBC,EAArB,KACA,EAA4CZ,oBAAS,GAArD,mBAAOa,EAAP,KAAwBC,EAAxB,KACA,EAAgDd,oBAAS,GAAzD,mBAAOe,EAAP,KAA0BC,EAA1B,KAEA,EAAoChB,mBAAS,IAA7C,mBAAOiB,EAAP,KAAmBC,EAAnB,KACA,EAAwClB,mBAAS,IAAjD,mBAAOmB,EAAP,KAAqBC,EAArB,KAEA,EAAwCpB,oBAAS,GAAjD,mBAAOqB,EAAP,KAAsBC,EAAtB,KA4BA,OA1BAC,qBAAU,WACN,IAAIC,EAAItB,EACRsB,EAAEC,QAAQD,EAAEE,UAAY,OACxBvB,EAAQqB,GAELlB,aAAaC,QAAQ,aACpBG,EAAaJ,aAAaC,QAAQ,WAAWoB,MAAM,MACnDrB,aAAasB,WAAW,YAEzBtB,aAAaC,QAAQ,kBACpBK,EAAgBN,aAAaC,QAAQ,iBACrCD,aAAasB,WAAW,iBAE5B,IAAIC,EAAS,GACTC,EAAkBC,YAAgBF,GAClCG,EAAkBC,YAA4BJ,GAClDK,QAAQC,IAAI,CAACL,EAAiBE,IAC7B5F,MAAK,SAAAgG,GAGFlB,EAAckB,EAAS,GAAGC,KAAKC,MAC/BlB,EAAgBgB,EAAS,GAAGC,KAAKC,MACjChB,GAAe,QAEpB,IAEAD,EACQ,cAAC,IAAD,IAGP,qCACI,cAAC,IAAD,CAASkB,YAAY,kBAAkBC,OAAQ,CAC3C,CAAEC,KAAM,qBAAsBjJ,KAAM,cACpC,CAAEiJ,KAAM,yBAA0BjJ,KAAM,2BAE5C,cAAC,IAAD,CACIkJ,cAAgB,CACZrF,YAAaoD,EACbnD,eAAgBqD,EAChBpD,eAAgB,GAChBoC,aAAa,EACbnC,aAAc0C,EAAKyC,cAAcC,MAAM,GAAI,GAC3CnF,UAAW,QACX9B,SAAU,QAGdkH,iBAAoBzF,IACpB0F,kBAAoB,EACpBC,SAAa,SAAAC,GACTvD,EAAkBC,EAAcsD,EAAO3F,YAAa2F,EAAO1F,eAAgB0F,EAAOzF,eAAgByF,EAAOrD,YAAaqD,EAAOxF,aAAcwF,EAAOvF,UAAWuF,EAAOrH,SAAU6E,EAAcX,IAdpM,SAiBC,gBAAEoD,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,aAAcC,EAA9B,EAA8BA,WAAYC,EAA1C,EAA0CA,cAAeJ,EAAzD,EAAyDA,OAAQK,EAAjE,EAAiEA,OAAQC,EAAzE,EAAyEA,QAAzE,OACG,sBAAMP,SAAUG,EAAhB,SACI,sBAAK5J,UAAU,kBAAf,UACI,sBAAKA,UAAU,aAAf,UACI,uBAAOA,UAAU,mBAAjB,oBACA,wBAAOA,UAAU,oBAAjB,UACI,uBAAOJ,KAAK,WAAWqK,QAAS,SAACC,GACzBJ,EAAc,cAAe,IAC9BI,EAAEC,cAAcC,QAAS5C,GAAiB,IAEzCsC,EAAc,cAAe3C,GAC7BK,GAAiB,OAIzB,yDAEHD,EACG,qBAAKvH,UAAU,oBAAf,SACK2H,EAAW0C,KAAI,SAAAH,GACZ,OAAO,kCACH,uBAAOtK,KAAK,WAAWG,MAAOmK,EAAE7F,aAAc4F,QAAS,SAACK,GACpD,GAAGA,EAAMH,cAAcC,QAAS,CAC5B,IAAIlC,EAAIwB,EAAO3F,YACfmE,EAAEqC,KAAKL,EAAE7F,cACTyF,EAAc,cAAe5B,OAE5B,CACD,IAAIA,EAAIwB,EAAO3F,YACXyG,EAAItC,EAAEuC,QAAQP,EAAE7F,cACjBmG,GAAK,GAAGtC,EAAEwC,OAAOF,EAAG,GACvBV,EAAc,cAAe5B,OAIzC,4BAAIgC,EAAE7F,uBAId,cAAC,kBAAD,CACI1E,YAAY,oBACZgL,OAAQjB,EAAO3F,YACflE,SAAU,SAAC+K,GACPxD,EAAawD,GACbd,EAAc,cAAec,IAEjCC,SAAU,SACN5J,EACA6J,EACAC,GAEA,OACI,sBAAKC,YAAA,EAAL,UACK/J,EACD,sBAAMgK,mBAAA,EAAgBhB,QAAS,kBAAMc,EAAYD,IAAjD,oBAFeA,MAUlCd,EAAQjG,aAAe,sBAAM/D,UAAU,iBAAhB,SAAkC+J,EAAOhG,iBAErE,sBAAK/D,UAAU,aAAf,UACI,uBAAOA,UAAU,mBAAjB,yBACA,cAAC,IAAD,CACIJ,KAAK,OACLM,KAAK,iBACLF,UAAU,iDACVL,YAAY,UACZI,MAAO2J,EAAO1F,eACdnE,SAAU8J,EACV7J,OAAQ+J,IAEXG,EAAQhI,aAAe,sBAAMhC,UAAU,iBAAhB,SAAkC+J,EAAO/H,iBAErE,sBAAKhC,UAAU,aAAf,UACI,uBAAOA,UAAU,mBAAjB,uBACA,cAAC,IAAD,CACIJ,KAAK,WACLM,KAAK,iBACLP,YAAY,iBACZI,MAAO2J,EAAOzF,eACdpE,SAAU8J,EACV7J,OAAQ+J,IAEZG,EAAQ/F,gBAAkB,sBAAMjE,UAAU,iBAAhB,SAAkC+J,EAAO9F,oBAEvE,sBAAKjE,UAAU,aAAf,UACI,uBAAOA,UAAU,mBAAjB,+BACA,wBAAOA,UAAU,oBAAjB,UACI,uBAAOJ,KAAK,WAAWqK,QAAS,SAACC,GAC1BA,EAAEC,cAAcC,SACf1C,GAAmB,GACnBoC,EAAc,eAAe,KAG7BpC,GAAmB,GACnBoC,EAAc,eAAe,GAC7BA,EAAc,eAAgBlD,EAAKyC,cAAcC,MAAM,GAAI,QAInE,6CAEJ,cAAC,IAAD,CACI1J,KAAK,iBACLI,UAAU,oBACVE,KAAK,eACLC,KAAK,IAAIwG,MAAO0C,cAAcC,MAAM,GAAI,GACxCvJ,MAAO2J,EAAOxF,aACdrE,SAAU8J,EACV7J,OAAQ+J,EACRxJ,UAAWoH,IAEduC,EAAQ7H,WAAa,sBAAMnC,UAAU,iBAAhB,SAAkC+J,EAAO5H,eAEnE,sBAAKnC,UAAU,aAAf,UACI,uBAAOA,UAAU,mBAAjB,uBACA,yBACIE,KAAK,YACLH,MAAO2J,EAAOvF,UACdtE,SAAU,SAACqK,GACPJ,EAAc,YAAaI,EAAEC,cAAcpK,QAJnD,UAOI,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,SAAd,uBAEJiK,EAAQ/F,gBAAkB,sBAAMjE,UAAU,iBAAhB,SAAkC+J,EAAO9F,oBAEvE,sBAAKjE,UAAU,aAAf,UACI,uBAAOA,UAAU,mBAAjB,sBAEA,qBAAKA,UAAU,oBAAf,SACK6H,EAAawC,KAAI,SAAAH,GACd,OAAO,kCACH,uBAAOtK,KAAK,QAAQM,KAAK,WAAWH,MAAOmK,EAAE7H,SAAU+H,QAASV,EAAOrH,WAAa6H,EAAE7H,SAAUxC,SAAU,SAACyK,GACpGA,EAAMH,cAAcC,SACnBN,EAAc,WAAYQ,EAAMH,cAAcpK,UAI1D,4BAAImK,EAAE7H,mBAIb2H,EAAQ3H,UAAY,sBAAMrC,UAAU,iBAAhB,SAAkC+J,EAAO1H,cAElE,8BACI,wBAAQrC,UAAU,iBAAiBJ,KAAK,SAAxC,wCASfoG,EAAY,cAAC,IAAD,IAAc,Y,gCCvPvC,+BAsBekF,IAlBf,YAAgD,IAA7BjC,EAA4B,EAA5BA,YAA4B,IAAfC,cAAe,MAAN,GAAM,EAE3C,OACI,sBAAKlJ,UAAU,UAAf,UACI,6BAAKiJ,IACL,oBAAIjJ,UAAU,qBAAd,SACKkJ,EAAOiC,OAAS,GAAKjC,EAAOmB,KAAI,SAACe,EAAMC,GACpC,OAAGD,EAAKjC,KACG,qBAAInJ,UAAU,0BAAd,UAAgD,cAAC,IAAD,CAASsL,OAAK,EAACC,GAAIH,EAAKjC,KAAxB,SAA+BiC,EAAKlL,OAApF,MAA6CmL,GAE7C,qBAAIrL,UAAU,0BAAd,cAAiD,+BAAOoL,EAAKlL,OAA7D,MAA6CmL,a","file":"static/js/70.63f10993.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport './Input.scss';\n\nfunction Input({\n    placeholder,\n    type,\n    onChange,\n    onBlur,\n    value,\n    className,\n    message,\n    name,\n    min,\n    max,\n    disabled,\n    isError\n}) {\n    if(type === \"textarea\") {\n        return (\n        <>\n            <textarea\n                name={name}\n                id={name}\n                className={className}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n        )\n    }\n    else if(type === 'date' || type === 'datetime-local') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    placeholder={placeholder}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                    max={\"9999-12-31\"}\n                    disabled={disabled}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else if(type === 'number') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                    max={max}\n                    disabled={disabled}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else return (\n        <>\n            <input\n                name={name}\n                className={className} \n                type={type}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default memo(Input) \n","import * as yup from 'yup';\n\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\nconst UserRegex = /^\\S*$/;\n\nexport const validationFormLogin = yup.object({\n    userName: yup.string('Enter your email').required('Email is required'),\n    password: yup.string('Enter your password').required('Password is required')\n})\n\nexport const validationFormRegister = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    accountName: yup.string('Enter your name').required('Name is required'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => password && confirmPassword === password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationFormEdit = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                (img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)) || (!img)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n        //buat nambahin misal upload background. apakah akan masuk kesini?\n        \n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => (password && confirmPassword === password) || !password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationProgram = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    endDate: yup.date('Insert end date').required('Date is required'),\n    category: yup.string(),\n    targetAudiance: yup.array().min(1, 'Pilih minimal 1'),\n    contentPrograms: yup.array().min(1).of(\n        yup.object({\n            namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\n            contentName: yup.string().required('Judul Tahapan harus diisi'),\n            contents: yup.string().required('Isi Tahapan harus diisi'),\n            startDate: yup.date('Insert start date').required('Date is required'),\n            endDate: yup.date('Insert end date').required('Date is required'),\n            answerKey: yup.string().when('category', {\n                is: 'Ujian',\n                then: yup.string().required('Kunci Jawaban harus diisi'),\n                otherwise: yup.string()\n            })\n        })\n    )\n})\n\nexport const validationProgramEdit = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n});\n\nexport const validationStepEdit = yup.object({\n    namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\n    contentName: yup.string().required('Judul Tahapan harus diisi'),\n    contents: yup.string().required('Isi Tahapan harus diisi'),\n});\n\nexport const validationContent = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description'),\n    contents: yup.string('Enter the content description').required('Content is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    endDate: yup.date('Insert end date').required('Date is required'),\n    isActive: yup.boolean(),\n    topics: yup.array().min(1),\n    targetAudience: yup.array().min(1)\n})\n\nexport const validationContentEdit = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description'),\n    contents: yup.string('Enter the content description').required('Content is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n});\n\nexport const validationUserEdit = yup.object({\n    nameUser: yup.string('Enter your content title').required('User name is required'),\n    emailUser: yup.string('Enter the content description').required('Email is required').email('Email not valid'),\n    birdDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationNotification = yup.object({\n    destination: yup.array().min(1),\n    messageSubject: yup.string('Enter the message subject').required('Message Subject is required'),\n    messageContent: yup.string('Enter the message content').required('Message Content is required'),\n    scheduleTime: yup.date('Insert start date').required('Date is required'),\n    mediaType: yup.string('Enter the media type').required('Media type is required'),\n    category: yup.string('Enter the category').required('Category is required')\n})\n\nexport const validationAudience = yup.object({\n    audianceName: yup.string('Enter your audience name').required('Audience Name is required')\n})\n\nexport const validationNotifCategory = yup.object({\n    category: yup.string('Enter category name').required('Category is required'),\n    description: yup.string('Enter description').required('Description is required')\n})\n\nexport const validationProgCategory = yup.object({\n    category: yup.string('Enter category name').required('Category is required'),\n    description: yup.string('Enter description').required('Description is required')\n})\n\nexport const validationStaff = yup.object({\n    emailUser: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    userName: yup.string('Enter your name').required('Name is required').matches(UserRegex, 'Invalid username format'),\n    phone: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    userType: yup.string(),\n    userLevel: yup.string(),\n    groupMitraAsuhId: yup.string().when('userType', {\n        is: 'Co-Brand-Group',\n        then: yup.string().required('Grup Mitra Asuh harus diisi'),\n        otherwise: yup.string()\n    }),\n    sekolah: yup.string().when('userType', {\n        is: 'Operator-Sekolah',\n        then: yup.string().required('Sekolah harus diisi'),\n        otherwise: yup.string()\n    }),\n});\n\nexport const validationRegistration = yup.object({\n    nama: yup.string('Enter your name').required('Name is required'),\n    alamat: yup.string('Enter your address').required('Address is required'),\n    nik: yup.string('Enter your NIK').required('NIK is required').matches(PhoneRegex, 'Invalid NIK format').min(16, 'NIK should consist of 16 numbers').max(16, 'NIK should consist of 16 numbers'),\n    ktp: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    emailUser: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    userName: yup.string('Enter your username').required('Username is required').matches(UserRegex, 'Invalid username format'),\n    phone: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    userType: yup.string(),\n    userLevel: yup.string(),\n    groupMitraAsuhId: yup.string().when('userType', {\n        is: 'Co-Brand-Group',\n        then: yup.string().required('Grup Mitra Asuh harus diisi'),\n        otherwise: yup.string()\n    }),\n    sekolah: yup.string().when('userType', {\n        is: 'Operator-Sekolah',\n        then: yup.string().required('Sekolah harus diisi'),\n        otherwise: yup.string()\n    }),\n})\n\nexport const validationCommunity = yup.object({\n    cobrandComunityName: yup.string('Enter your community name').required('Community name is required'),\n    partComunityName: yup.string('Enter your community name')\n})\n\nexport const validationGroupMitraAsuh = yup.object({\n    groupMitraAsuhName: yup.string('Enter your group name').required('Group name is required'),\n})\n\nexport const validationContentTopic = yup.object({\n    topicName: yup.string('Enter topic name').required('Topic Name is required')\n})\n\nexport const validationScreenTime = yup.object({\n    controlParameterName: yup.string('Enter category name').required('Category is required'),\n    controlParameterValue: yup.number().required('Number is required')\n})","import React, { useEffect, useState } from 'react';\nimport Heading from '../../../../components/UI/Heading/Heading';\nimport './AddNotification.scss';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport { addNotification } from '../../../../store/actions/dashboard';\nimport { getAudienceList, getNotificationCategoryList } from './../../../../components/API/filter'\nimport RKLoader from '../../../../components/UI/RKLoaderInner/RKLoader';\nimport { connect } from 'react-redux';\nimport { validationNotification } from '../../../../helpers/validation/validation';\nimport InputComponent from '../../../../components/UI/Input/Input';\n\nimport { ReactMultiEmail } from \"react-multi-email\";\nimport \"react-multi-email/style.css\";\n\nfunction AddNotification({\n    onAddNotification,\n    isLoading\n}) {\n\n    const history = useHistory();\n    const [sche, setSche] = useState(new Date());\n    const cobrandEmail = JSON.parse(localStorage.getItem('userData')).cobrandEmail;\n    const cobrandComId = JSON.parse(localStorage.getItem('userData')).cobrandComunityId;\n    const [emailList, setEmailList] = useState([]);\n    const [notifContext, setNotifContext] = useState('');\n    const [isTargetChecked, setTargetChecked] = useState(false);\n    const [isScheduleChecked, setScheduleChecked] = useState(false);\n\n    const [targetList, setTargetList] = useState([]);\n    const [categoryList, setCategoryList] = useState([]);\n\n    const [isPageLoading, setPageLoading] = useState(true);\n\n    useEffect(() => {\n        let x = sche;\n        x.setTime(x.getTime() + 7 * 60 * 60 * 1000);\n        setSche(x);\n        // console.log(new Date().toISOString())\n        if(localStorage.getItem('emailTo')) {\n            setEmailList(localStorage.getItem('emailTo').split(','));\n            localStorage.removeItem('emailTo');\n        }\n        if(localStorage.getItem('notifContext')) {\n            setNotifContext(localStorage.getItem('notifContext'));\n            localStorage.removeItem('notifContext');\n        }\n        let params = {};\n        let promiseAudience = getAudienceList(params);\n        let promiseCategory = getNotificationCategoryList(params);\n        Promise.all([promiseAudience, promiseCategory])\n        .then(response => {\n            // console.log(response[0].data.Data);\n            // console.log(response[1].data.Data);\n            setTargetList(response[0].data.Data);\n            setCategoryList(response[1].data.Data);\n            setPageLoading(false);\n        })\n    }, []);\n\n    if(isPageLoading)\n        return <RKLoader />\n\n    return (\n        <>\n            <Heading headingName=\"Buat Notifikasi\" routes={[\n                { path: '/cms/notifications', name: 'Notifikasi' },\n                { path: '/cms/notifications/add', name: 'Buat Notifikasi Baru' }\n            ]} />\n            <Formik\n                initialValues= {{\n                    destination: emailList, \n                    messageSubject: notifContext,\n                    messageContent: '',\n                    useSchedule: false,\n                    scheduleTime: sche.toISOString().slice(0, -8),\n                    mediaType: 'Semua',\n                    category: 'Umum',\n\n                }}\n                validationSchema = {validationNotification}\n                validateOnChange = {true}\n                onSubmit = { values => {\n                    onAddNotification(cobrandEmail, values.destination, values.messageSubject, values.messageContent, values.useSchedule, values.scheduleTime, values.mediaType, values.category, cobrandComId, history)\n                }}\n            >\n            {({handleChange, handleSubmit, handleBlur, setFieldValue, values, errors, touched}) => (\n                <form onSubmit={handleSubmit}>\n                    <div className=\"AddNotification\">\n                        <div className=\"form-group\">\n                            <label className=\"form-group-label\">Tujuan</label>\n                            <label className=\"form-group-option\">\n                                <input type=\"checkbox\" onClick={(e) => {\n                                        setFieldValue(\"destination\", []);\n                                    if(e.currentTarget.checked) setTargetChecked(true);\n                                    else {\n                                        setFieldValue(\"destination\", emailList);\n                                        setTargetChecked(false);\n                                    }\n                                }}>\n                                        </input>\n                                <p>Pakai Target Pengguna</p>\n                            </label>\n                            {isTargetChecked ? (\n                                <div className=\"form-group-choice\"> \n                                    {targetList.map(e => {\n                                        return <label>\n                                            <input type=\"checkbox\" value={e.audianceName} onClick={(event) => {\n                                                if(event.currentTarget.checked) {\n                                                    let x = values.destination;\n                                                    x.push(e.audianceName);\n                                                    setFieldValue(\"destination\", x);\n                                                }\n                                                else {\n                                                    let x = values.destination;\n                                                    let y = x.indexOf(e.audianceName);\n                                                    if(y > -1) x.splice(y, 1);\n                                                    setFieldValue(\"destination\", x);\n                                                }\n                                            }}>\n                                            </input>\n                                        <p>{e.audianceName}</p></label>\n                                    })}\n                                </div>\n                            ) : (\n                                <ReactMultiEmail\n                                    placeholder=\"Masukkan email...\"\n                                    emails={values.destination}\n                                    onChange={(_emails) => {\n                                        setEmailList(_emails)\n                                        setFieldValue(\"destination\", _emails)\n                                    }}\n                                    getLabel={(\n                                        email,\n                                        index,\n                                        removeEmail\n                                    ) => {\n                                        return (\n                                            <div data-tag key={index}>\n                                                {email}\n                                                <span data-tag-handle onClick={() => removeEmail(index)}>\n                                                ×\n                                                </span>\n                                            </div>\n                                        );\n                                    }}\n                                />\n                            )}\n                            {touched.destination && <span className=\"message__error\">{errors.destination}</span>}\n                        </div>\n                        <div className=\"form-group\">\n                            <label className=\"form-group-label\">Judul Pesan</label>\n                            <InputComponent \n                                type=\"text\"\n                                name=\"messageSubject\"\n                                className=\"form-group__input form-group__input--fullwidth\" \n                                placeholder=\"Example\"\n                                value={values.messageSubject}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            />\n                            {touched.programName && <span className=\"message__error\">{errors.programName}</span>}\n                        </div>\n                        <div className=\"form-group\">\n                            <label className=\"form-group-label\">Isi Pesan</label>\n                            <InputComponent\n                                type=\"textarea\"\n                                name=\"messageContent\"\n                                placeholder=\"Ketik pesan...\"\n                                value={values.messageContent}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            />\n                           {touched.messageContent && <span className=\"message__error\">{errors.messageContent}</span>}\n                        </div>\n                        <div className=\"form-group\">\n                            <label className=\"form-group-label\">Pengaturan Jadwal</label>\n                            <label className=\"form-group-option\">\n                                <input type=\"checkbox\" onClick={(e) => {\n                                    if(e.currentTarget.checked) {\n                                        setScheduleChecked(true);\n                                        setFieldValue(\"useSchedule\", true);\n                                    }\n                                    else {\n                                        setScheduleChecked(false);\n                                        setFieldValue(\"useSchedule\", true);\n                                        setFieldValue(\"scheduleTime\", sche.toISOString().slice(0, -8))\n                                    }\n                                }}>\n                                        </input>\n                                <p>Jadwalkan</p>\n                            </label>\n                            <InputComponent\n                                type=\"datetime-local\"\n                                className=\"form-group__input\"\n                                name=\"scheduleTime\"\n                                min={new Date().toISOString().slice(0, -8)}\n                                value={values.scheduleTime}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                disabled={!isScheduleChecked}\n                            />\n                            {touched.startDate && <span className=\"message__error\">{errors.startDate}</span>}\n                        </div>\n                        <div className=\"form-group\">\n                            <label className=\"form-group-label\">Kirim Via</label>\n                            <select\n                                name=\"mediaType\"\n                                value={values.mediaType}\n                                onChange={(e) => {\n                                    setFieldValue(\"mediaType\", e.currentTarget.value);\n                                }}\n                            >\n                                <option value=\"Semua\">Semua</option>\n                                <option value=\"Email\">Email</option>\n                                <option value=\"Device\">Device</option>\n                            </select>\n                           {touched.messageContent && <span className=\"message__error\">{errors.messageContent}</span>}\n                        </div>\n                        <div className=\"form-group\">\n                            <label className=\"form-group-label\">Kategori</label>\n                            \n                            <div className=\"form-group-choice\"> \n                                {categoryList.map(e => {\n                                    return <label>\n                                        <input type=\"radio\" name=\"category\" value={e.category} checked={values.category === e.category} onChange={(event) => {\n                                            if(event.currentTarget.checked) {\n                                                setFieldValue(\"category\", event.currentTarget.value);\n                                            }\n                                        }}>\n                                        </input>\n                                    <p>{e.category}</p></label>\n                                })}\n                            </div>\n                            \n                            {touched.category && <span className=\"message__error\">{errors.category}</span>}\n                        </div>\n                        <div>\n                            <button className=\"btn btn-submit\" type=\"submit\">\n                                Kirim Notifikasi\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            )}\n            </Formik>\n            {/* {console.log(isLoading)} */}\n            {isLoading ? <RKLoader/> : null}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    // console.log(state.auth.isLoading);\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAddNotification: ( cobrandEmail, destination, messageSubject, messageContent, useSchedule, scheduleTime, mediaType, category, cobrandComunityId, history ) =>\n            dispatch(addNotification( cobrandEmail, destination, messageSubject, messageContent, useSchedule, scheduleTime, mediaType, category, cobrandComunityId, history ))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (AddNotification)\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Heading.scss';\n\nfunction Heading({ headingName, routes = [] }) {\n    \n    return (\n        <div className=\"Heading\">\n            <h1>{headingName}</h1>\n            <ul className=\"Heading__breadcumb\">\n                {routes.length > 0 && routes.map((item, i) => {\n                    if(item.path){\n                        return <li className=\"Heading__breadcumb-item\" key={i}><NavLink exact to={item.path}>{item.name}</NavLink> </li>\n                    }else{\n                        return <li className=\"Heading__breadcumb-item\" key={i}> <span>{item.name}</span> </li>\n                    }\n                })}\n            </ul>\n        </div>\n    )\n}\n\nexport default Heading\n"],"sourceRoot":""}