{"version":3,"sources":["helpers/validation/validation.js","assets/img/Logo_2.png","assets/img/device2.png","containers/CoBrand/Register/Register.js","components/UI/Help/LoginHelp/LoginHelp.js","components/UI/Input/Input.js"],"names":["PhoneRegex","validationFormLogin","yup","userName","required","password","validationFormRegister","email","accountName","cobrandName","thumbnail","test","img","includes","type","size","phoneNumber","matches","address","min","confirmPassword","when","schema","message","validationFormEdit","validationProgram","programName","programDescription","programThumbnail","startDate","endDate","category","targetAudiance","contentPrograms","of","namaTahapan","contentName","contents","answerKey","is","then","otherwise","validationProgramEdit","validationStepEdit","validationContent","contentDescription","contentSource","contentThumbnail","isActive","topics","targetAudience","validationContentEdit","validationUserEdit","nameUser","emailUser","birdDate","validationNotification","destination","messageSubject","messageContent","scheduleTime","mediaType","validationAudience","audianceName","validationNotifCategory","description","validationProgCategory","validationStaff","phone","validationCommunity","cobrandComunityName","partComunityName","validationGroupMitraAsuh","groupMitraAsuhName","validationContentTopic","topicName","validationScreenTime","controlParameterName","controlParameterValue","connect","state","isLoading","auth","dispatch","onRegister","history","registerAuth","useState","showHelp","setShowHelp","useHistory","LoginHelp","className","onClick","src","Logo","alt","DeviceImage","to","initialValues","validationSchema","validateOnChange","onSubmit","values","handleChange","handleBlur","handleSubmit","setFieldValue","touched","errors","Input","placeholder","name","onChange","value","onBlur","isError","Boolean","e","file","currentTarget","files","RKLoader","max","disabled","id","memo"],"mappings":"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","file":"static/js/68.047d1c9a.chunk.js","sourcesContent":["import * as yup from 'yup';\n\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\nconst UserRegex = /^\\S*$/;\n\nexport const validationFormLogin = yup.object({\n    userName: yup.string('Enter your email').required('Email is required'),\n    password: yup.string('Enter your password').required('Password is required')\n})\n\nexport const validationFormRegister = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    accountName: yup.string('Enter your name').required('Name is required'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => password && confirmPassword === password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationFormEdit = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                (img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)) || (!img)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n        //buat nambahin misal upload background. apakah akan masuk kesini?\n        \n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => (password && confirmPassword === password) || !password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationProgram = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    endDate: yup.date('Insert end date').required('Date is required'),\n    category: yup.string(),\n    targetAudiance: yup.array().min(1, 'Pilih minimal 1'),\n    contentPrograms: yup.array().min(1).of(\n        yup.object({\n            namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\n            contentName: yup.string().required('Judul Tahapan harus diisi'),\n            contents: yup.string().required('Isi Tahapan harus diisi'),\n            startDate: yup.date('Insert start date').required('Date is required'),\n            endDate: yup.date('Insert end date').required('Date is required'),\n            answerKey: yup.string().when('category', {\n                is: 'Ujian',\n                then: yup.string().required('Kunci Jawaban harus diisi'),\n                otherwise: yup.string()\n            })\n        })\n    )\n})\n\nexport const validationProgramEdit = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n});\n\nexport const validationStepEdit = yup.object({\n    namaTahapan: yup.string().required('Nama Tahapan harus diisi'),\n    contentName: yup.string().required('Judul Tahapan harus diisi'),\n    contents: yup.string().required('Isi Tahapan harus diisi'),\n});\n\nexport const validationContent = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description'),\n    contents: yup.string('Enter the content description').required('Content is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    endDate: yup.date('Insert end date').required('Date is required'),\n    isActive: yup.boolean(),\n    topics: yup.array().min(1),\n    targetAudience: yup.array().min(1)\n})\n\nexport const validationContentEdit = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description'),\n    contents: yup.string('Enter the content description').required('Content is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n});\n\nexport const validationUserEdit = yup.object({\n    nameUser: yup.string('Enter your content title').required('User name is required'),\n    emailUser: yup.string('Enter the content description').required('Email is required').email('Email not valid'),\n    birdDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationNotification = yup.object({\n    destination: yup.array().min(1),\n    messageSubject: yup.string('Enter the message subject').required('Message Subject is required'),\n    messageContent: yup.string('Enter the message content').required('Message Content is required'),\n    scheduleTime: yup.date('Insert start date').required('Date is required'),\n    mediaType: yup.string('Enter the media type').required('Media type is required'),\n    category: yup.string('Enter the category').required('Category is required')\n})\n\nexport const validationAudience = yup.object({\n    audianceName: yup.string('Enter your audience name').required('Audience Name is required')\n})\n\nexport const validationNotifCategory = yup.object({\n    category: yup.string('Enter category name').required('Category is required'),\n    description: yup.string('Enter description').required('Description is required')\n})\n\nexport const validationProgCategory = yup.object({\n    category: yup.string('Enter category name').required('Category is required'),\n    description: yup.string('Enter description').required('Description is required')\n})\n\nexport const validationStaff = yup.object({\n    emailUser: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    userName: yup.string('Enter your name').required('Name is required').matches(UserRegex, 'Invalid username format'),\n    phone: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more')\n})\n\nexport const validationCommunity = yup.object({\n    cobrandComunityName: yup.string('Enter your community name').required('Community name is required'),\n    partComunityName: yup.string('Enter your community name')\n})\n\nexport const validationGroupMitraAsuh = yup.object({\n    groupMitraAsuhName: yup.string('Enter your group name').required('Group name is required'),\n})\n\nexport const validationContentTopic = yup.object({\n    topicName: yup.string('Enter topic name').required('Topic Name is required')\n})\n\nexport const validationScreenTime = yup.object({\n    controlParameterName: yup.string('Enter category name').required('Category is required'),\n    controlParameterValue: yup.number().required('Number is required')\n})","export default __webpack_public_path__ + \"static/media/Logo_2.17216ad5.png\";","export default __webpack_public_path__ + \"static/media/device2.69f8ea4a.png\";","import React, { useState } from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport './Register.scss';\nimport Logo from './../../../assets/img/Logo_2.png'\nimport DeviceImage from './../../../assets/img/device2.png';\nimport InputComponent from '../../../components/UI/Input/Input';\nimport RKLoader from '../../../components/UI/RKLoader/RKLoader';\nimport { Formik } from 'formik';\nimport { validationFormRegister } from './../../../helpers/validation/validation';\nimport { connect } from 'react-redux';\nimport { registerAuth } from './../../../store/actions/auth';\nimport LoginHelp from '../../../components/UI/Help/LoginHelp/LoginHelp';\nimport { FiHelpCircle, FiXCircle } from 'react-icons/fi'\n\nfunction Register({\n    onRegister,\n    isLoading\n}) {\n    const [showHelp, setShowHelp] = useState(false);\n\n    const history = useHistory();\n\n    return (\n        <>\n            {showHelp ? <LoginHelp /> : null}\n            {showHelp ? (\n                <button \n                    className=\"CloseHelp\"\n                    onClick={() => {\n                    setShowHelp(false);\n                }}><FiXCircle/> </button>\n            ) : null}\n            <div className=\"RegisterBg\">\n            <div className=\"Register\">\n                <div className=\"Register-top\">\n                    <img src={Logo} className=\"Register-top-img\" alt=\"logo top\" />\n                </div>\n             \n                <div className=\"Register-middle\">\n                        <div className=\"Register-middle-left\">\n                            <img \n                                src={DeviceImage} \n                                alt=\"Device \" \n                                className=\"Register-middle-left-img\"\n                            />\n                            <NavLink\n                                to=\"/register\" \n                                className=\"Register-middle-left-help\"\n                                onClick={() => {\n                                setShowHelp(true);\n                            }}><FiHelpCircle/>  Bantuan</NavLink>\n                        </div>\n                        <div className=\"Register-middle-right\">\n                            <div className=\"Register-middle-right-heading mb-small\">\n                                <h1>Daftarkan Brand Anda.</h1>\n                            </div>\n                            <Formik\n                                initialValues= {{\n                                    email: '',\n                                    password: '',\n                                    confirmPassword: '',\n                                    accountName: '',\n                                    cobrandName: '',\n                                    phoneNumber: '',\n                                    address: '',\n                                    thumbnail: ''\n                                }}\n                                validationSchema = {validationFormRegister}\n                                validateOnChange = {true}\n                                onSubmit = {values => {\n                                    onRegister( values.email, values.accountName, values.cobrandName, values.thumbnail, values.phoneNumber,\n                                        values.address, values.password, values.confirmPassword, history)\n                                }}\n                            >\n                            {({handleChange, handleBlur, handleSubmit, setFieldValue, touched, values, errors}) => (\n                                <form className=\"Register-middle-right-form\" onSubmit={handleSubmit}>\n                                    <InputComponent \n                                        placeholder=\"Your E-mail (example@mail.com)\"\n                                        type=\"text\"\n                                        name=\"email\"\n                                        onChange={handleChange}\n                                        value={values.email}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.email && Boolean(errors.email) }\n                                        message={touched.email && errors.email}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Password\"\n                                        type=\"password\"\n                                        name=\"password\"\n                                        onChange={handleChange}\n                                        value={values.password}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.password && Boolean(errors.password) }\n                                        message={touched.password && errors.password}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Confirm Password\"\n                                        type=\"password\"\n                                        name=\"confirmPassword\"\n                                        onChange={handleChange}\n                                        value={values.confirmPassword}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.confirmPassword && Boolean(errors.confirmPassword) }\n                                        message={touched.confirmPassword && errors.confirmPassword}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Your Name\"\n                                        type=\"text\"\n                                        name=\"accountName\"\n                                        onChange={handleChange}\n                                        value={values.accountName}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.accountName && Boolean(errors.accountName) }\n                                        message={touched.accountName && errors.accountName}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Your Brand Name\"\n                                        type=\"text\"\n                                        name=\"cobrandName\"\n                                        onChange={handleChange}\n                                        value={values.cobrandName}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.cobrandName && Boolean(errors.cobrandName) }\n                                        message={touched.cobrandName && errors.cobrandName}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Phone Number\"\n                                        type=\"text\"\n                                        name=\"phoneNumber\"\n                                        onChange={handleChange}\n                                        value={values.phoneNumber}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.phoneNumber && Boolean(errors.phoneNumber) }\n                                        message={touched.phoneNumber && errors.phoneNumber}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Address\"\n                                        type=\"textarea\"\n                                        name=\"address\"\n                                        onChange={handleChange}\n                                        value={values.address}\n                                        className=\"Input-control Input-control-big Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.address && Boolean(errors.address) }\n                                        message={touched.address && errors.address}\n                                    />\n                                    <label>Photo</label>\n                                    <InputComponent \n                                        placeholder=\"Photo\"\n                                        type=\"file\"\n                                        name=\"thumbnail\"\n                                        onChange={(e) => {\n                                            let file = e.currentTarget.files[0];\n                                            if(file) {\n                                            // console.log(\"File to upload: \", file);\n                                            setFieldValue(\"thumbnail\", file);\n                                            }\n                                        }}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.thumbnail && Boolean(errors.thumbnail) }\n                                        message={touched.thumbnail && errors.thumbnail}\n                                    />\n                                    <button\n                                        className=\"btn btn-register\"\n                                        type=\"submit\"\n                                    >\n                                        Sign up\n                                    </button>\n                                </form>\n                            )}\n                            </Formik>\n                            <p className=\"Register-middle-right-joinus\">Sudah punya akun? <NavLink to=\"/\">Klik untuk masuk</NavLink> </p>\n                        </div>\n                    </div> \n                \n                {isLoading && (\n                    <RKLoader />\n                )}\n                <div className=\"Register-bottom\"></div>\n            </div>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onRegister: ( email, accountName, cobrandName, thumbnail, phoneNumber, address, password, confirmPassword, history ) =>\n            dispatch( registerAuth( email, accountName, cobrandName, thumbnail, phoneNumber, address, password, confirmPassword, history )  )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Register)\n","import React from 'react';\nimport './LoginHelp.scss';\n\nfunction LoginHelp() {\n    return (\n        <div className=\"HelpOverlay\">\n            <div className=\"HelpOverlay-content\">\n                <h1>Guide Co-Brand Ruang Ortu</h1>\n                <h2>Registrasi</h2>\n                <p>Pada halaman utama (Login), klik pada tulisan <span className=\"HelpOverlay-content-keyword\">Daftar Sekarang</span> untuk masuk ke halaman registrasi. Pada halaman registrasi, Anda harus mengisi delapan kolom yang disediakan, yaitu:</p>\n                <p><br/></p>\n                <ol>\n                    <li>E-Mail</li>\n                    <li>Password</li>\n                    <li>Confirm Password (isi harus sama dengan password)</li>\n                    <li>Your Name (Nama Anda)</li>\n                    <li>Your Brand Name (Nama Brand Anda)</li>\n                    <li>Phone Number (Nomor Telepon yang terhubung dengan Brand Anda)</li>\n                    <li>Address (Alamat Brand Anda)</li>\n                    <li>Photo (Foto atau Gambar Logo dari Brand Anda)</li>\n                </ol>\n                <p><br/></p>\n                <p>Setelah mengisi delapan kolom di atas, klik <span className=\"HelpOverlay-content-keyword\">Sign Up</span> untuk mendaftarkan Brand Anda. Jika berhasil, Anda akan dialihkan ke halaman <span className=\"HelpOverlay-content-keyword\">Login</span> untuk masuk.</p>\n                <p><br/></p>\n                <p><br/></p>\n                <h2>Login</h2>\n                <p>Pada halaman login, masukkan e-mail dan password yang telah dibuat pada saat registrasi. Lalu, klik tombol <span className=\"HelpOverlay-content-keyword\">Login</span>. Jika berhasil, Anda akan dialihkan ke halaman Dashboard.</p>   \n            </div>\n        </div>\n    )\n}\n\nexport default LoginHelp","import React, { memo } from 'react';\nimport './Input.scss';\n\nfunction Input({\n    placeholder,\n    type,\n    onChange,\n    onBlur,\n    value,\n    className,\n    message,\n    name,\n    min,\n    max,\n    disabled,\n    isError\n}) {\n    if(type === \"textarea\") {\n        return (\n        <>\n            <textarea\n                name={name}\n                id={name}\n                className={className}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n        )\n    }\n    else if(type === 'date' || type === 'datetime-local') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    placeholder={placeholder}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                    max={\"9999-12-31\"}\n                    disabled={disabled}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else if(type === 'number') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                    max={max}\n                    disabled={disabled}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else return (\n        <>\n            <input\n                name={name}\n                className={className} \n                type={type}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default memo(Input) \n"],"sourceRoot":""}