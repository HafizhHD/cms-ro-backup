{"version":3,"sources":["containers/CoBrand/Register/Register.js","components/UI/Input/Input.js","helpers/validation/validation.js","assets/img/device2.png","components/UI/Help/LoginHelp/LoginHelp.js"],"names":["connect","state","isLoading","auth","dispatch","onRegister","email","accountName","cobrandName","thumbnail","phoneNumber","address","password","confirmPassword","history","registerAuth","useState","showHelp","setShowHelp","useHistory","className","onClick","src","Logo","alt","DeviceImage","to","initialValues","validationSchema","validationFormRegister","validateOnChange","onSubmit","values","handleChange","handleBlur","handleSubmit","setFieldValue","touched","errors","placeholder","type","name","onChange","value","onBlur","isError","Boolean","message","e","file","currentTarget","files","console","log","Input","min","disabled","id","max","memo","PhoneRegex","validationFormLogin","yup","required","test","img","includes","size","matches","when","schema","validationFormEdit","validationProgram","programName","programDescription","programThumbnail","startDate","validationProgramEdit","validationContent","contentName","contentDescription","contents","contentSource","contentThumbnail","isActive","validationContentEdit","LoginHelp"],"mappings":"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","file":"static/js/26.db18e144.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport './Register.scss';\nimport Logo from './../../../assets/img/Logo_2.png'\nimport DeviceImage from './../../../assets/img/device2.png';\nimport InputComponent from '../../../components/UI/Input/Input';\nimport RKLoader from '../../../components/UI/RKLoader/RKLoader';\nimport { Formik } from 'formik';\nimport { validationFormRegister } from './../../../helpers/validation/validation';\nimport { connect } from 'react-redux';\nimport { registerAuth } from './../../../store/actions/auth';\nimport LoginHelp from '../../../components/UI/Help/LoginHelp/LoginHelp';\nimport { FiHelpCircle, FiXCircle } from 'react-icons/fi'\n\nfunction Register({\n    onRegister,\n    isLoading\n}) {\n    const [showHelp, setShowHelp] = useState(false);\n\n    const history = useHistory();\n\n    return (\n        <>\n            {showHelp ? <LoginHelp /> : null}\n            {showHelp ? (\n                <button \n                    className=\"CloseHelp\"\n                    onClick={() => {\n                    setShowHelp(false);\n                }}><FiXCircle/> </button>\n            ) : null}\n            <div className=\"RegisterBg\">\n            <div className=\"Register\">\n                <div className=\"Register-top\">\n                    <img src={Logo} className=\"Register-top-img\" alt=\"logo top\" />\n                </div>\n             \n                <div className=\"Register-middle\">\n                        <div className=\"Register-middle-left\">\n                            <img \n                                src={DeviceImage} \n                                alt=\"Device \" \n                                className=\"Register-middle-left-img\"\n                            />\n                            <NavLink\n                                to=\"/register\" \n                                className=\"Register-middle-left-help\"\n                                onClick={() => {\n                                setShowHelp(true);\n                            }}><FiHelpCircle/>  Bantuan</NavLink>\n                        </div>\n                        <div className=\"Register-middle-right\">\n                            <div className=\"Register-middle-right-heading mb-small\">\n                                <h1>Daftarkan Brand Anda.</h1>\n                            </div>\n                            <Formik\n                                initialValues= {{\n                                    email: '',\n                                    password: '',\n                                    confirmPassword: '',\n                                    accountName: '',\n                                    cobrandName: '',\n                                    phoneNumber: '',\n                                    address: '',\n                                    thumbnail: ''\n                                }}\n                                validationSchema = {validationFormRegister}\n                                validateOnChange = {true}\n                                onSubmit = {values => {\n                                    onRegister( values.email, values.accountName, values.cobrandName, values.thumbnail, values.phoneNumber,\n                                        values.address, values.password, values.confirmPassword, history)\n                                }}\n                            >\n                            {({handleChange, handleBlur, handleSubmit, setFieldValue, touched, values, errors}) => (\n                                <form className=\"Register-middle-right-form\" onSubmit={handleSubmit}>\n                                    <InputComponent \n                                        placeholder=\"Your E-mail (example@mail.com)\"\n                                        type=\"text\"\n                                        name=\"email\"\n                                        onChange={handleChange}\n                                        value={values.email}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.email && Boolean(errors.email) }\n                                        message={touched.email && errors.email}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Password\"\n                                        type=\"password\"\n                                        name=\"password\"\n                                        onChange={handleChange}\n                                        value={values.password}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.password && Boolean(errors.password) }\n                                        message={touched.password && errors.password}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Confirm Password\"\n                                        type=\"password\"\n                                        name=\"confirmPassword\"\n                                        onChange={handleChange}\n                                        value={values.confirmPassword}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.confirmPassword && Boolean(errors.confirmPassword) }\n                                        message={touched.confirmPassword && errors.confirmPassword}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Your Name\"\n                                        type=\"text\"\n                                        name=\"accountName\"\n                                        onChange={handleChange}\n                                        value={values.accountName}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.accountName && Boolean(errors.accountName) }\n                                        message={touched.accountName && errors.accountName}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Your Brand Name\"\n                                        type=\"text\"\n                                        name=\"cobrandName\"\n                                        onChange={handleChange}\n                                        value={values.cobrandName}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.cobrandName && Boolean(errors.cobrandName) }\n                                        message={touched.cobrandName && errors.cobrandName}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Phone Number\"\n                                        type=\"text\"\n                                        name=\"phoneNumber\"\n                                        onChange={handleChange}\n                                        value={values.phoneNumber}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.phoneNumber && Boolean(errors.phoneNumber) }\n                                        message={touched.phoneNumber && errors.phoneNumber}\n                                    />\n                                    <InputComponent \n                                        placeholder=\"Address\"\n                                        type=\"textarea\"\n                                        name=\"address\"\n                                        onChange={handleChange}\n                                        value={values.address}\n                                        className=\"Input-control Input-control-big Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.address && Boolean(errors.address) }\n                                        message={touched.address && errors.address}\n                                    />\n                                    <label>Photo</label>\n                                    <InputComponent \n                                        placeholder=\"Photo\"\n                                        type=\"file\"\n                                        name=\"thumbnail\"\n                                        onChange={(e) => {\n                                            let file = e.currentTarget.files[0];\n                                            if(file) {\n                                            console.log(\"File to upload: \", file);\n                                            setFieldValue(\"thumbnail\", file);\n                                            }\n                                        }}\n                                        className=\"Input-control Input-control__with-focus mb-tiny\"\n                                        onBlur={handleBlur}\n                                        isError={touched.thumbnail && Boolean(errors.thumbnail) }\n                                        message={touched.thumbnail && errors.thumbnail}\n                                    />\n                                    <button\n                                        className=\"btn btn-register\"\n                                        type=\"submit\"\n                                    >\n                                        Sign up\n                                    </button>\n                                </form>\n                            )}\n                            </Formik>\n                            <p className=\"Register-middle-right-joinus\">Sudah punya akun? <NavLink to=\"/\">Klik untuk masuk</NavLink> </p>\n                        </div>\n                    </div> \n                \n                {isLoading && (\n                    <RKLoader />\n                )}\n                <div className=\"Register-bottom\"></div>\n            </div>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoading: state.auth.isLoading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onRegister: ( email, accountName, cobrandName, thumbnail, phoneNumber, address, password, confirmPassword, history ) =>\n            dispatch( registerAuth( email, accountName, cobrandName, thumbnail, phoneNumber, address, password, confirmPassword, history )  )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Register)\n","import React, { memo } from 'react';\nimport './Input.scss';\n\nfunction Input({\n    placeholder,\n    type,\n    onChange,\n    onBlur,\n    value,\n    className,\n    message,\n    name,\n    min,\n    disabled,\n    isError\n}) {\n    if(type === \"textarea\") {\n        return (\n        <>\n            <textarea\n                name={name}\n                id={name}\n                className={className}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n        )\n    }\n    else if(type === 'date') {\n        return (\n            <>\n                <input\n                    name={name}\n                    className={className} \n                    type={type}\n                    placeholder={placeholder}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    value={value}\n                    min={min}\n                    max={\"9999-12-31\"}\n                    disabled={disabled}\n                />\n                {isError && (\n                    <div className=\"message\">\n                        <span className=\"message__error\">{message}</span>\n                    </div>\n                )}\n            </>\n        )\n    }\n    else return (\n        <>\n            <input\n                name={name}\n                className={className} \n                type={type}\n                placeholder={placeholder}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                disabled={disabled}\n            />\n            {isError && (\n                <div className=\"message\">\n                    <span className=\"message__error\">{message}</span>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default memo(Input) \n","import * as yup from 'yup';\n\nconst PhoneRegex = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\n\nexport const validationFormLogin = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    password: yup.string('Enter your password').required('Password is required')\n})\n\nexport const validationFormRegister = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    accountName: yup.string('Enter your name').required('Name is required'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').required('Password is required').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password').required('Password is required')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => password && confirmPassword === password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationFormEdit = yup.object({\n    email: yup.string('Enter your email').required('Email is required').email('Email not valid'),\n    cobrandName: yup.string('Enter your brand name').required('Brand name is required'),\n    thumbnail: yup.mixed('Insert your image, 2 MB max')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                (img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)) || (!img)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n        //buat nambahin misal upload background. apakah akan masuk kesini?\n        \n    phoneNumber: yup.string('Enter your phone number').required('Phone number is required').matches(PhoneRegex, 'Invalid phone number format'),\n    address: yup.string('Enter your address').required('Address is required'),\n    password: yup.string('Enter your password').min(8, 'Password should be 8 characters or more'),\n    confirmPassword: yup.string('Confirm your password')\n        .when('password', (password, schema) => {\n            return schema.test({\n                test: confirmPassword => (password && confirmPassword === password) || !password,\n                message: \"Password doesn't match\"\n            })\n        })\n})\n\nexport const validationProgram = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    programThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationProgramEdit = yup.object({\n    programName: yup.string('Enter your program title').required('Program title is required'),\n    programDescription: yup.string('Enter the program description').required('Program description is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n})\n\nexport const validationContent = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description').required('Content description is required'),\n    contents: yup.string('Enter the content description').required('Content description is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    contentThumbnail: yup.mixed('Insert your image, 2 MB max').required('Image is required')\n        .test(\n            'imageType', \"Incorrect file extension, must be .jpg, .jpeg, or .png\",\n            (img) =>\n                img && [\"image/png\", \"image/jpg\", \"image/jpeg\"].includes(img.type)\n        )\n        .test(\n            'imageSize', \"Image file size too large, max image file size is 2 MB\",\n            (img) => {\n                if(img) {\n                    return img.size <= 2097152;\n                }\n                else {\n                    return true;\n                }\n            }\n        ),\n    startDate: yup.date('Insert start date').required('Date is required'),\n    isActive: yup.boolean()\n})\n\nexport const validationContentEdit = yup.object({\n    contentName: yup.string('Enter your content title').required('Content title is required'),\n    contentDescription: yup.string('Enter the content description').required('Content description is required'),\n    contents: yup.string('Enter the content description').required('Content description is required'),\n    contentSource: yup.string('Enter the content source').required('Content source is required'),\n    startDate: yup.date('Insert start date').required('Date is required')\n})","export default __webpack_public_path__ + \"static/media/device2.69f8ea4a.png\";","import React from 'react';\nimport './LoginHelp.scss';\n\nfunction LoginHelp() {\n    return (\n        <div className=\"HelpOverlay\">\n            <div className=\"HelpOverlay-content\">\n                <h1>Guide Co-Brand Ruang Ortu</h1>\n                <h2>Registrasi</h2>\n                <p>Pada halaman utama (Login), klik pada tulisan <span className=\"HelpOverlay-content-keyword\">Daftar Sekarang</span> untuk masuk ke halaman registrasi. Pada halaman registrasi, Anda harus mengisi delapan kolom yang disediakan, yaitu:</p>\n                <p><br/></p>\n                <ol>\n                    <li>E-Mail</li>\n                    <li>Password</li>\n                    <li>Confirm Password (isi harus sama dengan password)</li>\n                    <li>Your Name (Nama Anda)</li>\n                    <li>Your Brand Name (Nama Brand Anda)</li>\n                    <li>Phone Number (Nomor Telepon yang terhubung dengan Brand Anda)</li>\n                    <li>Address (Alamat Brand Anda)</li>\n                    <li>Photo (Foto atau Gambar Logo dari Brand Anda)</li>\n                </ol>\n                <p><br/></p>\n                <p>Setelah mengisi delapan kolom di atas, klik <span className=\"HelpOverlay-content-keyword\">Sign Up</span> untuk mendaftarkan Brand Anda. Jika berhasil, Anda akan dialihkan ke halaman <span className=\"HelpOverlay-content-keyword\">Login</span> untuk masuk.</p>\n                <p><br/></p>\n                <p><br/></p>\n                <h2>Login</h2>\n                <p>Pada halaman login, masukkan e-mail dan password yang telah dibuat pada saat registrasi. Lalu, klik tombol <span className=\"HelpOverlay-content-keyword\">Login</span>. Jika berhasil, Anda akan dialihkan ke halaman Dashboard.</p>   \n            </div>\n        </div>\n    )\n}\n\nexport default LoginHelp"],"sourceRoot":""}